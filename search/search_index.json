{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Gravito's Documentation pages Looking for our product page ? Checkout gravito.net . We\u2019re leading with privacy in visitor data solutions Our mission is to deliver flexible and purpose-built technology that can operate as a standalone solution or within your cloud environment. Clients can choose tools to enhance their marketing capabilities, tailored to the maturity of their tech stack. Loved by developers and business","title":"Welcome to Gravito's Documentation pages"},{"location":"#welcome-to-gravitos-documentation-pages","text":"Looking for our product page ? Checkout gravito.net .","title":"Welcome to Gravito's Documentation pages"},{"location":"#were-leading-with-privacy-in-visitor-data-solutions","text":"Our mission is to deliver flexible and purpose-built technology that can operate as a standalone solution or within your cloud environment. Clients can choose tools to enhance their marketing capabilities, tailored to the maturity of their tech stack.","title":"We\u2019re leading with privacy in visitor data solutions"},{"location":"#loved-by-developers-and-business","text":"","title":"Loved by developers and business"},{"location":"Getting_started/Frequently_Asked_Questions/","text":"Frequently Asked Questions Frequently Asked Questions (FAQ) \u2013 Gravito Intelligent CMP and TCF 2.2 CMP Banner . 1. What is Gravito? Gravito is a Consent Banner provider for websites. It offers both TCF (Transparency & Consent Framework 2.2 ) certified Consent Management Platforms (CMPs) for publisher websites and CMPs for normal retail and ecommerce websites. 2. What is a Consent Banner? A Consent Banner is a pop-up or notification that appears on a website, informing users about the website\u2019s data collection and requesting their consent for data processing activities, such as cookies and tracking. 3. What is TCF Certification? TCF stands for Transparency & Consent Framework, a set of standards developed by the IAB (Interactive Advertising Bureau) Europe to help websites and advertisers comply with GDPR (General Data Protection Regulation) requirements related to data privacy and user consent. Gravito is a Iab certified TCF CMP (Id 302). 4. How does Gravito\u2019s TCF certified CMP benefit publishers? Gravito\u2019s TCF certified CMP helps publishers comply with GDPR by providing a robust consent management solution that ensures user consent is obtained for data processing activities. This can help publishers avoid potential legal issues and maintain a trustworthy reputation with their users. 5. What features does Gravito\u2019s CMP offer for retail and ecommerce websites? Gravito\u2019s CMP for retail and ecommerce websites is designed to make it easy for these businesses to implement and manage consent banners. Some key features include customizable banners, cookie consent management, and analytics to monitor user consent preferences. 6. Why is it important for a CMP to be easy to implement? Easy implementation ensures that website owners and administrators can quickly integrate the consent banner into their websites without significant technical challenges. This reduces the time and effort required to become GDPR compliant. 7. What does \u201cmade in Finland with the Nordic data mindset\u201d mean? Gravito\u2019s products are developed in Finland, and they adhere to a Nordic data mindset, which emphasizes strong data privacy and protection principles. This ensures that the solutions prioritize user consent and data security. 8. How can I get started with Gravito\u2019s CMP for my website? You can get started with Gravito by contacting their sales or support team through their website. They will provide you with the necessary information and guidance to implement their CMP on your website. 9. Is Gravito suitable for both small and large websites? Yes, Gravito\u2019s CMP solutions are designed to cater to websites of all sizes, from small blogs to large e-commerce platforms. Their flexibility allows customization to suit different website requirements. 10. How does Gravito ensure compliance with evolving data privacy regulations? Gravito keeps its CMPs updated to comply with evolving data privacy regulations, such as GDPR and future changes in the TCF. They stay informed about industry standards and best practices to ensure their solutions remain compliant. 11. Does Gravito offer customer support and training? Yes, Gravito provides customer support and may offer training resources to assist users in implementing and managing their CMP effectively. 12. Is Gravito\u2019s CMP compatible with different website platforms and content management systems (CMS)? Gravito\u2019s CMP solutions are designed to be compatible with various website platforms and CMS, making them versatile for different website setups. Please note that this FAQ document provides general information about Gravito and its Consent Banner solutions. For specific details and inquiries, we recommend contacting us directly..","title":"Frequently Asked Questions"},{"location":"Getting_started/Frequently_Asked_Questions/#frequently-asked-questions","text":"Frequently Asked Questions (FAQ) \u2013 Gravito Intelligent CMP and TCF 2.2 CMP Banner . 1. What is Gravito? Gravito is a Consent Banner provider for websites. It offers both TCF (Transparency & Consent Framework 2.2 ) certified Consent Management Platforms (CMPs) for publisher websites and CMPs for normal retail and ecommerce websites. 2. What is a Consent Banner? A Consent Banner is a pop-up or notification that appears on a website, informing users about the website\u2019s data collection and requesting their consent for data processing activities, such as cookies and tracking. 3. What is TCF Certification? TCF stands for Transparency & Consent Framework, a set of standards developed by the IAB (Interactive Advertising Bureau) Europe to help websites and advertisers comply with GDPR (General Data Protection Regulation) requirements related to data privacy and user consent. Gravito is a Iab certified TCF CMP (Id 302). 4. How does Gravito\u2019s TCF certified CMP benefit publishers? Gravito\u2019s TCF certified CMP helps publishers comply with GDPR by providing a robust consent management solution that ensures user consent is obtained for data processing activities. This can help publishers avoid potential legal issues and maintain a trustworthy reputation with their users. 5. What features does Gravito\u2019s CMP offer for retail and ecommerce websites? Gravito\u2019s CMP for retail and ecommerce websites is designed to make it easy for these businesses to implement and manage consent banners. Some key features include customizable banners, cookie consent management, and analytics to monitor user consent preferences. 6. Why is it important for a CMP to be easy to implement? Easy implementation ensures that website owners and administrators can quickly integrate the consent banner into their websites without significant technical challenges. This reduces the time and effort required to become GDPR compliant. 7. What does \u201cmade in Finland with the Nordic data mindset\u201d mean? Gravito\u2019s products are developed in Finland, and they adhere to a Nordic data mindset, which emphasizes strong data privacy and protection principles. This ensures that the solutions prioritize user consent and data security. 8. How can I get started with Gravito\u2019s CMP for my website? You can get started with Gravito by contacting their sales or support team through their website. They will provide you with the necessary information and guidance to implement their CMP on your website. 9. Is Gravito suitable for both small and large websites? Yes, Gravito\u2019s CMP solutions are designed to cater to websites of all sizes, from small blogs to large e-commerce platforms. Their flexibility allows customization to suit different website requirements. 10. How does Gravito ensure compliance with evolving data privacy regulations? Gravito keeps its CMPs updated to comply with evolving data privacy regulations, such as GDPR and future changes in the TCF. They stay informed about industry standards and best practices to ensure their solutions remain compliant. 11. Does Gravito offer customer support and training? Yes, Gravito provides customer support and may offer training resources to assist users in implementing and managing their CMP effectively. 12. Is Gravito\u2019s CMP compatible with different website platforms and content management systems (CMS)? Gravito\u2019s CMP solutions are designed to be compatible with various website platforms and CMS, making them versatile for different website setups. Please note that this FAQ document provides general information about Gravito and its Consent Banner solutions. For specific details and inquiries, we recommend contacting us directly..","title":"Frequently Asked Questions"},{"location":"Getting_started/Register/","text":"Register Before you can start using Gravito features you will need to register yourself in the Gravito portal. Head to https://adminv2.gravito.net and enter your email you want to use with Gravito: After submission you will receive an email with PIN code, enter that to application: After successful login Gravito needs to know few more details about your business: After completion you will land to Gravito administration application: If you have colleagues to invite to work on the same domain(s) and/or business account, head to upper right corner and click on \u201c Account \u201c. You will find \u201c Team \u201d option: Fill in the email address you want to invite and set the domain access as needed. Toggle \u201cCustomer admin\u201d if you want the invitee to have similar rights as you over the business account: After submission the invitee should receive an email containing link to activate the access to the business account.","title":"Register"},{"location":"Getting_started/Register/#register","text":"Before you can start using Gravito features you will need to register yourself in the Gravito portal. Head to https://adminv2.gravito.net and enter your email you want to use with Gravito: After submission you will receive an email with PIN code, enter that to application: After successful login Gravito needs to know few more details about your business: After completion you will land to Gravito administration application: If you have colleagues to invite to work on the same domain(s) and/or business account, head to upper right corner and click on \u201c Account \u201c. You will find \u201c Team \u201d option: Fill in the email address you want to invite and set the domain access as needed. Toggle \u201cCustomer admin\u201d if you want the invitee to have similar rights as you over the business account: After submission the invitee should receive an email containing link to activate the access to the business account.","title":"Register"},{"location":"Getting_started/Release_Notes/","text":"Release Notes Stay up to date with our latest releases! Gravito\u2019s release notes are generally divided as different category as development happens constantly under all categories. You can jump to specific release notes here Gravito Intelligent CMP Gravito TCF 2.2 CMP Gravito SDK Here you can find more about the general product updates Product Release notes Release Notes : Sprint 75 (10/04/2024) Domain Grouping: To see stats of a group of domains. For. eg. Publisher groups. Available Under Domain -> Manage Domain groups Allows you to manage different domain groups with overlap of domains Available for selection under Dashboard and Compare trends. \ud83d\udcc5 Date-wise filter Dashboard Compare trends Reporting section \u201cConsent Data\u201d Added note stating that reporting data is from past 60 days Unnecessary app bar options and filters are removed in CMP(TCF & Gravito) configurator section. Removed ledger tab in reporting section. (As Obsolete data) Changed names of tabs in reporting section Have renamed to First Party and Third party context data \u2139 Added tool tip for sub-tabs containing some helper text. Other smaller bug fixes and minor improvements Release Notes: Sprint 74 (26/03/2024) Support for German and Polish Language in Gravito Intelligent CMP Bug fixes and minor enhancements","title":"Release Notes"},{"location":"Getting_started/Release_Notes/#release-notes","text":"Stay up to date with our latest releases! Gravito\u2019s release notes are generally divided as different category as development happens constantly under all categories. You can jump to specific release notes here Gravito Intelligent CMP Gravito TCF 2.2 CMP Gravito SDK Here you can find more about the general product updates","title":"Release Notes"},{"location":"Getting_started/Release_Notes/#product-release-notes","text":"","title":"Product Release notes"},{"location":"Getting_started/Release_Notes/#release-notes-sprint-75-10042024","text":"Domain Grouping: To see stats of a group of domains. For. eg. Publisher groups. Available Under Domain -> Manage Domain groups Allows you to manage different domain groups with overlap of domains Available for selection under Dashboard and Compare trends. \ud83d\udcc5 Date-wise filter Dashboard Compare trends Reporting section \u201cConsent Data\u201d Added note stating that reporting data is from past 60 days Unnecessary app bar options and filters are removed in CMP(TCF & Gravito) configurator section. Removed ledger tab in reporting section. (As Obsolete data) Changed names of tabs in reporting section Have renamed to First Party and Third party context data \u2139 Added tool tip for sub-tabs containing some helper text. Other smaller bug fixes and minor improvements","title":"Release Notes : Sprint 75 (10/04/2024)"},{"location":"Getting_started/Release_Notes/#release-notes-sprint-74-26032024","text":"Support for German and Polish Language in Gravito Intelligent CMP Bug fixes and minor enhancements","title":"Release Notes: Sprint 74 (26/03/2024)"},{"location":"Getting_started/Support/","text":"Support All support cases and issues are handled by the support team of Gravito or by technology partners. In case you need support please send us email at support@gravito.net Be part of our community? Join us on our Discord Channel here","title":"Support"},{"location":"Getting_started/Support/#support","text":"All support cases and issues are handled by the support team of Gravito or by technology partners. In case you need support please send us email at support@gravito.net","title":"Support"},{"location":"Getting_started/Support/#be-part-of-our-community","text":"Join us on our Discord Channel here","title":"Be part of our community?"},{"location":"Gravito_API/Getting_Started/","text":"Getting Started Gravito API is a powerful tool when it comes to collecting consent statistics while allowing you to connect multiple ids that you use in your setup and give it more persistence. One of the key features of the Gravito API, the Gravito ID Connector is enabled using the server side microprofile which is created. We will discuss this in more detail in the coming section. Here are the sections that we will have in this section. Setup and Validation Version 3 (Latest) Version 2 Microprofile","title":"Getting Started"},{"location":"Gravito_API/Microprofile/","text":"Microprofile Microprofile which relies on Gravito Firstparty API v3 is in Beta testing Gravito Microprofile is sort of a synonym to first party API. First party API was initially developed as simple microservice to help with setting first party cookie to hold CMP settings and consents. As more advanced requirements started to surface we thought that calling the service \u201cmicroprofile\u201d would be reasonable. Micro means simple, right? Wish it was. However, the general idea is pretty simple. We store various types of attributes to a cookie that is set from server-side by API served from sub-domain associated with your domain. Two reasons why: 1) server-side cookie lasts longer than cookies set by javascript running on client2) API operating on your domain avoids the blocking of third party cookies (now and the future) How does it work? First learn about setting up First Party API , after registering your domain(s) you are ready to roll: (Example provided based on Version 3 ) (function () { var xhr = new XMLHttpRequest(); var params = { \"e\": { \"matchOnId\": \"dem05\", \"id1\": \"xyz\", \"counterPageView\":\"2\" }, \"k\": [{ \"i\":\"1\", \"k\":\"GAID\", \"v\": \"2700108e-b965-4d98-b214-274b0701725a\" }, { \"i\":\"2\", \"k\":\"OMID\", \"v\": \"cb115185-2a25-4587-8ff5-e3fe7cc7a25b\" } ], \"c\": [ { \"i\":\"t\", \"c\":\"consent1\", \"s\": false }, { \"i\":\"m\", \"c\":\"consent2\", \"s\": false } ] }; xhr.open(\"POST\", 'https://gto.<yourdomain>/api/v3/firstparty', true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"POST response : \" + response.target.response); } } xhr.send(JSON.stringify(params)); })(); Looks heavy? Let\u2019s open the structure of \u201cparams\u201d a bit. It consists of three main branches: \u201ce\u201d stands for events , that is any key/value pairs that you might need to store into microprofile. Only restricted key name is \u201c matchOnId \u201d which we use to connect microprofiles to each other when there is e.g. hash of user email available, ie. user has logged in and microprofile can be associated to a person. Further on matchOnId has two reserved values: 1) \u201cdisconnect\u201d allows you to disassociate microprofile from login but keep the history and 2) \u201creset\u201d performs disconnect and wipes the microprofile to default stage. \u201ck\u201d stands for keyring , allowing any key/value pairs stored inside keyring. Functionality is somewhat the same as with events but adding/modifying a key is recorded with timestamp, that allows to link the consents collected to these keys (and whether the keys can be used for whatever purpose they were recorded). Keyring (\u201ck\u201d) has fixed structure: \"i\":\"keyId\", -> string\"k\":\"keyName\", -> string\"v\": \"keyValue\" -> string When sending requests to API you will notice that keyring items will have timestamp \u201ct\u201d set by the API, containing timestamp in epochtime. \u201cc\u201d stands for consents , that is to collect the consents received from CMP. Again the behavior follows the key/value pairs approach but with fixed structure: \"i\":\"consentId\", -> string\"c\":\"consentName\", -> string\"s\": status as true or false -> bool Same as with keyring, the timestamp of adding/modifying particular consentId is recorded and returned in API responses. This allows to monitor that when consents are changed and how those turning points connect to collected IDs in keyring (allowing or preventing further activities within integrated systems).","title":"Microprofile"},{"location":"Gravito_API/Microprofile/#microprofile","text":"Microprofile which relies on Gravito Firstparty API v3 is in Beta testing Gravito Microprofile is sort of a synonym to first party API. First party API was initially developed as simple microservice to help with setting first party cookie to hold CMP settings and consents. As more advanced requirements started to surface we thought that calling the service \u201cmicroprofile\u201d would be reasonable. Micro means simple, right? Wish it was. However, the general idea is pretty simple. We store various types of attributes to a cookie that is set from server-side by API served from sub-domain associated with your domain. Two reasons why: 1) server-side cookie lasts longer than cookies set by javascript running on client2) API operating on your domain avoids the blocking of third party cookies (now and the future) How does it work? First learn about setting up First Party API , after registering your domain(s) you are ready to roll: (Example provided based on Version 3 ) (function () { var xhr = new XMLHttpRequest(); var params = { \"e\": { \"matchOnId\": \"dem05\", \"id1\": \"xyz\", \"counterPageView\":\"2\" }, \"k\": [{ \"i\":\"1\", \"k\":\"GAID\", \"v\": \"2700108e-b965-4d98-b214-274b0701725a\" }, { \"i\":\"2\", \"k\":\"OMID\", \"v\": \"cb115185-2a25-4587-8ff5-e3fe7cc7a25b\" } ], \"c\": [ { \"i\":\"t\", \"c\":\"consent1\", \"s\": false }, { \"i\":\"m\", \"c\":\"consent2\", \"s\": false } ] }; xhr.open(\"POST\", 'https://gto.<yourdomain>/api/v3/firstparty', true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"POST response : \" + response.target.response); } } xhr.send(JSON.stringify(params)); })(); Looks heavy? Let\u2019s open the structure of \u201cparams\u201d a bit. It consists of three main branches: \u201ce\u201d stands for events , that is any key/value pairs that you might need to store into microprofile. Only restricted key name is \u201c matchOnId \u201d which we use to connect microprofiles to each other when there is e.g. hash of user email available, ie. user has logged in and microprofile can be associated to a person. Further on matchOnId has two reserved values: 1) \u201cdisconnect\u201d allows you to disassociate microprofile from login but keep the history and 2) \u201creset\u201d performs disconnect and wipes the microprofile to default stage. \u201ck\u201d stands for keyring , allowing any key/value pairs stored inside keyring. Functionality is somewhat the same as with events but adding/modifying a key is recorded with timestamp, that allows to link the consents collected to these keys (and whether the keys can be used for whatever purpose they were recorded). Keyring (\u201ck\u201d) has fixed structure: \"i\":\"keyId\", -> string\"k\":\"keyName\", -> string\"v\": \"keyValue\" -> string When sending requests to API you will notice that keyring items will have timestamp \u201ct\u201d set by the API, containing timestamp in epochtime. \u201cc\u201d stands for consents , that is to collect the consents received from CMP. Again the behavior follows the key/value pairs approach but with fixed structure: \"i\":\"consentId\", -> string\"c\":\"consentName\", -> string\"s\": status as true or false -> bool Same as with keyring, the timestamp of adding/modifying particular consentId is recorded and returned in API responses. This allows to monitor that when consents are changed and how those turning points connect to collected IDs in keyring (allowing or preventing further activities within integrated systems).","title":"Microprofile"},{"location":"Gravito_API/Setup_and_Validation/","text":"Setup and Validation First Party domain means the domain your website operates. e.g. website.com. To avoid third party cookies being blocked (occurs already on many browsers) you can configure the CMP to set the cookies under first party domain or you can use Gravito\u2019s first party API to store and retrieve other valuable profile data. To get started with first party setup, you first need to set up domain in Gravito\u2019s admin panel, https://admin.gravito.net Setup of first party domain, step 1. Once you have configured your domain gto.website.com, you need to do the DNS changes for your domain. These steps are varying between different DNS providers, generally you have to configure three records: First party domain configuration, step 2. After you have made the DNS records (A, TXT and CNAME), allow the changes to propagate to DNS servers (few minutes at least) and then press \u201cValidate\u201d button. After succesful validation you should see domain status as \u201cValidated\u201d:","title":"Setup and Validation"},{"location":"Gravito_API/Version_2/","text":"Version 2 First party API / Microprofile Most common use for first party microprofile is to store CMP consents and other metadata on it. That configuration is automatically generated by CMP configurator, just select \u201cwith backend\u201d option when generating the deployment script and choose right first party domain from the menu. The properties that can be managed with with a First party Microprofile V2 looks like this. { \"id\": \" \", \"referer\": \" \", \"events\": { \"key1\":\"value1\", \"key2\":\"value2\" } } Note: The features available in the Microprofile has been improved a lot in the version 3. You can look at the documentation here. If there would be other needs to use microprofile to act as keyring store, store context analytics results (e.g. segments) or something similar, the calls to first party API microprofile would look something like this: Get profile (function gtoFirstParty() { var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.< >/api/v2/firstparty', true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P echo : \" + response.target.response); } } xhr.send(); })(); Send data to profile (function gtoFirstParty() { var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.< >/api/v2/firstparty?attribute1=value1', true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P echo : \" + response.target.response); } } xhr.send(); })(); Connect cookies across domains, this can be done e.g. using user ID: (function gtoFirstParty() {\u200b var xhr = new XMLHttpRequest();\u200b xhr.open(\"POST\", 'https://gto.< >/api/v2/firstparty?matchOnId=123', true); \u200b xhr.withCredentials = true;\u200b xhr.onreadystatechange = function(response) {\u200b if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {\u200b console.log(\"1P echo : \" + response.target.response);\u200b } \u200b }\u200b xhr.send();\u200b })(); matchOnID is the only reserved key value pair, it allows retrieving the cookie set for particular ID (e.g. logged in user has UID known) from other domain. A user with a matchOnId can be dealt with in 3 different ways to change the particular Id associated in 3 different ways. reset Reset value for the matchOnId can be used to clear all the values from the events key value pair temporarily. disconnect Disconnect value for the matchOnId can be used to remove the matchOnId from the events key value pair. delete Delete keyword for the matchOnId can be used to delete the whole events and the existing microProfileId provided. This operation will reset the microProfileId and give you a new one. Note: In all these cases passing the matchOnId value for a particular ID (e.g. logged in user has UID known) can resurface the whole profile again for your convenience.","title":"Version 2"},{"location":"Gravito_API/Version_3_%28Latest%29/","text":"Version 3 (Latest) First party API / Microprofile As discussed in the previous version 2, most common use for first party microprofile is to store CMP consents and other metadata on it. In version 3 we have added a whole new set of features to manage observations, consents and key rings with in the microprofile. New features: Supports Key Rings, Consents and events Data compression enabled by default Third-party to First-party ID fusion More options to get the audit trail. The data properties of the Version 3 of the api looks like below. { \"i\": \"<microprofileid>\", \"r\": \"<originDomain>\", \"v\": \"v3\", \"e\": { \"key1\": \"value1\", \"key2\": \"value2\" }, \"k\": [ //key value pairs { \"i\": \"keyId\", \"k\": \"KeyName\", \"v\": \"keyValue\", \"t\": <timestamp> }, { \"i\": \"keyId\", \"k\": \"KeyName\", \"v\": \"keyValue\", \"t\": <timestamp> } ], \"c\": [ { \"i\": \"consentId\", \"c\": \"consentName\", \"s\": true, \"t\": <timestamp> }, { \"i\": \"consentId\", \"c\": \"consentName\", \"s\": true, \"t\": <timestamp> } ] } The property values in the V3 are mainly short forms to reduce space in the requests. You can refer the full form here. Timestamp for each entity is auto-generated by Gravito 1st party end point itself to help you keep track of different values when merging data across domains. k : Key Rings i: Key Id k: Key Name v: Key Value t: Timestamp c: Consents i: Consent Id k: Consent Name v: Consent Value t: Timestamp e: Events i: Id r: Referrer v: version If there would be other needs to use microprofile to act as keyring store, store context analytics results (e.g. segments) or something similar, the calls to first party API microprofile would look something like this: (function gtoFirstPartyV3() { var xhr = new XMLHttpRequest(); var params = { \"e\": {}, \"k\": [], \"c\": [] }; xhr.open(\"POST\", \"https://gto.<<domain>>/api/v3/firstparty\", true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P Echo : \" + response.target.response); } } xhr.send(JSON.stringify(params)); })(); Please get in touch with is for a detailed Postman collection to get details of different use cases of this API. We will be happy to help. We can help you get started with sample GTM tag samples which enables simple profiling to complex cases which can enable Thirdparty to FirstParty Id fusion. Connect cookies across domains Under the Key value pair (\"e\"), similar to the version 2 you can still use the matchOnId to connect profiles to different domains. This for example can be done using a users Id when they login. (e.g. logged in user has UID known) matchOnID is the only reserved key value pair, it allows retrieving the cookie set for particular ID (e.g. logged in user has UID known) from other domain. A user with a matchOnId can be dealt with in 3 different ways to change the particular Id associated in 3 different ways. reset Reset value for the matchOnId can be used to clear all the values from the events key value pair temporarily. disconnect Disconnect value for the matchOnId can be used to remove the matchOnId from the events key value pair. delete Delete keyword for the matchOnId can be used to delete the whole events and the existing microProfileId provided. This operation will reset the microProfileId and give you a new one. Note: In all these cases passing the matchOnId value for a particular ID (e.g. logged in user has UID known) can resurface the whole profile again for your convenience.","title":"Version 3 (Latest)"},{"location":"Gravito_API/Version_3_%28Latest%29/#version-3-latest","text":"","title":"Version 3 (Latest)"},{"location":"Gravito_API/Version_3_%28Latest%29/#first-party-api-microprofile","text":"As discussed in the previous version 2, most common use for first party microprofile is to store CMP consents and other metadata on it. In version 3 we have added a whole new set of features to manage observations, consents and key rings with in the microprofile. New features: Supports Key Rings, Consents and events Data compression enabled by default Third-party to First-party ID fusion More options to get the audit trail. The data properties of the Version 3 of the api looks like below. { \"i\": \"<microprofileid>\", \"r\": \"<originDomain>\", \"v\": \"v3\", \"e\": { \"key1\": \"value1\", \"key2\": \"value2\" }, \"k\": [ //key value pairs { \"i\": \"keyId\", \"k\": \"KeyName\", \"v\": \"keyValue\", \"t\": <timestamp> }, { \"i\": \"keyId\", \"k\": \"KeyName\", \"v\": \"keyValue\", \"t\": <timestamp> } ], \"c\": [ { \"i\": \"consentId\", \"c\": \"consentName\", \"s\": true, \"t\": <timestamp> }, { \"i\": \"consentId\", \"c\": \"consentName\", \"s\": true, \"t\": <timestamp> } ] } The property values in the V3 are mainly short forms to reduce space in the requests. You can refer the full form here. Timestamp for each entity is auto-generated by Gravito 1st party end point itself to help you keep track of different values when merging data across domains. k : Key Rings i: Key Id k: Key Name v: Key Value t: Timestamp c: Consents i: Consent Id k: Consent Name v: Consent Value t: Timestamp e: Events i: Id r: Referrer v: version If there would be other needs to use microprofile to act as keyring store, store context analytics results (e.g. segments) or something similar, the calls to first party API microprofile would look something like this: (function gtoFirstPartyV3() { var xhr = new XMLHttpRequest(); var params = { \"e\": {}, \"k\": [], \"c\": [] }; xhr.open(\"POST\", \"https://gto.<<domain>>/api/v3/firstparty\", true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P Echo : \" + response.target.response); } } xhr.send(JSON.stringify(params)); })(); Please get in touch with is for a detailed Postman collection to get details of different use cases of this API. We will be happy to help. We can help you get started with sample GTM tag samples which enables simple profiling to complex cases which can enable Thirdparty to FirstParty Id fusion. Connect cookies across domains Under the Key value pair (\"e\"), similar to the version 2 you can still use the matchOnId to connect profiles to different domains. This for example can be done using a users Id when they login. (e.g. logged in user has UID known) matchOnID is the only reserved key value pair, it allows retrieving the cookie set for particular ID (e.g. logged in user has UID known) from other domain. A user with a matchOnId can be dealt with in 3 different ways to change the particular Id associated in 3 different ways. reset Reset value for the matchOnId can be used to clear all the values from the events key value pair temporarily. disconnect Disconnect value for the matchOnId can be used to remove the matchOnId from the events key value pair. delete Delete keyword for the matchOnId can be used to delete the whole events and the existing microProfileId provided. This operation will reset the microProfileId and give you a new one. Note: In all these cases passing the matchOnId value for a particular ID (e.g. logged in user has UID known) can resurface the whole profile again for your convenience.","title":"First party API / Microprofile"},{"location":"Gravito_Intelligent_CMP/Advanced_Features/","text":"Advanced Features Here are the links to the advanced features supported by Gravito Intelligent CMP Customization Advanced Customization Options Latest Gravito Configuration example (json) Headless CMP using Gravito Integrations How to integrate events emitted by the Gravito Intelligent CMP?","title":"Advanced Features"},{"location":"Gravito_Intelligent_CMP/Advanced_Features/#advanced-features","text":"Here are the links to the advanced features supported by Gravito Intelligent CMP","title":"Advanced Features"},{"location":"Gravito_Intelligent_CMP/Advanced_Features/#customization","text":"Advanced Customization Options Latest Gravito Configuration example (json) Headless CMP using Gravito","title":"Customization"},{"location":"Gravito_Intelligent_CMP/Advanced_Features/#integrations","text":"How to integrate events emitted by the Gravito Intelligent CMP?","title":"Integrations"},{"location":"Gravito_Intelligent_CMP/GTM_Template/","text":"GTM Template Gravito CMP now can be deployed using GTM Template. In order to use this feature, while creating the configuration for Gravito CMP you will have to check the \"Is GTM?\" flag in the basic section of the configuration wizard. If the config is created using the \"is GTM? \" flag then In the list view we can see an additional GTM icon in front of it. By clicking on the icon we can copy the Unique GTM token of the config which can be used in your GTM container. Now go to your Google Tag Manager, and while creating a GTM tag search for Gravito Lite Custom Template Inside the tag configuration UI, paste your GTM token, Which you copied from the configurator UI of the Gravito admin portal. Add your required Triggers and then click on save. This template will now use the configuration that you have created and will add Gravito CMP to your website.","title":"GTM Template"},{"location":"Gravito_Intelligent_CMP/GTM_Template/#gtm-template","text":"Gravito CMP now can be deployed using GTM Template. In order to use this feature, while creating the configuration for Gravito CMP you will have to check the \"Is GTM?\" flag in the basic section of the configuration wizard. If the config is created using the \"is GTM? \" flag then In the list view we can see an additional GTM icon in front of it. By clicking on the icon we can copy the Unique GTM token of the config which can be used in your GTM container. Now go to your Google Tag Manager, and while creating a GTM tag search for Gravito Lite Custom Template Inside the tag configuration UI, paste your GTM token, Which you copied from the configurator UI of the Gravito admin portal. Add your required Triggers and then click on save. This template will now use the configuration that you have created and will add Gravito CMP to your website.","title":"GTM Template"},{"location":"Gravito_Intelligent_CMP/Getting_Started/","text":"Getting Started Gravito Intelligent CMP is a consent management solution that helps to collect consent for data collection, analytics, targeting, personalization and whatever your business needs to fulfil legal or regulatory terms. \ud83d\udca1 NoteHave you registered with Gravito yet? Please find here on how to get registered with Gravito We have the Gravito Intelligent CMP configurator using which you can create the consent banner based on your needs Note: If you are advertiser or publisher, you might benefit from GravitoTCF 2.2 compliant CMP but not every use case is the same so choice is yours. To include light CMP in copy and paste following script in your website. Note Replace gravitoCMPConifg with your config object. window.gravitoCMPConfig = gravitoCMPConfig; // your config object var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag);","title":"Getting Started"},{"location":"Gravito_Intelligent_CMP/Getting_Started/#getting-started","text":"Gravito Intelligent CMP is a consent management solution that helps to collect consent for data collection, analytics, targeting, personalization and whatever your business needs to fulfil legal or regulatory terms. \ud83d\udca1 NoteHave you registered with Gravito yet? Please find here on how to get registered with Gravito We have the Gravito Intelligent CMP configurator using which you can create the consent banner based on your needs Note: If you are advertiser or publisher, you might benefit from GravitoTCF 2.2 compliant CMP but not every use case is the same so choice is yours. To include light CMP in copy and paste following script in your website. Note Replace gravitoCMPConifg with your config object. window.gravitoCMPConfig = gravitoCMPConfig; // your config object var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag);","title":"Getting Started"},{"location":"Gravito_Intelligent_CMP/Release_Notes/","text":"Release Notes Gravito Intelligent CMP release notes. Version 4.0.7 Multiple Language Support: Light CMP now supports multiple languages within the user interface, offering a more inclusive experience for users worldwide. Users can access a language selection dropdown within the CMP UI, allowing them to translate the interface into their preferred language. This feature empowers publishers to provide a localized experience, catering to diverse language preferences and improving accessibility for users globally. Google Consent Mode V2 Integration: Light CMP now integrates Google Consent Mode V2 functionalities, enabling publishers to leverage advanced consent management features offered by Google. This integration enhances the CMP\u2019s capabilities in managing user consent preferences for data collection and processing, especially for advertising purposes. With Google Consent Mode V2 support, publishers can align their consent mechanisms with evolving privacy regulations and user expectations, ensuring more nuanced control over data usage. More about the Google Consent Mode V2 is available here Version 4.0.5 (07/11/2023) New features to our admin portal Gravito CMP now, supports saving configuration in draft status. Customers can revisit their draft configurations and can make changes to it till they decide to publish it. Gravito CMP, provides following deployment options now to make it easy to integrate with your website, customers will get to choose their preferred deployment option and would be guided with the deployment steps. GTM Template WordPress plugin Standard Tag management based deployment Version 4.0.0 New major release SDK v2 compatibility. Feature to capture CMP events such as Accept-All, and Reject-All, and have a report generated on the Admin portal. Prebid.js user Id support with Light CMP. Version 3.0.0 New major release, introducing headless mode and other major improvements. As this version introduces new UI elements and third layer, release 1 and 2 deployments will not automatically upgrade, the jump needs to be performed manually (by loading \u201c_latest_3\u201d scripts). As the logic for look & feel customization changes entirely, some configuration changes will need to be made to migrate from R2 to R3, read more about migration here . Version 2.0.5 First layer supports now \u201cReject all\u201d button, enable it by defining third button label for first layer: actions: [\"Asetukset\",\"Hyv\u00e4ksy kaikki\",\"Est\u00e4 kaikki\"] Version 2.0.4 Max-width of the screen is changed to 100px with small screens. Version 2.0.3 CMP cookie content encoded (allows special characters in names of consent groups). Version 2.0.2 Minor bug and CSS fixes. Version 2.0.1 Support for Gravito SDK (enables e.g. integration with Gravito CDP), naming changes, minor enhancements. Version 1.0.4 Minor bug fixes, cookie setting to support subdomains added. Add following to configuration of CMP: useTopDomain:true Version 1.0.3 CSS fixes, support for RTL. Version 1.0.2 CSS fixes, minor bug fixes Version 1.0.1 Added support for Google Consent Mode (beta), see separate page for more details. Version 1.0.0 Fully responsive, mobile optimized UI Presentation, CMP core logic and configuration are separated to allow maximum customization flexibility and deployment strategies Event-driven, user activity (consents, rejections etc.) emits events that can trigger ad/martech tags, data to analytics etc. Localization through configuration file Standard, tested deployment with tag management systems like Google Tag Manager, Tealium iQ and Ensighten","title":"Release Notes"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#release-notes","text":"Gravito Intelligent CMP release notes. Version 4.0.7 Multiple Language Support: Light CMP now supports multiple languages within the user interface, offering a more inclusive experience for users worldwide. Users can access a language selection dropdown within the CMP UI, allowing them to translate the interface into their preferred language. This feature empowers publishers to provide a localized experience, catering to diverse language preferences and improving accessibility for users globally. Google Consent Mode V2 Integration: Light CMP now integrates Google Consent Mode V2 functionalities, enabling publishers to leverage advanced consent management features offered by Google. This integration enhances the CMP\u2019s capabilities in managing user consent preferences for data collection and processing, especially for advertising purposes. With Google Consent Mode V2 support, publishers can align their consent mechanisms with evolving privacy regulations and user expectations, ensuring more nuanced control over data usage. More about the Google Consent Mode V2 is available here Version 4.0.5 (07/11/2023) New features to our admin portal Gravito CMP now, supports saving configuration in draft status. Customers can revisit their draft configurations and can make changes to it till they decide to publish it. Gravito CMP, provides following deployment options now to make it easy to integrate with your website, customers will get to choose their preferred deployment option and would be guided with the deployment steps. GTM Template WordPress plugin Standard Tag management based deployment Version 4.0.0 New major release SDK v2 compatibility. Feature to capture CMP events such as Accept-All, and Reject-All, and have a report generated on the Admin portal. Prebid.js user Id support with Light CMP. Version 3.0.0 New major release, introducing headless mode and other major improvements. As this version introduces new UI elements and third layer, release 1 and 2 deployments will not automatically upgrade, the jump needs to be performed manually (by loading \u201c_latest_3\u201d scripts). As the logic for look & feel customization changes entirely, some configuration changes will need to be made to migrate from R2 to R3, read more about migration here . Version 2.0.5 First layer supports now \u201cReject all\u201d button, enable it by defining third button label for first layer: actions: [\"Asetukset\",\"Hyv\u00e4ksy kaikki\",\"Est\u00e4 kaikki\"] Version 2.0.4 Max-width of the screen is changed to 100px with small screens. Version 2.0.3 CMP cookie content encoded (allows special characters in names of consent groups). Version 2.0.2 Minor bug and CSS fixes. Version 2.0.1 Support for Gravito SDK (enables e.g. integration with Gravito CDP), naming changes, minor enhancements. Version 1.0.4 Minor bug fixes, cookie setting to support subdomains added. Add following to configuration of CMP: useTopDomain:true Version 1.0.3 CSS fixes, support for RTL. Version 1.0.2 CSS fixes, minor bug fixes Version 1.0.1 Added support for Google Consent Mode (beta), see separate page for more details. Version 1.0.0 Fully responsive, mobile optimized UI Presentation, CMP core logic and configuration are separated to allow maximum customization flexibility and deployment strategies Event-driven, user activity (consents, rejections etc.) emits events that can trigger ad/martech tags, data to analytics etc. Localization through configuration file Standard, tested deployment with tag management systems like Google Tag Manager, Tealium iQ and Ensighten","title":"Release Notes"},{"location":"Gravito_Intelligent_CMP/Setup_and_Design/","text":"Gravito Intelligent CMP Setup can be done using Gravito CMP Configurator on Gravito\u2019s Admin Portal. Go to CMP>>Gravito CMP configurator. You can choose the language of your choice when creating your own CMP Config Do you want to try out how our configuration is? You can check it out here Try out now","title":"Setup and Design"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/","text":"Headless CMP In the headless version of Gravito Intelligent CMP you can render the first layer and second layer of CMP into to your own container elements that are present on your website. It provides a way to use your own CSS (and design system) to style the elements on CMP modals. Using your own elements for CMP instead of default modals To render the first-layer and second-layer of Gravito Intelligent CMP into your own container elements you need to add following fields inside core section of your CMP config gravitoCMPconfig={ core:{ // ... other properties ... firstLayerId: \"cmpfirstlayer\", // elementID for CMP 1st layer secondLayerId: \"cmpsecondlayer\", // elementID for CMP 2nd layer thirdLayerId: \"cmpthirdlayer\", // elementID for CMP 3rd layer } } NOTE: If CMP do not find these elements in DOM i.e document.getElementById(id)===undefined, then CMP will use it's own container instead and append those inside the body of html. Keep these fields undefined if you want to use CMP default modals. Using your own CSS to style the elements With this headless version you can use customize the UI of CMP by providing your own CSS for the given class of CMP element. To configure CMP to use custom CSS file you change \"useCustomCss:true\" inside style section of your config. gravitoCMPconfig={ style:{ ///other properties useCustomCss: true,// false to use gravito's Default CSS } } NOTE: You should ensure that your custom css file is loaded in DOM before loading CMP. Make sure your CSS file has all classes specified in CMP CSS file. You can see the sample CSS file here . Examples Customizing CMP UI using \"useCustomCss\" option and Gravito's CSS file For Example let's assume that you need to change the color of \"Accept All\" button on first layer of CMP. By default it is orange. Before: Step 1 : Copy the custom CSS file provided by gravito into your css file, you can find the file here . Step 2 : find the CSS class name \".gravitoLightCMP-layer1-actions-accept-all\". It will look like this .gravitoLightCMP-layer1-actions-accept-all { outline: none; margin: 10px; font-size: 18px; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; color: #fff; box-sizing: border-box; display: block; border-radius: 22px; border: none; cursor: pointer; height: 40px; width: auto; padding: 0px 12px; margin: 0px 5px; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); font-family: \"gravitoFont\"; background-color: #ffa500; font-size: 10pt; } Step 3: Change the background color property value to the color you want to use,here I will make it \"purple\". Now the class should look like this .gravitoLightCMP-layer1-actions-accept-all { outline: none; margin: 10px; font-size: 18px; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; color: #fff; box-sizing: border-box; display: block; border-radius: 22px; border: none; cursor: pointer; height: 40px; width: auto; padding: 0px 12px; margin: 0px 5px; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); font-family: \"gravitoFont\"; background-color: purple; font-size: 10pt; } Step 4 : Now Add this file to your website. Make sure to place it above the CMP's deployment scripts as the style should be loaded inside the DOM before loading CMP. After:","title":"Headless CMP"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/#headless-cmp","text":"In the headless version of Gravito Intelligent CMP you can render the first layer and second layer of CMP into to your own container elements that are present on your website. It provides a way to use your own CSS (and design system) to style the elements on CMP modals.","title":"Headless CMP"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/#using-your-own-elements-for-cmp-instead-of-default-modals","text":"To render the first-layer and second-layer of Gravito Intelligent CMP into your own container elements you need to add following fields inside core section of your CMP config gravitoCMPconfig={ core:{ // ... other properties ... firstLayerId: \"cmpfirstlayer\", // elementID for CMP 1st layer secondLayerId: \"cmpsecondlayer\", // elementID for CMP 2nd layer thirdLayerId: \"cmpthirdlayer\", // elementID for CMP 3rd layer } } NOTE: If CMP do not find these elements in DOM i.e document.getElementById(id)===undefined, then CMP will use it's own container instead and append those inside the body of html. Keep these fields undefined if you want to use CMP default modals.","title":"Using your own elements for CMP instead of default modals"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/#using-your-own-css-to-style-the-elements","text":"With this headless version you can use customize the UI of CMP by providing your own CSS for the given class of CMP element. To configure CMP to use custom CSS file you change \"useCustomCss:true\" inside style section of your config. gravitoCMPconfig={ style:{ ///other properties useCustomCss: true,// false to use gravito's Default CSS } } NOTE: You should ensure that your custom css file is loaded in DOM before loading CMP. Make sure your CSS file has all classes specified in CMP CSS file. You can see the sample CSS file here .","title":"Using your own CSS to style the elements"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/#examples","text":"","title":"Examples"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/#customizing-cmp-ui-using-usecustomcss-option-and-gravitos-css-file","text":"For Example let's assume that you need to change the color of \"Accept All\" button on first layer of CMP. By default it is orange. Before: Step 1 : Copy the custom CSS file provided by gravito into your css file, you can find the file here . Step 2 : find the CSS class name \".gravitoLightCMP-layer1-actions-accept-all\". It will look like this .gravitoLightCMP-layer1-actions-accept-all { outline: none; margin: 10px; font-size: 18px; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; color: #fff; box-sizing: border-box; display: block; border-radius: 22px; border: none; cursor: pointer; height: 40px; width: auto; padding: 0px 12px; margin: 0px 5px; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); font-family: \"gravitoFont\"; background-color: #ffa500; font-size: 10pt; } Step 3: Change the background color property value to the color you want to use,here I will make it \"purple\". Now the class should look like this .gravitoLightCMP-layer1-actions-accept-all { outline: none; margin: 10px; font-size: 18px; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; color: #fff; box-sizing: border-box; display: block; border-radius: 22px; border: none; cursor: pointer; height: 40px; width: auto; padding: 0px 12px; margin: 0px 5px; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); font-family: \"gravitoFont\"; background-color: purple; font-size: 10pt; } Step 4 : Now Add this file to your website. Make sure to place it above the CMP's deployment scripts as the style should be loaded inside the DOM before loading CMP. After:","title":"Customizing CMP UI using \"useCustomCss\" option and Gravito's CSS file"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/","text":"Version 4 (Latest) How it works? Configuration Light CMP can be configure and customize as per your need with the help of configuration object.You can generate this configuration object using our Admin Portal or you can create your own from scratch. Following is the example of config object for light CMP. var gravitoCMPConfig={ \"settings\": { \"type\": \"Light\", \"useGCM\": false, \"useGravitoBackend\": false, \"backendUrl\": \"\", \"catchCMPEvents\": true, \"sdkVersion\": 2, \"gtmTags\": [] }, \"core\": { \"cookieName\": \"GCString\", \"languageCode\": \"en\", \"cookieExpiry\": 365, \"settingBtnId\": \"manageSettings\", \"firstLayerId\": \"\", \"secondLayerId\": \"\", \"cookieReportLayerId\": \"\", \"syncEvents\": [ \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"layer2:opt-in:selected\", \"layer2:opt-out:all\", \"layer1:opt-out:all\" ], \"syncAfter\": 1800, \"useTopDomain\": false, \"adsConsentId\": 4, \"analyticsConsentId\": 3, \"version\": 1, \"consents\": [ { \"type\": \"consent\", \"id\": 1, \"name\": \"Essential cookies\", \"description\": \"Essential cookies and similar technologies are implementing the basic functions of the website such as page navigation, use of forms and shopping cart functionality. Without these technologies the website will not work properly.\", \"isConsentable\": false }, { \"type\": \"consent\", \"id\": 2, \"name\": \"Functional cookies\", \"description\": \"Functional cookies and similar technologies make it possible to save information that changes the way the website appears to you or functions, e.g. your preferred language.\", \"isConsentable\": true }, { \"type\": \"consent\", \"id\": 3, \"name\": \"Statistical cookies\", \"description\": \"Statistical cookies and similar technologies allow us to collect information about how our website is used. This information helps us to improve the content and usability of the website.\", \"isConsentable\": true }, { \"type\": \"consent\", \"id\": 4, \"name\": \"Marketing & advertising cookies\", \"description\": \"Marketing cookies and similar technologies are used to track visitors across websites. The intention is to display ads that are relevant and interesting to you and thus more valuable for us and third-party advertisers.\", \"isConsentable\": true } ] }, \"text\": { \"firstLayer\": { \"title\": \"We need your consent to provide personalized experience\", \"introductionText\": \"We and our third-party vendors are collecting personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", \"legalFooter\": \"By accepting, you are allowing data processing within the service, rejection can affect the user experience.\", \"privacyPolicyUrl\": \"https://site.url.invalid/privacy-policy\", \"privacyLabel\": \"Privacy Policy\", \"checkBoxLabels\": { \"consent\": \"Consent\" }, \"actions\": [\"Accept all\", \"Settings\", \"Reject all\"] }, \"secondLayer\": { \"title\": \"Gravito Settings\", \"introductionText\": \"Please select from the following list of purposes to help us serve you better.\", \"privacyPolicyUrl\": \"https://site.url.invalid/privacy-policy\", \"privacyLabel\": \"Privacy Policy\", \"checkBoxLabels\": { \"consent\": \"Consent\" }, \"actions\": [\"Accept all\", \"Accept selected\", \"Reject all\"] }, \"confirmationLayer\": { \"confirmationForUncheck\": { \"heading\": \"Are you sure you want to disable?\", \"paragraphs\": [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\" ] }, \"confirmationForAcceptSelected\": { \"heading\": \"Are you sure you want to disable?\", \"paragraphs\": [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\" ] }, \"actions\": [\"Cancel\", \"Yes\"] }, \"cookieReportLayer\": { \"buttonTitle\": \"Cookie Report\", \"heading\": \"Cookie Reports layer header\", \"introductionText\": \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", \"beforeAcceptHeader\": \"Before Accepting\", \"afterAcceptHeader\": \"After Accepting\", \"nameHeader\": \"Name\", \"domainHeader\": \"Domain\", \"descriptionHeader\": \"Description\", \"cookieTypeHeader\": \"Cookie Type\", \"expiryHeader\": \"Expiry in days\", \"httpOnlyHeader\": \"Http Only\", \"noCookieDataMessage\": \"No scan results available\", \"noCookieDataBeforeAcceptingMsg\": \"No cookies were found before Accepting the consents on this domain.\", \"noCookieDataAfterAcceptingMsg\": \"No cookies were found after Accepting the consents on this domain \" } }, \"style\": { \"customCSS\": \"\", \"logoUrl\": \"https://cdn.gravito.net/logos/gravito_logo.jpg\", \"logoSvg\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"105\\\" height=\\\"18\\\" viewBox=\\\"0 0 105 18\\\"><path fill=\\\"#1C4598\\\" fill-rule=\\\"evenodd\\\" d=\\\"M88.922 10.934h6.569l-3.285-6.331-3.284 6.331zm9.95 6.844l-1.563-3.046H87.086l-1.545 3.045h-5.837L89.07.29h6.568L105 17.778h-6.128zM73.445.291h5.284v17.487h-5.284V.291zm-9.152 0h6.974l-9.413 8.18 10.617 9.307h-7.463l-9.64-9.12L64.293.291zM50.085 17.778h5.283V.291h-5.283v17.487zm-9.04-4.209c1.156 0 1.563-.069 1.84-.325.258-.24.372-.548.372-1.576V6.332c0-1.028-.114-1.334-.372-1.574-.277-.258-.684-.326-1.84-.326h-8.208c-1.155 0-1.561.068-1.837.326-.26.24-.374.546-.374 1.574v5.336c0 1.028.114 1.337.374 1.576.276.256.682.325 1.837.325h8.209zm6.976-1.198c0 2.43-.423 3.269-1.123 4.072C45.826 17.64 44.265 18 41.258 18h-8.632c-3.007 0-4.57-.36-5.641-1.557-.7-.803-1.122-1.641-1.122-4.072V5.629c0-2.43.423-3.266 1.122-4.071C28.057.36 29.619 0 32.626 0h8.633c3.006 0 4.567.36 5.64 1.558.699.805 1.122 1.642 1.122 4.071v6.742zM5.056 17.778H0V.291h8.744l10.031 13.055V.291h5.056v17.487h-8.567L5.056 4.5v13.278z\\\"/></svg>\", \"logoType\": \"img\", \"primaryColor\": \"orange\", \"secondaryColor\": \"grey\", \"disableConfirmationModal\": false, \"fonts\": [ { \"url\": \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", \"unicodeRange\": \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\" }, { \"url\": \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", \"unicodeRange\": \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\" } ] } }, Deployment Light CMP's can be deployed with the help of SDK V2. Add your config object to window.gravitoCMPConifg variable. window.gravitoCMPConfig = gravitoCMPConfig; Standalone Light CMP. To add Standalone light CMP add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag); Light CMP with backend. To add Light CMP with backend add following values to settings section of your config object window.gravitoCMPConfig = { settings: { type: \"Light\", useGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_4\", sdkVersion: 2, }, //other sections }; And add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\", \"firstParty\"); }; document.body.appendChild(gravitoSDKTag); Using GCM mode. GCM support can be added to both standalone CMP and CMP with backend by adding useGCM property to settings section. window.gravitoCMPConfig = { settings: { type: \"Light\", useGCM: true, // add this to enable GCMuseGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_2\", sdkVersion: 2, }, //other sections }; Sample Scripts Light CMP in Modal View. By using customCSS property you can render CMP in modal view. Following script demonstrates this type of customization. var customCss = \"gravitoLightCMP-layer1-logo{ margin: 0 25px 0 0 !important; width: 80px !important; }.gravitoLightCMP-layer1-modal,.gravitoLightCMP-layer2-modal {width: 75%;top: 50%;left: 50%;-ms-transform: translate(-50%, -50%);transform: translate(-50%, -50%);bottom: unset;}\"; window.gravitoCMPConfig = { settings: { type: \"Light\", useGCM: false, useGravitoBackend: false, backendUrl: \"\", catchCMPEvents: true, sdkVersion: 2, userIdModule: false, gtmTags: [], version: \"bundle_latest_4\", }, core: { cookieName: \"GCString\", languageCode: \"en\", cookieExpiry: 365, settingBtnId: \"manageSettings\", firstLayerId: \"\", secondLayerId: \"\", cookieReportLayerId: \"\", syncEvents: [ \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"layer2:opt-in:selected\", \"layer2:opt-out:all\", \"layer1:opt-out:all\", ], syncAfter: 1800, useTopDomain: false, adsConsentId: 4, analyticsConsentId: 3, version: 1, consents: [ { type: \"consent\", id: 1, name: \"Essential cookies\", description: \"Essential cookies and similar technologies are implementing the basic functions of the website such as page navigation, use of forms and shopping cart functionality. Without these technologies the website will not work properly.\", isConsentable: false, }, { type: \"consent\", id: 2, name: \"Functional cookies\", description: \"Functional cookies and similar technologies make it possible to save information that changes the way the website appears to you or functions, e.g. your preferred language.\", isConsentable: true, }, { type: \"consent\", id: 3, name: \"Statistical cookies\", description: \"Statistical cookies and similar technologies allow us to collect information about how our website is used. This information helps us to improve the content and usability of the website.\", isConsentable: true, }, { type: \"consent\", id: 4, name: \"Marketing & advertising cookies\", description: \"Marketing cookies and similar technologies are used to track visitors across websites. The intention is to display ads that are relevant and interesting to you and thus more valuable for us and third-party advertisers.\", isConsentable: true, }, ], }, text: { firstLayer: { title: \"We need your consent to provide personalized experience\", introductionText: \"We and our third-party vendors are collecting personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", legalFooter: \"By accepting, you are allowing data processing within the service, rejection can affect the user experience.\", privacyPolicyUrl: \"https://site.url.invalid/privacy-policy\", privacyLabel: \"Privacy Policy\", checkBoxLabels: { consent: \"Consent\", }, actions: [\"Accept all\", \"Settings\", \"Reject all\"], }, secondLayer: { title: \"Gravito Settings\", introductionText: \"Please select from the following list of purposes to help us serve you better.\", privacyPolicyUrl: \"https://site.url.invalid/privacy-policy\", privacyLabel: \"Privacy Policy\", checkBoxLabels: { consent: \"Consent\", }, actions: [\"Accept all\", \"Accept selected\", \"Reject all\"], }, confirmationLayer: { confirmationForUncheck: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\", ], }, confirmationForAcceptSelected: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\", ], }, actions: [\"Cancel\", \"Yes\"], }, cookieReportLayer: { buttonTitle: \"Cookie Report\", heading: \"Cookie Reports layer header\", introductionText: \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", beforeAcceptHeader: \"Before Accepting\", afterAcceptHeader: \"After Accepting\", nameHeader: \"Name\", domainHeader: \"Domain\", descriptionHeader: \"Description\", cookieTypeHeader: \"Cookie Type\", expiryHeader: \"Expiry in days\", httpOnlyHeader: \"Http Only\", noCookieDataMessage: \"No scan results available\", noCookieDataBeforeAcceptingMsg: \"No cookies were found before Accepting the consents on this domain.\", noCookieDataAfterAcceptingMsg: \"No cookies were found after Accepting the consents on this domain \", }, }, style: { customCSS: customCss, logoUrl: \"https://cdn.gravito.net/logos/gravito_logo.jpg\", logoSvg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"105\" height=\"18\" viewBox=\"0 0 105 18\"><path fill=\"#1C4598\" fill-rule=\"evenodd\" d=\"M88.922 10.934h6.569l-3.285-6.331-3.284 6.331zm9.95 6.844l-1.563-3.046H87.086l-1.545 3.045h-5.837L89.07.29h6.568L105 17.778h-6.128zM73.445.291h5.284v17.487h-5.284V.291zm-9.152 0h6.974l-9.413 8.18 10.617 9.307h-7.463l-9.64-9.12L64.293.291zM50.085 17.778h5.283V.291h-5.283v17.487zm-9.04-4.209c1.156 0 1.563-.069 1.84-.325.258-.24.372-.548.372-1.576V6.332c0-1.028-.114-1.334-.372-1.574-.277-.258-.684-.326-1.84-.326h-8.208c-1.155 0-1.561.068-1.837.326-.26.24-.374.546-.374 1.574v5.336c0 1.028.114 1.337.374 1.576.276.256.682.325 1.837.325h8.209zm6.976-1.198c0 2.43-.423 3.269-1.123 4.072C45.826 17.64 44.265 18 41.258 18h-8.632c-3.007 0-4.57-.36-5.641-1.557-.7-.803-1.122-1.641-1.122-4.072V5.629c0-2.43.423-3.266 1.122-4.071C28.057.36 29.619 0 32.626 0h8.633c3.006 0 4.567.36 5.64 1.558.699.805 1.122 1.642 1.122 4.071v6.742zM5.056 17.778H0V.291h8.744l10.031 13.055V.291h5.056v17.487h-8.567L5.056 4.5v13.278z\"/></svg>', logoType: \"img\", primaryColor: \"orange\", secondaryColor: \"grey\", disableConfirmationModal: false, fonts: [ { url: \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag); Migrating to lightCMP Version 4 Add settings section your config Object with following properties. var gravitoCMPConfig = { settings: { type: \"Light\", useGCM: false, // Set this flag to true if you want to use Google Consent Mode with light CMP useGravitoBackend: false, // Set this flag to true if you want to use gravito backend with Light CMP backendUrl: \"\", // This will be the URL of your gravito firstparty domain for backend support EX: https://gto.yourdomain.net. if left empty it will be evaluated from your hosted domain. version: \"bundle_latest_4\", // This will be the version of your lightCMP. bundle_latest_4 is recommended sdkVersion: 2, // Don;t change this value , catchCMPEvents: false, // Set this value to true if you want to capture CMP events and generate report on https://admin.gravito.net dashborad. }, // other properties }; CSS structure in Version 4 is different from that of Version 2 so if you are comming from version 2 you will have to redo the css customization for v4 and update you customCSS property in style section of your config object. Light CMP Version 4 should be deployed with gravito SDK version 2.Change your deployment script as follows. window.gravitoCMPConfig = gravitoCMPConfig; // Replace this with your config object;var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); // For Standalone Light CMP // window.gravito.init(\"lightCMP\",firstParty); // For Light CMP with backend }; document.body.appendChild(gravitoSDKTag); Version 4 now has feature to resurface CMP to users if their is version upgrade in config. To enable this you will have to add resurfaceOnMissingVersion: true to the core section of your config. Test your implementation of Light CMP Version 4 thoroughly to ensure that all features are working as expected and that there are no issues with the updated CSS structure or GCM/backend integration. Once you have confirmed that everything is working as expected, you can proceed with deploying Light CMP Version 4 on your production website. Note Please note that this is a general guide and your specific implementation may require additional steps. It is always recommended to test your implementation thoroughly before deploying it to production. If you have any questions or issues during the migration process, please reach out to Gravito support for assistance.","title":"Version 4 (Latest)"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#version-4-latest","text":"","title":"Version 4 (Latest)"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#how-it-works","text":"","title":"How it works?"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#configuration","text":"Light CMP can be configure and customize as per your need with the help of configuration object.You can generate this configuration object using our Admin Portal or you can create your own from scratch. Following is the example of config object for light CMP. var gravitoCMPConfig={ \"settings\": { \"type\": \"Light\", \"useGCM\": false, \"useGravitoBackend\": false, \"backendUrl\": \"\", \"catchCMPEvents\": true, \"sdkVersion\": 2, \"gtmTags\": [] }, \"core\": { \"cookieName\": \"GCString\", \"languageCode\": \"en\", \"cookieExpiry\": 365, \"settingBtnId\": \"manageSettings\", \"firstLayerId\": \"\", \"secondLayerId\": \"\", \"cookieReportLayerId\": \"\", \"syncEvents\": [ \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"layer2:opt-in:selected\", \"layer2:opt-out:all\", \"layer1:opt-out:all\" ], \"syncAfter\": 1800, \"useTopDomain\": false, \"adsConsentId\": 4, \"analyticsConsentId\": 3, \"version\": 1, \"consents\": [ { \"type\": \"consent\", \"id\": 1, \"name\": \"Essential cookies\", \"description\": \"Essential cookies and similar technologies are implementing the basic functions of the website such as page navigation, use of forms and shopping cart functionality. Without these technologies the website will not work properly.\", \"isConsentable\": false }, { \"type\": \"consent\", \"id\": 2, \"name\": \"Functional cookies\", \"description\": \"Functional cookies and similar technologies make it possible to save information that changes the way the website appears to you or functions, e.g. your preferred language.\", \"isConsentable\": true }, { \"type\": \"consent\", \"id\": 3, \"name\": \"Statistical cookies\", \"description\": \"Statistical cookies and similar technologies allow us to collect information about how our website is used. This information helps us to improve the content and usability of the website.\", \"isConsentable\": true }, { \"type\": \"consent\", \"id\": 4, \"name\": \"Marketing & advertising cookies\", \"description\": \"Marketing cookies and similar technologies are used to track visitors across websites. The intention is to display ads that are relevant and interesting to you and thus more valuable for us and third-party advertisers.\", \"isConsentable\": true } ] }, \"text\": { \"firstLayer\": { \"title\": \"We need your consent to provide personalized experience\", \"introductionText\": \"We and our third-party vendors are collecting personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", \"legalFooter\": \"By accepting, you are allowing data processing within the service, rejection can affect the user experience.\", \"privacyPolicyUrl\": \"https://site.url.invalid/privacy-policy\", \"privacyLabel\": \"Privacy Policy\", \"checkBoxLabels\": { \"consent\": \"Consent\" }, \"actions\": [\"Accept all\", \"Settings\", \"Reject all\"] }, \"secondLayer\": { \"title\": \"Gravito Settings\", \"introductionText\": \"Please select from the following list of purposes to help us serve you better.\", \"privacyPolicyUrl\": \"https://site.url.invalid/privacy-policy\", \"privacyLabel\": \"Privacy Policy\", \"checkBoxLabels\": { \"consent\": \"Consent\" }, \"actions\": [\"Accept all\", \"Accept selected\", \"Reject all\"] }, \"confirmationLayer\": { \"confirmationForUncheck\": { \"heading\": \"Are you sure you want to disable?\", \"paragraphs\": [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\" ] }, \"confirmationForAcceptSelected\": { \"heading\": \"Are you sure you want to disable?\", \"paragraphs\": [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\" ] }, \"actions\": [\"Cancel\", \"Yes\"] }, \"cookieReportLayer\": { \"buttonTitle\": \"Cookie Report\", \"heading\": \"Cookie Reports layer header\", \"introductionText\": \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", \"beforeAcceptHeader\": \"Before Accepting\", \"afterAcceptHeader\": \"After Accepting\", \"nameHeader\": \"Name\", \"domainHeader\": \"Domain\", \"descriptionHeader\": \"Description\", \"cookieTypeHeader\": \"Cookie Type\", \"expiryHeader\": \"Expiry in days\", \"httpOnlyHeader\": \"Http Only\", \"noCookieDataMessage\": \"No scan results available\", \"noCookieDataBeforeAcceptingMsg\": \"No cookies were found before Accepting the consents on this domain.\", \"noCookieDataAfterAcceptingMsg\": \"No cookies were found after Accepting the consents on this domain \" } }, \"style\": { \"customCSS\": \"\", \"logoUrl\": \"https://cdn.gravito.net/logos/gravito_logo.jpg\", \"logoSvg\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"105\\\" height=\\\"18\\\" viewBox=\\\"0 0 105 18\\\"><path fill=\\\"#1C4598\\\" fill-rule=\\\"evenodd\\\" d=\\\"M88.922 10.934h6.569l-3.285-6.331-3.284 6.331zm9.95 6.844l-1.563-3.046H87.086l-1.545 3.045h-5.837L89.07.29h6.568L105 17.778h-6.128zM73.445.291h5.284v17.487h-5.284V.291zm-9.152 0h6.974l-9.413 8.18 10.617 9.307h-7.463l-9.64-9.12L64.293.291zM50.085 17.778h5.283V.291h-5.283v17.487zm-9.04-4.209c1.156 0 1.563-.069 1.84-.325.258-.24.372-.548.372-1.576V6.332c0-1.028-.114-1.334-.372-1.574-.277-.258-.684-.326-1.84-.326h-8.208c-1.155 0-1.561.068-1.837.326-.26.24-.374.546-.374 1.574v5.336c0 1.028.114 1.337.374 1.576.276.256.682.325 1.837.325h8.209zm6.976-1.198c0 2.43-.423 3.269-1.123 4.072C45.826 17.64 44.265 18 41.258 18h-8.632c-3.007 0-4.57-.36-5.641-1.557-.7-.803-1.122-1.641-1.122-4.072V5.629c0-2.43.423-3.266 1.122-4.071C28.057.36 29.619 0 32.626 0h8.633c3.006 0 4.567.36 5.64 1.558.699.805 1.122 1.642 1.122 4.071v6.742zM5.056 17.778H0V.291h8.744l10.031 13.055V.291h5.056v17.487h-8.567L5.056 4.5v13.278z\\\"/></svg>\", \"logoType\": \"img\", \"primaryColor\": \"orange\", \"secondaryColor\": \"grey\", \"disableConfirmationModal\": false, \"fonts\": [ { \"url\": \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", \"unicodeRange\": \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\" }, { \"url\": \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", \"unicodeRange\": \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\" } ] } },","title":"Configuration"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#deployment","text":"Light CMP's can be deployed with the help of SDK V2. Add your config object to window.gravitoCMPConifg variable. window.gravitoCMPConfig = gravitoCMPConfig;","title":"Deployment"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#standalone-light-cmp","text":"To add Standalone light CMP add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag);","title":"Standalone Light CMP."},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#light-cmp-with-backend","text":"To add Light CMP with backend add following values to settings section of your config object window.gravitoCMPConfig = { settings: { type: \"Light\", useGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_4\", sdkVersion: 2, }, //other sections }; And add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\", \"firstParty\"); }; document.body.appendChild(gravitoSDKTag);","title":"Light CMP with backend."},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#using-gcm-mode","text":"GCM support can be added to both standalone CMP and CMP with backend by adding useGCM property to settings section. window.gravitoCMPConfig = { settings: { type: \"Light\", useGCM: true, // add this to enable GCMuseGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_2\", sdkVersion: 2, }, //other sections };","title":"Using GCM mode."},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#sample-scripts","text":"","title":"Sample Scripts"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#light-cmp-in-modal-view","text":"By using customCSS property you can render CMP in modal view. Following script demonstrates this type of customization. var customCss = \"gravitoLightCMP-layer1-logo{ margin: 0 25px 0 0 !important; width: 80px !important; }.gravitoLightCMP-layer1-modal,.gravitoLightCMP-layer2-modal {width: 75%;top: 50%;left: 50%;-ms-transform: translate(-50%, -50%);transform: translate(-50%, -50%);bottom: unset;}\"; window.gravitoCMPConfig = { settings: { type: \"Light\", useGCM: false, useGravitoBackend: false, backendUrl: \"\", catchCMPEvents: true, sdkVersion: 2, userIdModule: false, gtmTags: [], version: \"bundle_latest_4\", }, core: { cookieName: \"GCString\", languageCode: \"en\", cookieExpiry: 365, settingBtnId: \"manageSettings\", firstLayerId: \"\", secondLayerId: \"\", cookieReportLayerId: \"\", syncEvents: [ \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"layer2:opt-in:selected\", \"layer2:opt-out:all\", \"layer1:opt-out:all\", ], syncAfter: 1800, useTopDomain: false, adsConsentId: 4, analyticsConsentId: 3, version: 1, consents: [ { type: \"consent\", id: 1, name: \"Essential cookies\", description: \"Essential cookies and similar technologies are implementing the basic functions of the website such as page navigation, use of forms and shopping cart functionality. Without these technologies the website will not work properly.\", isConsentable: false, }, { type: \"consent\", id: 2, name: \"Functional cookies\", description: \"Functional cookies and similar technologies make it possible to save information that changes the way the website appears to you or functions, e.g. your preferred language.\", isConsentable: true, }, { type: \"consent\", id: 3, name: \"Statistical cookies\", description: \"Statistical cookies and similar technologies allow us to collect information about how our website is used. This information helps us to improve the content and usability of the website.\", isConsentable: true, }, { type: \"consent\", id: 4, name: \"Marketing & advertising cookies\", description: \"Marketing cookies and similar technologies are used to track visitors across websites. The intention is to display ads that are relevant and interesting to you and thus more valuable for us and third-party advertisers.\", isConsentable: true, }, ], }, text: { firstLayer: { title: \"We need your consent to provide personalized experience\", introductionText: \"We and our third-party vendors are collecting personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", legalFooter: \"By accepting, you are allowing data processing within the service, rejection can affect the user experience.\", privacyPolicyUrl: \"https://site.url.invalid/privacy-policy\", privacyLabel: \"Privacy Policy\", checkBoxLabels: { consent: \"Consent\", }, actions: [\"Accept all\", \"Settings\", \"Reject all\"], }, secondLayer: { title: \"Gravito Settings\", introductionText: \"Please select from the following list of purposes to help us serve you better.\", privacyPolicyUrl: \"https://site.url.invalid/privacy-policy\", privacyLabel: \"Privacy Policy\", checkBoxLabels: { consent: \"Consent\", }, actions: [\"Accept all\", \"Accept selected\", \"Reject all\"], }, confirmationLayer: { confirmationForUncheck: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\", ], }, confirmationForAcceptSelected: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\", ], }, actions: [\"Cancel\", \"Yes\"], }, cookieReportLayer: { buttonTitle: \"Cookie Report\", heading: \"Cookie Reports layer header\", introductionText: \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", beforeAcceptHeader: \"Before Accepting\", afterAcceptHeader: \"After Accepting\", nameHeader: \"Name\", domainHeader: \"Domain\", descriptionHeader: \"Description\", cookieTypeHeader: \"Cookie Type\", expiryHeader: \"Expiry in days\", httpOnlyHeader: \"Http Only\", noCookieDataMessage: \"No scan results available\", noCookieDataBeforeAcceptingMsg: \"No cookies were found before Accepting the consents on this domain.\", noCookieDataAfterAcceptingMsg: \"No cookies were found after Accepting the consents on this domain \", }, }, style: { customCSS: customCss, logoUrl: \"https://cdn.gravito.net/logos/gravito_logo.jpg\", logoSvg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"105\" height=\"18\" viewBox=\"0 0 105 18\"><path fill=\"#1C4598\" fill-rule=\"evenodd\" d=\"M88.922 10.934h6.569l-3.285-6.331-3.284 6.331zm9.95 6.844l-1.563-3.046H87.086l-1.545 3.045h-5.837L89.07.29h6.568L105 17.778h-6.128zM73.445.291h5.284v17.487h-5.284V.291zm-9.152 0h6.974l-9.413 8.18 10.617 9.307h-7.463l-9.64-9.12L64.293.291zM50.085 17.778h5.283V.291h-5.283v17.487zm-9.04-4.209c1.156 0 1.563-.069 1.84-.325.258-.24.372-.548.372-1.576V6.332c0-1.028-.114-1.334-.372-1.574-.277-.258-.684-.326-1.84-.326h-8.208c-1.155 0-1.561.068-1.837.326-.26.24-.374.546-.374 1.574v5.336c0 1.028.114 1.337.374 1.576.276.256.682.325 1.837.325h8.209zm6.976-1.198c0 2.43-.423 3.269-1.123 4.072C45.826 17.64 44.265 18 41.258 18h-8.632c-3.007 0-4.57-.36-5.641-1.557-.7-.803-1.122-1.641-1.122-4.072V5.629c0-2.43.423-3.266 1.122-4.071C28.057.36 29.619 0 32.626 0h8.633c3.006 0 4.567.36 5.64 1.558.699.805 1.122 1.642 1.122 4.071v6.742zM5.056 17.778H0V.291h8.744l10.031 13.055V.291h5.056v17.487h-8.567L5.056 4.5v13.278z\"/></svg>', logoType: \"img\", primaryColor: \"orange\", secondaryColor: \"grey\", disableConfirmationModal: false, fonts: [ { url: \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag);","title":"Light CMP in Modal View."},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#migrating-to-lightcmp-version-4","text":"Add settings section your config Object with following properties. var gravitoCMPConfig = { settings: { type: \"Light\", useGCM: false, // Set this flag to true if you want to use Google Consent Mode with light CMP useGravitoBackend: false, // Set this flag to true if you want to use gravito backend with Light CMP backendUrl: \"\", // This will be the URL of your gravito firstparty domain for backend support EX: https://gto.yourdomain.net. if left empty it will be evaluated from your hosted domain. version: \"bundle_latest_4\", // This will be the version of your lightCMP. bundle_latest_4 is recommended sdkVersion: 2, // Don;t change this value , catchCMPEvents: false, // Set this value to true if you want to capture CMP events and generate report on https://admin.gravito.net dashborad. }, // other properties }; CSS structure in Version 4 is different from that of Version 2 so if you are comming from version 2 you will have to redo the css customization for v4 and update you customCSS property in style section of your config object. Light CMP Version 4 should be deployed with gravito SDK version 2.Change your deployment script as follows. window.gravitoCMPConfig = gravitoCMPConfig; // Replace this with your config object;var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); // For Standalone Light CMP // window.gravito.init(\"lightCMP\",firstParty); // For Light CMP with backend }; document.body.appendChild(gravitoSDKTag); Version 4 now has feature to resurface CMP to users if their is version upgrade in config. To enable this you will have to add resurfaceOnMissingVersion: true to the core section of your config. Test your implementation of Light CMP Version 4 thoroughly to ensure that all features are working as expected and that there are no issues with the updated CSS structure or GCM/backend integration. Once you have confirmed that everything is working as expected, you can proceed with deploying Light CMP Version 4 on your production website. Note Please note that this is a general guide and your specific implementation may require additional steps. It is always recommended to test your implementation thoroughly before deploying it to production. If you have any questions or issues during the migration process, please reach out to Gravito support for assistance.","title":"Migrating to lightCMP Version 4"},{"location":"Gravito_Intelligent_CMP/advanced/Light_Cmp_Config_Options/","text":"Config example You can check out a Gravito Intelligent CMP configuration example here Following variables are good within \"gravitoCMPConfig\" variable. Variable Description Release style.customCSS Enter your custom CSS definitions, all on one line. Sounds weird but that is what IE requires. 1.0.0 core.cookieName Cookie name the CMP settings are stored to 1.0.0 core.cookieExpiry Cookie lifetime in days 1.0.0 core.settingBtnId Element ID the CMP resurfacing click is bound to 1.0.0 core.version Configuration version, increasing version causes the CMP to resurface and request consents again. 1.0.0 style.logoUrl URL where the CMP can load the logo image, leave empty if you don't want logo on it 1.0.0 style.primaryColor Primary color of your brand/styling 1.0.0 style.secondaryColor Secondary color of your brand/styling 1.0.0 fonts Define which fonts CMP should use, unicodeRange can be left out if not needed 1.0.0 core.adsConsentId Which consent ID can be used as indication of ads consent, required by Google Consent Mode 1.0.1 core.analyticsConsentId Which consent ID can be used as indication of analytics consent, required by Google Consent Mode 1.0.1 style.logoSvg You can enter the logo as SVG code here 1.0.1 style.logoType img or svg 1.0.1 style.disableConfirmationModal true/false, controls if the removal of consent is confirmed with popup or is the function direct 1.0.1 core.useTopDomain true/false, set to true if you want to share the collected consent between subdomains 1.0.4 core. withBackendIntegration true/false, tells the CMP if there it waits for backend response 1.0.4","title":"Config example"},{"location":"Gravito_Intelligent_CMP/advanced/Light_Cmp_Config_Options/#config-example","text":"You can check out a Gravito Intelligent CMP configuration example here Following variables are good within \"gravitoCMPConfig\" variable. Variable Description Release style.customCSS Enter your custom CSS definitions, all on one line. Sounds weird but that is what IE requires. 1.0.0 core.cookieName Cookie name the CMP settings are stored to 1.0.0 core.cookieExpiry Cookie lifetime in days 1.0.0 core.settingBtnId Element ID the CMP resurfacing click is bound to 1.0.0 core.version Configuration version, increasing version causes the CMP to resurface and request consents again. 1.0.0 style.logoUrl URL where the CMP can load the logo image, leave empty if you don't want logo on it 1.0.0 style.primaryColor Primary color of your brand/styling 1.0.0 style.secondaryColor Secondary color of your brand/styling 1.0.0 fonts Define which fonts CMP should use, unicodeRange can be left out if not needed 1.0.0 core.adsConsentId Which consent ID can be used as indication of ads consent, required by Google Consent Mode 1.0.1 core.analyticsConsentId Which consent ID can be used as indication of analytics consent, required by Google Consent Mode 1.0.1 style.logoSvg You can enter the logo as SVG code here 1.0.1 style.logoType img or svg 1.0.1 style.disableConfirmationModal true/false, controls if the removal of consent is confirmed with popup or is the function direct 1.0.1 core.useTopDomain true/false, set to true if you want to share the collected consent between subdomains 1.0.4 core. withBackendIntegration true/false, tells the CMP if there it waits for backend response 1.0.4","title":"Config example"},{"location":"Gravito_SDK/Getting_Started/","text":"Getting Started The Gravito SDK ( Latest Version 2) is a tool that allows developers to communicate with the Gravito APIs and deploy both light CMP and TCF CMP. It includes functions for interacting with the Gravito first party backend solution and is used by all major services within the Gravito platform. How to include Gravito SDK to your project? <script> window.gravitoCMPConfig = { settings: { sdkVersion: 2, }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { console.log(\"gravito SDK loaded\"); }; document.body.appendChild(gravitoSDKTag); </script>","title":"Getting Started"},{"location":"Gravito_SDK/Getting_Started/#getting-started","text":"The Gravito SDK ( Latest Version 2) is a tool that allows developers to communicate with the Gravito APIs and deploy both light CMP and TCF CMP. It includes functions for interacting with the Gravito first party backend solution and is used by all major services within the Gravito platform. How to include Gravito SDK to your project? <script> window.gravitoCMPConfig = { settings: { sdkVersion: 2, }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { console.log(\"gravito SDK loaded\"); }; document.body.appendChild(gravitoSDKTag); </script>","title":"Getting Started"},{"location":"Gravito_SDK/Release_Notes/","text":"Release Notes Release Notes (V 2.0.12) (08/02/2024) New Features: SDK now emits separate events when the user has clicked \"reject all\" previously. This enhancement provides more granular insights into user interactions, allowing for better tracking and analysis of user behavior. Added support for GCMV2 for TCF Consent Banners. With this update, Gravito now supports GCMV2. Release Notes (V 2.0.11 ) (31/01/2024) New Features: 1. Additional Consent Mode Support with TCF CMP GravitoSDK now seamlessly supports Google's Additional Consent Mode when integrated with TCF CMP. This enhancement ensures that your application is equipped to handle additional consent requirements in compliance with evolving privacy standards set by Google. Bug Fixes: 1. Crash Fix for Empty First-Party Data In version 2.0.11, we've addressed a bug that caused the SDK to crash when encountering empty first-party data. This bug fix ensures the stability of your website, providing a seamless experience for users even when first-party data is absent. Release Notes ( V 2.0.8 ) ( 04/01/2024 ) New Features Google Consent Mode V2 Integration in Light CMP: Gravito SDK now seamlessly integrates Google Consent Mode V2 functionalities within the Light CMP (Consent Management Platform). This update empowers developers to leverage Google's enhanced consent management features, allowing for more refined control over data tracking and advertising purposes. With this integration, developers can align their applications with evolving privacy regulations and user preferences by managing consent behavior based on user preferences regarding data collection and processing for advertising purposes. Support for Custom Cookie Expiry in TCF CMP 'Reject-All' Action: The Gravito SDK introduces support for customizing cookie expiration specifically for the 'Reject-All' action within the TCF CMP (Transparency and Consent Framework Consent Management Platform). Developers can now set distinct cookie expiry duration for cookies generated when users opt to 'Reject All' within the CMP UI. This feature empowers publishers to manage cookie lifespans, facilitating re-prompting of CMP UI after a lower expiry period for users who have initially rejected all consent. This is available to be set in the TCF CMP configurator on Gravito portal Release Notes ( V2 ) Gravito SDK Version 2 now uses a modular approach to avoid unnecessary imports of files into your website. You can configure which modules you want to use at the time of initialization process. Currently, it supports four modules: LightCMP, TCFCMP, FirstParty, and UserId modules. The SDK is compatible with LightCMP version 4 and above and TCF CMP version 3 and above. This new version of the SDK allows for more flexibility and control over the data collection and processing on your website. We recommend updating to this latest version to take advantage of the new features and improvements. Note If you have any issues or questions, please reach out to our support team for assistance.","title":"Release Notes"},{"location":"Gravito_SDK/Release_Notes/#release-notes","text":"Release Notes (V 2.0.12) (08/02/2024) New Features: SDK now emits separate events when the user has clicked \"reject all\" previously. This enhancement provides more granular insights into user interactions, allowing for better tracking and analysis of user behavior. Added support for GCMV2 for TCF Consent Banners. With this update, Gravito now supports GCMV2. Release Notes (V 2.0.11 ) (31/01/2024) New Features: 1. Additional Consent Mode Support with TCF CMP GravitoSDK now seamlessly supports Google's Additional Consent Mode when integrated with TCF CMP. This enhancement ensures that your application is equipped to handle additional consent requirements in compliance with evolving privacy standards set by Google. Bug Fixes: 1. Crash Fix for Empty First-Party Data In version 2.0.11, we've addressed a bug that caused the SDK to crash when encountering empty first-party data. This bug fix ensures the stability of your website, providing a seamless experience for users even when first-party data is absent. Release Notes ( V 2.0.8 ) ( 04/01/2024 ) New Features Google Consent Mode V2 Integration in Light CMP: Gravito SDK now seamlessly integrates Google Consent Mode V2 functionalities within the Light CMP (Consent Management Platform). This update empowers developers to leverage Google's enhanced consent management features, allowing for more refined control over data tracking and advertising purposes. With this integration, developers can align their applications with evolving privacy regulations and user preferences by managing consent behavior based on user preferences regarding data collection and processing for advertising purposes. Support for Custom Cookie Expiry in TCF CMP 'Reject-All' Action: The Gravito SDK introduces support for customizing cookie expiration specifically for the 'Reject-All' action within the TCF CMP (Transparency and Consent Framework Consent Management Platform). Developers can now set distinct cookie expiry duration for cookies generated when users opt to 'Reject All' within the CMP UI. This feature empowers publishers to manage cookie lifespans, facilitating re-prompting of CMP UI after a lower expiry period for users who have initially rejected all consent. This is available to be set in the TCF CMP configurator on Gravito portal","title":"Release Notes"},{"location":"Gravito_SDK/Release_Notes/#release-notes-v2","text":"Gravito SDK Version 2 now uses a modular approach to avoid unnecessary imports of files into your website. You can configure which modules you want to use at the time of initialization process. Currently, it supports four modules: LightCMP, TCFCMP, FirstParty, and UserId modules. The SDK is compatible with LightCMP version 4 and above and TCF CMP version 3 and above. This new version of the SDK allows for more flexibility and control over the data collection and processing on your website. We recommend updating to this latest version to take advantage of the new features and improvements. Note If you have any issues or questions, please reach out to our support team for assistance.","title":"Release Notes ( V2 )"},{"location":"Gravito_SDK/Version_2_%28Latest%29/","text":"Version 2 (Latest) Using SDK V2 To use Gravito's SDK you should have the Gravito config added to your site. Make sure you also have settings section added inside your config. You can get the config from the Gravito Admin Portal \ud83d\udc49Looking for an older version of Gravito SDK? You can find the older versions here Gravito SDK V1 How it works? Configuration SDK Version can be configured using gravitoCMPConfig object. window.gravitoCMPConfig = { settings: { sdkVersion: 2, }, }; Deployment To Include Gravito SDK Version 2 add following JavaScript to your site. Make sure config loading logic is added above this script. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { console.log(\"gravito SDK loaded\"); }; document.body.appendChild(gravitoSDKTag); Sample Scripts Using SDK to deploy First-Party. To include first-party helper functions of SDK V2 add following JavaScript to your site. Make sure config loading logic is added above this script. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"firstParty\"); }; document.body.appendChild(gravitoSDKTag); To check if the first party has been added to your site or not, please use following script and test it with browser console window. It should return your gravito registered first-party URL gravito.firstParty.getDefaultURL(); Once First-party is added to your website you can use the first-party function to interact with gravito backend. Get Your profile. To get your profile you can call following function function customCb(data) { console.log(\"data\", data); } gravito.firstParty.getProfile(customCb); Have your own First Party Id? Using gravito first-party you can use your own ID and give it more persistence using Gravito First Party API function customCb(data) { console.log(\"data\", data); } var gmId = \"your own id\"; gravito.firstParty.postEvents( { \"gmId-overide\": \"gmid changed to \" + gmId, }, customCb, gmId ); Send a Key value pair of events. You can attach key-value pairs to the profile for eg: pageViews : n function customCb(data) { console.log(\"data\", data); } let key = \"pageViews\"; let value = 2; let model = {}; model[key] = value; gravito.firstParty.postEvents(model, customCb); Send a Keys to the Profile. Attach keys to the profile to get a complete picture of the profile. eg: GA ID. function customCb(data) { console.log(\"data\", data); } let keysInput = [ { i: \"56396541p-0jud-7qawe-lk45ue973723\", K: \"GAID\", v: \"56396541p-0jud-7qawe-lk45ue973723\", }, ]; gravito.firstParty.postKeys(keysInput, customCb); Send a Consent to the Profile. Attach consents to the profile to access it any time. function customCb(data) { console.log(\"data\", data); } let consentInputs = [ { i: \"t\", c: \"consent1\", s: false }, { i: \"m\", c: \"consent2\", s: false }, ]; gravito.firstParty.postConsents(consentInputs, customCb); Bridge in Match On id. Connect with matchOnId ( eg: a deterministic Id) to connect X-domain and X-device. function customCb(data) { console.log(\"data\", data); } let matchOnId = \"your_match_onId\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb); Reset Profile. To reset your firstParty profile use following snippet. function customCb(data) { console.log(\"data\", data); } let matchOnId = \"reset\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb); Delete Profile. To delete your firstParty profile use following snippet function customCb(data) { console.log(\"data\", data); } let matchOnId = \"delete\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb); Using SDK to deploy Light CMP. To know how to deploy light CMP with SDK v2 please click here(Link to Deployment section of Light CMP). Using SDK to deploy TCF CMP. To know how to deploy TCF CMP with SDK v2 please click here(Link to Deployment section of TCF CMP ). Using SDK to Include Gravito's prebid js usermodule. To know how to include Gravito's prebid js usermodule with SDK v2 please click here(Link to Deployment section of prebid js usermodule).","title":"Version 2 (Latest)"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#version-2-latest","text":"","title":"Version 2 (Latest)"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#using-sdk-v2","text":"To use Gravito's SDK you should have the Gravito config added to your site. Make sure you also have settings section added inside your config. You can get the config from the Gravito Admin Portal \ud83d\udc49Looking for an older version of Gravito SDK? You can find the older versions here Gravito SDK V1","title":"Using SDK V2"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#how-it-works","text":"","title":"How it works?"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#configuration","text":"SDK Version can be configured using gravitoCMPConfig object. window.gravitoCMPConfig = { settings: { sdkVersion: 2, }, };","title":"Configuration"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#deployment","text":"To Include Gravito SDK Version 2 add following JavaScript to your site. Make sure config loading logic is added above this script. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { console.log(\"gravito SDK loaded\"); }; document.body.appendChild(gravitoSDKTag);","title":"Deployment"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#sample-scripts","text":"Using SDK to deploy First-Party. To include first-party helper functions of SDK V2 add following JavaScript to your site. Make sure config loading logic is added above this script. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"firstParty\"); }; document.body.appendChild(gravitoSDKTag); To check if the first party has been added to your site or not, please use following script and test it with browser console window. It should return your gravito registered first-party URL gravito.firstParty.getDefaultURL(); Once First-party is added to your website you can use the first-party function to interact with gravito backend.","title":"Sample Scripts"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#get-your-profile","text":"To get your profile you can call following function function customCb(data) { console.log(\"data\", data); } gravito.firstParty.getProfile(customCb);","title":"Get Your profile."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#have-your-own-first-party-id","text":"Using gravito first-party you can use your own ID and give it more persistence using Gravito First Party API function customCb(data) { console.log(\"data\", data); } var gmId = \"your own id\"; gravito.firstParty.postEvents( { \"gmId-overide\": \"gmid changed to \" + gmId, }, customCb, gmId );","title":"Have your own First Party Id?"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#send-a-key-value-pair-of-events","text":"You can attach key-value pairs to the profile for eg: pageViews : n function customCb(data) { console.log(\"data\", data); } let key = \"pageViews\"; let value = 2; let model = {}; model[key] = value; gravito.firstParty.postEvents(model, customCb);","title":"Send a Key value pair of events."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#send-a-keys-to-the-profile","text":"Attach keys to the profile to get a complete picture of the profile. eg: GA ID. function customCb(data) { console.log(\"data\", data); } let keysInput = [ { i: \"56396541p-0jud-7qawe-lk45ue973723\", K: \"GAID\", v: \"56396541p-0jud-7qawe-lk45ue973723\", }, ]; gravito.firstParty.postKeys(keysInput, customCb);","title":"Send a Keys to the Profile."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#send-a-consent-to-the-profile","text":"Attach consents to the profile to access it any time. function customCb(data) { console.log(\"data\", data); } let consentInputs = [ { i: \"t\", c: \"consent1\", s: false }, { i: \"m\", c: \"consent2\", s: false }, ]; gravito.firstParty.postConsents(consentInputs, customCb);","title":"Send a Consent to the Profile."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#bridge-in-match-on-id","text":"Connect with matchOnId ( eg: a deterministic Id) to connect X-domain and X-device. function customCb(data) { console.log(\"data\", data); } let matchOnId = \"your_match_onId\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb);","title":"Bridge in Match On id."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#reset-profile","text":"To reset your firstParty profile use following snippet. function customCb(data) { console.log(\"data\", data); } let matchOnId = \"reset\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb);","title":"Reset Profile."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#delete-profile","text":"To delete your firstParty profile use following snippet function customCb(data) { console.log(\"data\", data); } let matchOnId = \"delete\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb);","title":"Delete Profile."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#using-sdk-to-deploy-light-cmp","text":"To know how to deploy light CMP with SDK v2 please click here(Link to Deployment section of Light CMP).","title":"Using SDK to deploy Light CMP."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#using-sdk-to-deploy-tcf-cmp","text":"To know how to deploy TCF CMP with SDK v2 please click here(Link to Deployment section of TCF CMP ).","title":"Using SDK to deploy TCF CMP."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#using-sdk-to-include-gravitos-prebid-js-usermodule","text":"To know how to include Gravito's prebid js usermodule with SDK v2 please click here(Link to Deployment section of prebid js usermodule).","title":"Using SDK to Include Gravito's prebid js usermodule."},{"location":"Gravito_SDK/advanced/Gravito_sdk_v1/","text":"Gravito SDK V1 Using SDK V1 Version 1.0.10 added support for custom functions to call before initializing CMP and call back when backend data is available. This is useful for any type of integration with backend API that can store the consents (and perhaps other profile information). Example deployment, defining custom backend sync interval (60 secs), default is 1800 secs (30 mins): window.gravitoCMPConfig = gravitoCMPConfig; gravitoCMPConfig.core.syncAfter=60; function getCmpData() { //data fetching logic here var date = new Date(\"06/30/2022\") var domain = window.location.hostname var value = null var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.gravito.net/api/firstparty', true); xhr.withCredentials = true; xhr.onreadystatechange = function (response) { if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P response : \" + response.target.response); var result = JSON.parse(response.target.response) if (result.events) { var gdata = result.events.gravitoData ? JSON.parse(result.events.gravitoData) : null value = gdata ? gdata.TCString : null if (value) { document.cookie = \"TcString\" + \"=\" + value + \"; expires=\" + date.toGMTString() + \"; path=/; domain=\" + domain; } if (gdata) { document.cookie = \"gravitoData\" + \"=\" + JSON.stringify(gdata) + \"; expires=\" + date.toGMTString() + \"; path=/; domain=\" + domain; } } var obj = { senderId: \"gravitoCMPSuperWrapper\", status: \"ready\", }; window.postMessage(obj, \"*\"); } } xhr.send(); } function postCmpData(data) { console.log(\"data\", data) var gravitoData = JSON.stringify(data) var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.gravito.net/api/firstparty?gravitoData=' + gravitoData, true); xhr.withCredentials = true; xhr.onreadystatechange = function (response) { if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P response : \" + response.target.response); } } xhr.send(); } var gravitoSdkTag = document.createElement(\"script\"); gravitoSdkTag.src = \"https://cdn.gravito.net/sdk/gravitoSDK_latest.js\"; gravitoSdkTag.onload = function () { window.gravito.ready(function () { gravito.initTCFCMPWithCustomBackend(getCmpData, function () { gravito.initTCFCMP( \"https://cdn.gravito.net/tcf-v2\", \"https://cdn.gravito.net/cmpbuilds\", \"bundle_latest_2\" ); }, postCmpData) }); }; document.body.appendChild(gravitoSdkTag);","title":"Gravito SDK V1"},{"location":"Gravito_SDK/advanced/Gravito_sdk_v1/#gravito-sdk-v1","text":"","title":"Gravito SDK V1"},{"location":"Gravito_SDK/advanced/Gravito_sdk_v1/#using-sdk-v1","text":"Version 1.0.10 added support for custom functions to call before initializing CMP and call back when backend data is available. This is useful for any type of integration with backend API that can store the consents (and perhaps other profile information). Example deployment, defining custom backend sync interval (60 secs), default is 1800 secs (30 mins): window.gravitoCMPConfig = gravitoCMPConfig; gravitoCMPConfig.core.syncAfter=60; function getCmpData() { //data fetching logic here var date = new Date(\"06/30/2022\") var domain = window.location.hostname var value = null var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.gravito.net/api/firstparty', true); xhr.withCredentials = true; xhr.onreadystatechange = function (response) { if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P response : \" + response.target.response); var result = JSON.parse(response.target.response) if (result.events) { var gdata = result.events.gravitoData ? JSON.parse(result.events.gravitoData) : null value = gdata ? gdata.TCString : null if (value) { document.cookie = \"TcString\" + \"=\" + value + \"; expires=\" + date.toGMTString() + \"; path=/; domain=\" + domain; } if (gdata) { document.cookie = \"gravitoData\" + \"=\" + JSON.stringify(gdata) + \"; expires=\" + date.toGMTString() + \"; path=/; domain=\" + domain; } } var obj = { senderId: \"gravitoCMPSuperWrapper\", status: \"ready\", }; window.postMessage(obj, \"*\"); } } xhr.send(); } function postCmpData(data) { console.log(\"data\", data) var gravitoData = JSON.stringify(data) var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.gravito.net/api/firstparty?gravitoData=' + gravitoData, true); xhr.withCredentials = true; xhr.onreadystatechange = function (response) { if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P response : \" + response.target.response); } } xhr.send(); } var gravitoSdkTag = document.createElement(\"script\"); gravitoSdkTag.src = \"https://cdn.gravito.net/sdk/gravitoSDK_latest.js\"; gravitoSdkTag.onload = function () { window.gravito.ready(function () { gravito.initTCFCMPWithCustomBackend(getCmpData, function () { gravito.initTCFCMP( \"https://cdn.gravito.net/tcf-v2\", \"https://cdn.gravito.net/cmpbuilds\", \"bundle_latest_2\" ); }, postCmpData) }); }; document.body.appendChild(gravitoSdkTag);","title":"Using SDK V1"},{"location":"Gravito_TCF_2.2_CMP/Advanced_features/","text":"Advanced features Here are few of the advanced features of Gravito TCF 2.2 CMP Integration How to integrate with events emitted by Gravito TCF 2.2 CMP? Gravito CMP Integration with Google Advertising Products \u2013 NEW Customization Latest Gravito TCF 2.2 CMP Configuraton example (json)","title":"Advanced features"},{"location":"Gravito_TCF_2.2_CMP/Advanced_features/#advanced-features","text":"Here are few of the advanced features of Gravito TCF 2.2 CMP","title":"Advanced features"},{"location":"Gravito_TCF_2.2_CMP/Advanced_features/#integration","text":"How to integrate with events emitted by Gravito TCF 2.2 CMP? Gravito CMP Integration with Google Advertising Products \u2013 NEW","title":"Integration"},{"location":"Gravito_TCF_2.2_CMP/Advanced_features/#customization","text":"Latest Gravito TCF 2.2 CMP Configuraton example (json)","title":"Customization"},{"location":"Gravito_TCF_2.2_CMP/Getting_Started/","text":"Gravito CMP provides a TCF 2.2 compliant consent management platform. With Gravito you can customize the look and feel of your CMP so that it blends good with your website. Gravito TCF 2.2 CMP is also listed as one of the Google Certified TCF CMP's To get started you can design your CMP Banner with your branding recommendations using our intuitive TCF CMP 2.2 Configurator.","title":"Getting Started"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/","text":"TCF CMP implementation on mobile apps can take two different strategies: You have TCF CMP already configured and set up for your website or you are planning to have such AND your application is made with webviews (= content is displayed on webviews and 3rd party vendor scripts and tags are loaded on those as would on ordinary browser) Your app runs natively (without webviews) and TCF CMP needs to be implemented natively AND/OR your application is using SDKs for mar/adtech. There can be hybrids of above so mixing features is still possible. Option 1 : Same TCF CMP setup for website and mobile app(s) Assuming that you have TCF CMP already setup for your website(s). Easiest way to deploy the same for your mobile application is to include it on the app via webview. You can host a blank page containing CMP on your site or CDN. Include CMP scripts and configuration on it and load the URL inside the app. The core requirement is that all content comes from same second level domain, ie. same CMP cookie is accessible on all webviews. Option 2 : Native apps, CMP embedded via webview Native app integration requires a bit different approach per application architecture: React Native (example project : https://github.com/GravitoLtd/react-native-webview-sample ) Android Native ( https://github.com/GravitoLtd/android-webview-sample ) iOS Native ( https://github.com/GravitoLtd/ios-webview-sample ) Flutter ( https://github.com/GravitoLtd/flutter-webview-sample ) Integration To Integrate TCF Complaint CMP into Mobile Apps you can use Gravito's WebView-based CMP. It uses WebView to render and Manage CMP consents, and stores the consents in SharedPreferences so that they can be accessed by vendors. Gravito Supports the Integration of three major platforms Android(Native), IOS(Native), and React-Native. Integration varies from platform to platform. Assumptions The document assumes that the reader\u202f Knows how to use a web-view component with the current native setup. Knows how to read and update data into the shared preferences in android and into the default storage in IOS. Knows how to pass data to and from WebView. Has access to the code base of demo Apps Is aware of TCFv2 terms such as TC string, CMP, etc. React-Native Flow Diagram The following diagram shows the flow of data for the React Native Implementation. React Native initializes the Web-view by passing the URL to our hosted CMP. This is done by passing URL as a prop to the Web-view component. Web-view then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to react-native through the \"ReactNativeWebView\" window object. This message is then received by React Native using the onMessage attribute of React Native's WebView component. React Native then sends the TC string from shared preference to the Web-view using inject javascript function of the WebView component. This function is used to fire on message events which are then listened to by CMP inside Web-view. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs a save action, a modified TC string is sent back to React Native and is then stored in shared preferences. Sending Data From React-Native App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of React-Native. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"CMP-loaded\" post-message event from CMP this can be done in onMessage hook of WebView as done in sample app for react-native. <WebView ref={webView => (this.webView = webView)} source={{ uri: 'https://yourcdnurl/index.html?platform=reactnative', }} style={{marginTop: 0, backgroundColor: 'orange'}} scalesPageToFit={true} onLoadStart={() => this.setState({loading: true})} onLoad={() => { // use this hook to send data to CMP when html is loaded }} onMessage={event => { const { tcstring, type, currentstate, configversion, tcstringversion, } = JSON.parse(event.nativeEvent.data); console.log('type', type); switch (type) { case 'CMP-loaded': // here you know that CMP has been loaded in Webiview and is waiting for Data to be send by webiview case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected break; case 'load': //here you will get load event in which you will have config version and tcversion break; case 'close': //here you can handle modal close event console.log('close event occured'); break; default: break; } }} /> There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"CMP-loaded\". case 'CMP-loaded': // here you know that CMP has been loaded in WebView and is waiting for Data to be send from WebView let dataToSend = { type: 'cookieData', tcstring: tcstring, // recived from save event when user opted previously should be empty when user come for first time, nontcfdata: nontcfdata, // recived from save event when user opted previously should be empty when user come for first time }; const clientResponseCode = ` window.postMessage(${JSON.stringify( dataToSend, )}, \"*\"); true; `; if (this.webView) { this.webView.injectJavaScript(clientResponseCode); } break; Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside onMessage handler of WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"CMP-loaded\" event. case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected // event Data will have following json object structure // data = { // type: 'save', // tcstring: 'string', // currentstate: 'Object', // nontcfdata: 'Object', // configversion: 'number', // tcstringversion: 'number', // inAppTCData: 'Object', // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the onMessage handler of WebView. case 'close': //here you can handle modal close event console.log('close event occured'); break; Native IOS Flow Diagram The following diagram shows the flow of data for the IOS Implementation. IOS initializes the WKWebView by passing the URL to our hosted CMP. This is done by using the \"loadTheUrl\" function of the \"ViewController\" class. WKWebView then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to IOS through \"webkit.messageHandlers.jsHandler\" window object. This message is then handled by the \"userContentController\" function of ViewController class. IOS then sends the TC string from UserDefaults to the WKWebView using the \"evaluateJavaScript\" function of WebView. This function is used to fire on message events which are then listened by CMP inside WebView. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs save action, a modified TC string is sent back to IOS and is then stored to UserDefaults Sending Data From IOS App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of React-Native. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"start\" post-message event from CMP this can be done in WebView as done in sample app for IOS class ViewController: UIViewController ,UIWebViewDelegate,WKScriptMessageHandler,UITextFieldDelegate{ @IBOutlet weak var TOKEN: UITextField! @IBOutlet weak var webview: WKWebView! @IBOutlet weak var showToken: WKWebView! override func viewDidLoad() { super.viewDidLoad() self.webview.uiDelegate = self as? WKUIDelegate TOKEN.delegate = self as UITextFieldDelegate self.loadTheUrl() } //----- FUNCTION TO LOAD HTML func loadTheUrl(){ webview.configuration.userContentController.add(self, name: \"jsHandler\") webview.load(NSURLRequest(url: NSURL(string: \"https://yourcdnurl/index.html?platform=ios\")! as URL) as URLRequest) } func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) { if message.name == \"jsHandler\" { print(message.body) let json = message.body as? NSDictionary let event = json?[\"event\"] as? String print(event) switch event { case \"start\": // here you know that CMP has been loaded in Webiview and is waiting for Data to be send by webiview case \"close\": // here you can do clean up action on close event case \"save\": // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected default: break } } } } There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"start\". case \"start\": //here we are sending data to CMP through post message,data to be send must have following structure { tcstring: tcstring, // recived from save event when user opted previously should be empty when user come for first time, nontcfdata: nontcfdata, // recived from save event when user opted previously should be empty when user come for first time }; guard let tcstring=UserDefaults.standard.object(forKey:\"tcstring\") else { let tcstring=\"\" let startjs = \"window.postMessage('\\(tcstring)', \\\"*\\\");true;\" webview.evaluateJavaScript(startjs, completionHandler: nil) return } print(tcstring) var error: NSError? let data = try?JSONSerialization.data(withJSONObject: tcstring, options: JSONSerialization.WritingOptions.prettyPrinted) if let data = data { let json = NSString(data: data, encoding: NSUTF8StringEncoding) if let json = json { print(json) let startjs = \"window.postMessage(\\(json), \\\"*\\\");true;\" webview.evaluateJavaScript(startjs, completionHandler: nil) } } Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"start\" event. case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected // event Data will have following json object structure // data = { // type: 'save', // tcstring: 'string', // currentstate: 'Object', // nontcfdata: 'Object', // configversion: 'number', // tcstringversion: 'number', // inAppTCData: 'Object', // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the WebView. case 'close': //here you can handle modal close event console.log('close event occured'); Native Android Flow Diagram The following diagram shows the flow of data for the Android Implementation. Android initializes the WebView by passing the URL to our hosted CMP. This is done by using the \"loadUrl\" function of WebView. Along with this it also exposes the object which has functionalities to get data and send data from android. This object is available as a window.Android object in WebView. Android uses \"addJavascriptInterface\" function of WebView to achieve this. WebView then fetches the required content from the host and loads the HTML page. JavaScript then gets the TC string from the android code using the functions exposed by the Window.Android object. This TC string is then used by CMP to render the current state of consents. When the user performs save action, modified TC string is then sent back and stored in shared preference using function exposed by the Android window object. Sending Data From Android App to CMP In Android communication between Native side and CMP happens through function which are exposed by Android WebView. WebView exposes certain functions which can be called from CMP.So CMP uses this function to send data across. Following code explains how to handle different action that user performs on CMP UI public class WebViewAdapter { Context mContext; WebViewCallback webViewCallback = null; /** Instantiate the interface and set the context */ WebViewAdapter(Context c,WebViewCallback webViewCallback) { mContext = c; this.webViewCallback = webViewCallback; } @JavascriptInterface public void getValueFromWebView(String value) { // This function will called by CMP code to send data accross to Android APP // It Will pass different JSON object Strings for difference cases // FOR SAVE // so when user performs any save action on CMP UI such as Accept All, Reject All, or Accept Selected, // CMP will call this function with json string of below object // { // type: \"save\", // tcstring: 'string', // currentstate: 'object', // nontcfdata: 'object', // configversion: 'string, // tcstringversion: 'string, // inAppTCData: 'object',, // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details FOR CLOSE // When user click close button on second layer JSON object string of following object will pass to this function // { // type: \"close\", // data: \"cmp ui closed\", // } } @JavascriptInterface public String getValueFromStorage(){ // This function will be called when CMP want to received data from WebView, This function should return the stringified JSON of following type // { // tcstring:\"string\" // previoulsy stored string received in getValueFromWebView // nontcfdata:\"object\" //previoulsy stored value received in getValueFromWebView // } } } Flutter Flow Diagram The following diagram shows the flow of data for the Flutter Implementation. Flutter initializes the Web-view by passing the URL to our hosted CMP. This is done by creating WebView Controller and assigning it to the WebView Widget. Web-view then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to WebView through the \"FlutterAppWebView\" window object. (Note please keep the JavaScript Channel name as \"FlutterAppWebView\") This message is then received by WebView's JavaScript channel using the onMessageReceived parameter. Flutter then sends the TC string from shared preference to the Web-view using runJavaScriptfunction of the WebView controller. This function is used to fire on message events which are then listened to by CMP inside Web-view. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs a save action, a modified TC string is sent back to Flutter and is then stored in shared preferences. Sending Data From Flutter App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of Flutter. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"CMP-loaded\" post-message event from CMP this can be done in onMessageReceived hook of WebView as done in sample app for Flutter. First create a WebView Controller and JavaScript Channel, make sure you name this channel as \"FlutterAppWebView\" only. controller = WebViewController() ..setJavaScriptMode(JavaScriptMode.unrestricted) ..setBackgroundColor(const Color(0x00000000)) ..setNavigationDelegate( NavigationDelegate( onProgress: (int progress) { // Update loading bar. }, onPageStarted: (String url) {}, onPageFinished: (String url) {}, onWebResourceError: (WebResourceError error) { print(\"err\"); }, onNavigationRequest: (NavigationRequest request) { if (request.url.startsWith('https://www.youtube.com/')) { return NavigationDecision.prevent; } return NavigationDecision.navigate; }, ), ) ..addJavaScriptChannel( 'FlutterAppWebView', onMessageReceived:(){}) Add listeners to various events emitted by JavaScript using javaScript channels onMessageRecievd method.and specify the CMP url to load inside the webview. ..addJavaScriptChannel( 'FlutterAppWebView', onMessageReceived: (JavaScriptMessage message) async { var messageData = jsonDecode(message.message); // Obtain shared preferences. final SharedPreferences prefs = await SharedPreferences.getInstance(); String messageType = messageData[\"type\"]; switch (messageType) { }, ) ..loadRequest(Uri.parse( 'https://gravitocdn.blob.core.windows.net/webview/index.2.3.html?platform=flutter')); There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"CMP-loaded\". case \"CMP-loaded\": // this message will be fired when cmp will be loaded now app has to check it has previously stored consent // in native storage if yes then we need to send it to CMP else we need to send empty data final String? resultString = prefs.getString('cookieData'); var storedData = resultString != null ? jsonDecode(resultString) : null; var message = { \"type\": \"cookieData\", \"tcstring\": storedData != null ? storedData[\"tcstring\"] : null, \"nontcfdata\": storedData != null ? storedData[\"nontcfdata\"] : null }; String jsonMessage = jsonEncode(message); controller.runJavaScript(' window.postMessage($jsonMessage)'); break; Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside onRecivedMessage handler of WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"CMP-loaded\" event. case \"save\": // messagedata will have following strucutre // let onSaveMessageFlutter = { // type: \"save\", // tcstring: encodedString, // currentstate: getCoreConfigDetails(), // nontcfdata: nonTCFModel.Model, // configversion: config.core.version, // tcstringversion: tcModel.cmpVersion, // inAppTCData: getInAppTCData(), // }; // this message will be fired when there is save action perfomed on CMP ui inside webView, // data with this message should be stored in native storage // this is only for sample app, In production you will have to store keys in format specified here //https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details var d = { \"tcstring\": messageData[\"tcstring\"], \"nontcfdata\": messageData[\"nontcfdata\"], }; await prefs.setString(\"cookieData\", jsonEncode(d)); break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the onRecivedMessage handler of WebView. case \"close\": setState(() { print(\"close\"); _showWebView = false; }); break;","title":"Mobile apps"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#option-1-same-tcf-cmp-setup-for-website-and-mobile-apps","text":"Assuming that you have TCF CMP already setup for your website(s). Easiest way to deploy the same for your mobile application is to include it on the app via webview. You can host a blank page containing CMP on your site or CDN. Include CMP scripts and configuration on it and load the URL inside the app. The core requirement is that all content comes from same second level domain, ie. same CMP cookie is accessible on all webviews.","title":"Option 1 : Same TCF CMP setup for website and mobile app(s)"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#option-2-native-apps-cmp-embedded-via-webview","text":"Native app integration requires a bit different approach per application architecture: React Native (example project : https://github.com/GravitoLtd/react-native-webview-sample ) Android Native ( https://github.com/GravitoLtd/android-webview-sample ) iOS Native ( https://github.com/GravitoLtd/ios-webview-sample ) Flutter ( https://github.com/GravitoLtd/flutter-webview-sample )","title":"Option 2 : Native apps, CMP embedded via webview"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#integration","text":"To Integrate TCF Complaint CMP into Mobile Apps you can use Gravito's WebView-based CMP. It uses WebView to render and Manage CMP consents, and stores the consents in SharedPreferences so that they can be accessed by vendors. Gravito Supports the Integration of three major platforms Android(Native), IOS(Native), and React-Native. Integration varies from platform to platform.","title":"Integration"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#assumptions","text":"The document assumes that the reader\u202f Knows how to use a web-view component with the current native setup. Knows how to read and update data into the shared preferences in android and into the default storage in IOS. Knows how to pass data to and from WebView. Has access to the code base of demo Apps Is aware of TCFv2 terms such as TC string, CMP, etc.","title":"Assumptions"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#react-native","text":"Flow Diagram The following diagram shows the flow of data for the React Native Implementation. React Native initializes the Web-view by passing the URL to our hosted CMP. This is done by passing URL as a prop to the Web-view component. Web-view then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to react-native through the \"ReactNativeWebView\" window object. This message is then received by React Native using the onMessage attribute of React Native's WebView component. React Native then sends the TC string from shared preference to the Web-view using inject javascript function of the WebView component. This function is used to fire on message events which are then listened to by CMP inside Web-view. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs a save action, a modified TC string is sent back to React Native and is then stored in shared preferences. Sending Data From React-Native App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of React-Native. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"CMP-loaded\" post-message event from CMP this can be done in onMessage hook of WebView as done in sample app for react-native. <WebView ref={webView => (this.webView = webView)} source={{ uri: 'https://yourcdnurl/index.html?platform=reactnative', }} style={{marginTop: 0, backgroundColor: 'orange'}} scalesPageToFit={true} onLoadStart={() => this.setState({loading: true})} onLoad={() => { // use this hook to send data to CMP when html is loaded }} onMessage={event => { const { tcstring, type, currentstate, configversion, tcstringversion, } = JSON.parse(event.nativeEvent.data); console.log('type', type); switch (type) { case 'CMP-loaded': // here you know that CMP has been loaded in Webiview and is waiting for Data to be send by webiview case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected break; case 'load': //here you will get load event in which you will have config version and tcversion break; case 'close': //here you can handle modal close event console.log('close event occured'); break; default: break; } }} /> There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"CMP-loaded\". case 'CMP-loaded': // here you know that CMP has been loaded in WebView and is waiting for Data to be send from WebView let dataToSend = { type: 'cookieData', tcstring: tcstring, // recived from save event when user opted previously should be empty when user come for first time, nontcfdata: nontcfdata, // recived from save event when user opted previously should be empty when user come for first time }; const clientResponseCode = ` window.postMessage(${JSON.stringify( dataToSend, )}, \"*\"); true; `; if (this.webView) { this.webView.injectJavaScript(clientResponseCode); } break; Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside onMessage handler of WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"CMP-loaded\" event. case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected // event Data will have following json object structure // data = { // type: 'save', // tcstring: 'string', // currentstate: 'Object', // nontcfdata: 'Object', // configversion: 'number', // tcstringversion: 'number', // inAppTCData: 'Object', // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the onMessage handler of WebView. case 'close': //here you can handle modal close event console.log('close event occured'); break;","title":"React-Native"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#native-ios","text":"Flow Diagram The following diagram shows the flow of data for the IOS Implementation. IOS initializes the WKWebView by passing the URL to our hosted CMP. This is done by using the \"loadTheUrl\" function of the \"ViewController\" class. WKWebView then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to IOS through \"webkit.messageHandlers.jsHandler\" window object. This message is then handled by the \"userContentController\" function of ViewController class. IOS then sends the TC string from UserDefaults to the WKWebView using the \"evaluateJavaScript\" function of WebView. This function is used to fire on message events which are then listened by CMP inside WebView. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs save action, a modified TC string is sent back to IOS and is then stored to UserDefaults Sending Data From IOS App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of React-Native. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"start\" post-message event from CMP this can be done in WebView as done in sample app for IOS class ViewController: UIViewController ,UIWebViewDelegate,WKScriptMessageHandler,UITextFieldDelegate{ @IBOutlet weak var TOKEN: UITextField! @IBOutlet weak var webview: WKWebView! @IBOutlet weak var showToken: WKWebView! override func viewDidLoad() { super.viewDidLoad() self.webview.uiDelegate = self as? WKUIDelegate TOKEN.delegate = self as UITextFieldDelegate self.loadTheUrl() } //----- FUNCTION TO LOAD HTML func loadTheUrl(){ webview.configuration.userContentController.add(self, name: \"jsHandler\") webview.load(NSURLRequest(url: NSURL(string: \"https://yourcdnurl/index.html?platform=ios\")! as URL) as URLRequest) } func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) { if message.name == \"jsHandler\" { print(message.body) let json = message.body as? NSDictionary let event = json?[\"event\"] as? String print(event) switch event { case \"start\": // here you know that CMP has been loaded in Webiview and is waiting for Data to be send by webiview case \"close\": // here you can do clean up action on close event case \"save\": // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected default: break } } } } There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"start\". case \"start\": //here we are sending data to CMP through post message,data to be send must have following structure { tcstring: tcstring, // recived from save event when user opted previously should be empty when user come for first time, nontcfdata: nontcfdata, // recived from save event when user opted previously should be empty when user come for first time }; guard let tcstring=UserDefaults.standard.object(forKey:\"tcstring\") else { let tcstring=\"\" let startjs = \"window.postMessage('\\(tcstring)', \\\"*\\\");true;\" webview.evaluateJavaScript(startjs, completionHandler: nil) return } print(tcstring) var error: NSError? let data = try?JSONSerialization.data(withJSONObject: tcstring, options: JSONSerialization.WritingOptions.prettyPrinted) if let data = data { let json = NSString(data: data, encoding: NSUTF8StringEncoding) if let json = json { print(json) let startjs = \"window.postMessage(\\(json), \\\"*\\\");true;\" webview.evaluateJavaScript(startjs, completionHandler: nil) } } Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"start\" event. case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected // event Data will have following json object structure // data = { // type: 'save', // tcstring: 'string', // currentstate: 'Object', // nontcfdata: 'Object', // configversion: 'number', // tcstringversion: 'number', // inAppTCData: 'Object', // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the WebView. case 'close': //here you can handle modal close event console.log('close event occured');","title":"Native IOS"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#native-android","text":"Flow Diagram The following diagram shows the flow of data for the Android Implementation. Android initializes the WebView by passing the URL to our hosted CMP. This is done by using the \"loadUrl\" function of WebView. Along with this it also exposes the object which has functionalities to get data and send data from android. This object is available as a window.Android object in WebView. Android uses \"addJavascriptInterface\" function of WebView to achieve this. WebView then fetches the required content from the host and loads the HTML page. JavaScript then gets the TC string from the android code using the functions exposed by the Window.Android object. This TC string is then used by CMP to render the current state of consents. When the user performs save action, modified TC string is then sent back and stored in shared preference using function exposed by the Android window object. Sending Data From Android App to CMP In Android communication between Native side and CMP happens through function which are exposed by Android WebView. WebView exposes certain functions which can be called from CMP.So CMP uses this function to send data across. Following code explains how to handle different action that user performs on CMP UI public class WebViewAdapter { Context mContext; WebViewCallback webViewCallback = null; /** Instantiate the interface and set the context */ WebViewAdapter(Context c,WebViewCallback webViewCallback) { mContext = c; this.webViewCallback = webViewCallback; } @JavascriptInterface public void getValueFromWebView(String value) { // This function will called by CMP code to send data accross to Android APP // It Will pass different JSON object Strings for difference cases // FOR SAVE // so when user performs any save action on CMP UI such as Accept All, Reject All, or Accept Selected, // CMP will call this function with json string of below object // { // type: \"save\", // tcstring: 'string', // currentstate: 'object', // nontcfdata: 'object', // configversion: 'string, // tcstringversion: 'string, // inAppTCData: 'object',, // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details FOR CLOSE // When user click close button on second layer JSON object string of following object will pass to this function // { // type: \"close\", // data: \"cmp ui closed\", // } } @JavascriptInterface public String getValueFromStorage(){ // This function will be called when CMP want to received data from WebView, This function should return the stringified JSON of following type // { // tcstring:\"string\" // previoulsy stored string received in getValueFromWebView // nontcfdata:\"object\" //previoulsy stored value received in getValueFromWebView // } } }","title":"Native Android"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#flutter","text":"Flow Diagram The following diagram shows the flow of data for the Flutter Implementation. Flutter initializes the Web-view by passing the URL to our hosted CMP. This is done by creating WebView Controller and assigning it to the WebView Widget. Web-view then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to WebView through the \"FlutterAppWebView\" window object. (Note please keep the JavaScript Channel name as \"FlutterAppWebView\") This message is then received by WebView's JavaScript channel using the onMessageReceived parameter. Flutter then sends the TC string from shared preference to the Web-view using runJavaScriptfunction of the WebView controller. This function is used to fire on message events which are then listened to by CMP inside Web-view. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs a save action, a modified TC string is sent back to Flutter and is then stored in shared preferences. Sending Data From Flutter App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of Flutter. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"CMP-loaded\" post-message event from CMP this can be done in onMessageReceived hook of WebView as done in sample app for Flutter. First create a WebView Controller and JavaScript Channel, make sure you name this channel as \"FlutterAppWebView\" only. controller = WebViewController() ..setJavaScriptMode(JavaScriptMode.unrestricted) ..setBackgroundColor(const Color(0x00000000)) ..setNavigationDelegate( NavigationDelegate( onProgress: (int progress) { // Update loading bar. }, onPageStarted: (String url) {}, onPageFinished: (String url) {}, onWebResourceError: (WebResourceError error) { print(\"err\"); }, onNavigationRequest: (NavigationRequest request) { if (request.url.startsWith('https://www.youtube.com/')) { return NavigationDecision.prevent; } return NavigationDecision.navigate; }, ), ) ..addJavaScriptChannel( 'FlutterAppWebView', onMessageReceived:(){}) Add listeners to various events emitted by JavaScript using javaScript channels onMessageRecievd method.and specify the CMP url to load inside the webview. ..addJavaScriptChannel( 'FlutterAppWebView', onMessageReceived: (JavaScriptMessage message) async { var messageData = jsonDecode(message.message); // Obtain shared preferences. final SharedPreferences prefs = await SharedPreferences.getInstance(); String messageType = messageData[\"type\"]; switch (messageType) { }, ) ..loadRequest(Uri.parse( 'https://gravitocdn.blob.core.windows.net/webview/index.2.3.html?platform=flutter')); There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"CMP-loaded\". case \"CMP-loaded\": // this message will be fired when cmp will be loaded now app has to check it has previously stored consent // in native storage if yes then we need to send it to CMP else we need to send empty data final String? resultString = prefs.getString('cookieData'); var storedData = resultString != null ? jsonDecode(resultString) : null; var message = { \"type\": \"cookieData\", \"tcstring\": storedData != null ? storedData[\"tcstring\"] : null, \"nontcfdata\": storedData != null ? storedData[\"nontcfdata\"] : null }; String jsonMessage = jsonEncode(message); controller.runJavaScript(' window.postMessage($jsonMessage)'); break; Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside onRecivedMessage handler of WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"CMP-loaded\" event. case \"save\": // messagedata will have following strucutre // let onSaveMessageFlutter = { // type: \"save\", // tcstring: encodedString, // currentstate: getCoreConfigDetails(), // nontcfdata: nonTCFModel.Model, // configversion: config.core.version, // tcstringversion: tcModel.cmpVersion, // inAppTCData: getInAppTCData(), // }; // this message will be fired when there is save action perfomed on CMP ui inside webView, // data with this message should be stored in native storage // this is only for sample app, In production you will have to store keys in format specified here //https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details var d = { \"tcstring\": messageData[\"tcstring\"], \"nontcfdata\": messageData[\"nontcfdata\"], }; await prefs.setString(\"cookieData\", jsonEncode(d)); break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the onRecivedMessage handler of WebView. case \"close\": setState(() { print(\"close\"); _showWebView = false; }); break;","title":"Flutter"},{"location":"Gravito_TCF_2.2_CMP/Setup_and_Design/","text":"Gravito TCF 2.2 CMP Setup can be done using TCF CMP Configurator on Gravito\u2019s Admin Portal. Go to CMP>>TCF configurator.","title":"Setup and Design"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/","text":"Gravito CMP Integration with Google Advertising Products \u200b Gravito CMP Integration with Google Advertising Products: TCFv2.0 Compliance Guide \u200b Introduction This guide details the steps and best practices for integrating Gravito's Consent Management Platform (CMP) with Google Advertising Products, ensuring compliance with the IAB Transparency & Consent Framework version 2.0 (TCFv2.0). Our aim is to facilitate a smooth setup and address common integration challenges to optimize compliance and performance. Ensuring CMP Configuration and Vendor Setup To integrate Gravito's CMP with Google Advertising Products, it is crucial to ensure that the CMP is correctly configured: Vendor Configuration: Include Google (Vendor ID 755) in your list of vendors through the Gravito admin panel. Enable TCF settings for Google and verify that all necessary advertising products (Google Ad Manager, AdSense, AdMob) are correctly listed under Google's vendor configuration. Consent String Verification: The Gravito CMP automatically generates and appends the TCFv2.0 compliant TC string to ad requests. Regularly verify the integrity and accuracy of the TC string using the IaB provided decoding tool to ensure it reflects user consent preferences accurately. Common Integration Issues and Their Resolutions Issue 1: TC String Not Recognized Problem: Google services may reject the TC string due to formatting errors or incomplete data. Solution: Use the IAB's decode tool at https://iabtcf.com/#/decode to validate the TC string. Ensure that the string adheres to the latest specifications set by the IAB. Issue 2: Incomplete or Incorrect Vendor Configuration Problem: Google Advertising Products might not operate correctly if not configured properly in the CMP's vendor list. Solution: Double-check the vendor settings in Gravito's CMP. Make sure that Google and its services are enabled with appropriate consent features activated. Troubleshooting of Google Ad Manager (GAM) Errors When integrating Gravito's CMP with Google Advertising Products, understanding and resolving errors reported by Google Ad Manager is crucial for maintaining both compliance and ad performance. This section expands on how to address common issues using insights adapted from Google's own resources. Common GAM Errors and Troubleshooting Steps Error Code: 1.x (Consent-related Errors) Description: This series of errors typically indicates that consent for one or more ad technology providers, including Google, has not been granted. Troubleshooting: Verify that the CMP is active and correctly integrated on all pages of your website. Check that the TC string is being passed correctly in ad requests and that it accurately reflects the consent status of all users. Use the \"Test Suite\" available in Google Ad Manager to simulate ad requests and identify consent-related discrepancies. Error Code: 2.x (Ad Tag Errors) Description: These errors often occur when there are issues in the ad request itself, such as incorrect tagging or problems with ad unit configurations. Troubleshooting: Ensure that all ad tags are implemented correctly and are calling the correct ad units and parameters. Review ad unit settings in Google Ad Manager to confirm they are configured to handle consented ad requests appropriately. Check for any syntax errors in the ad tags that might be preventing the ad from being served. Error Code: 413 (Payload Too Large) Description: This error happens when the URL of an ad request exceeds the maximum allowed length, often due to an overly long consent string. Troubleshooting: Minimize the number of optional purposes and features included in the consent string. Aim to simplify the data included without sacrificing compliance. Check if the consent string can be compressed or if certain parameters can be omitted without affecting compliance. Review the configuration of your ad tags to ensure they are not redundantly appending extra parameters that inflate the request size. Using Google Ad Manager's Diagnostic Tools To further aid in troubleshooting, Google Ad Manager offers a range of diagnostic tools that can provide deeper insights into issues: Creative Preview Tool: Use this tool to test individual creatives in a live environment to see how they behave when an ad request is made. This can help pinpoint issues specific to certain ad formats or configurations. Delivery Tools: These tools allow you to simulate ad requests in real-time to verify how ads are being served under various conditions, including different user consent states. Event-Level Troubleshooting Reports: These reports give detailed breakdowns of ad behavior at the event level, allowing you to trace the path of a request and see where failures occur. By utilizing these methods and tools, publishers can better diagnose and resolve issues related to Google Ad Manager and ensure that ads are delivered in compliance with user consent preferences set through Gravito's CMP. For additional information and more specific guidance on using Google Ad Manager's features for troubleshooting, refer to the official Google support page . This resource is invaluable for understanding the intricate details of GAM's error messages and troubleshooting processes. Best Practices for Ongoing Compliance and Performance Regular CMP Updates: Keep your CMP implementation up-to-date with the latest TCF standards and Google requirements. Gravito frequently updates its CMP to align with regulatory changes and technical specifications. Enhance User Interface for Better Consent Rates: Optimize the user consent interface to make it as clear and user-friendly as possible, which can help in increasing consent rates and ensuring better compliance. Detailed Logging and Monitoring: Utilize Gravito's comprehensive logging features to keep an audit trail of consent strings and decisions, which is crucial for compliance and troubleshooting. Conclusion By following this guide, publishers can effectively integrate Gravito's CMP with Google Advertising Products under TCFv2.0, ensuring both compliance with privacy regulations and optimal operational performance. For further assistance, our technical support team is available to help you resolve any specific issues or to provide additional guidance on best practices for using Gravito's CMP solutions.","title":"Gravito CMP Integration with Google Advertising Products"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#gravito-cmp-integration-with-google-advertising-products","text":"\u200b Gravito CMP Integration with Google Advertising Products: TCFv2.0 Compliance Guide \u200b Introduction This guide details the steps and best practices for integrating Gravito's Consent Management Platform (CMP) with Google Advertising Products, ensuring compliance with the IAB Transparency & Consent Framework version 2.0 (TCFv2.0). Our aim is to facilitate a smooth setup and address common integration challenges to optimize compliance and performance. Ensuring CMP Configuration and Vendor Setup To integrate Gravito's CMP with Google Advertising Products, it is crucial to ensure that the CMP is correctly configured: Vendor Configuration: Include Google (Vendor ID 755) in your list of vendors through the Gravito admin panel. Enable TCF settings for Google and verify that all necessary advertising products (Google Ad Manager, AdSense, AdMob) are correctly listed under Google's vendor configuration. Consent String Verification: The Gravito CMP automatically generates and appends the TCFv2.0 compliant TC string to ad requests. Regularly verify the integrity and accuracy of the TC string using the IaB provided decoding tool to ensure it reflects user consent preferences accurately. Common Integration Issues and Their Resolutions Issue 1: TC String Not Recognized Problem: Google services may reject the TC string due to formatting errors or incomplete data. Solution: Use the IAB's decode tool at https://iabtcf.com/#/decode to validate the TC string. Ensure that the string adheres to the latest specifications set by the IAB. Issue 2: Incomplete or Incorrect Vendor Configuration Problem: Google Advertising Products might not operate correctly if not configured properly in the CMP's vendor list. Solution: Double-check the vendor settings in Gravito's CMP. Make sure that Google and its services are enabled with appropriate consent features activated. Troubleshooting of Google Ad Manager (GAM) Errors When integrating Gravito's CMP with Google Advertising Products, understanding and resolving errors reported by Google Ad Manager is crucial for maintaining both compliance and ad performance. This section expands on how to address common issues using insights adapted from Google's own resources. Common GAM Errors and Troubleshooting Steps Error Code: 1.x (Consent-related Errors) Description: This series of errors typically indicates that consent for one or more ad technology providers, including Google, has not been granted. Troubleshooting: Verify that the CMP is active and correctly integrated on all pages of your website. Check that the TC string is being passed correctly in ad requests and that it accurately reflects the consent status of all users. Use the \"Test Suite\" available in Google Ad Manager to simulate ad requests and identify consent-related discrepancies. Error Code: 2.x (Ad Tag Errors) Description: These errors often occur when there are issues in the ad request itself, such as incorrect tagging or problems with ad unit configurations. Troubleshooting: Ensure that all ad tags are implemented correctly and are calling the correct ad units and parameters. Review ad unit settings in Google Ad Manager to confirm they are configured to handle consented ad requests appropriately. Check for any syntax errors in the ad tags that might be preventing the ad from being served. Error Code: 413 (Payload Too Large) Description: This error happens when the URL of an ad request exceeds the maximum allowed length, often due to an overly long consent string. Troubleshooting: Minimize the number of optional purposes and features included in the consent string. Aim to simplify the data included without sacrificing compliance. Check if the consent string can be compressed or if certain parameters can be omitted without affecting compliance. Review the configuration of your ad tags to ensure they are not redundantly appending extra parameters that inflate the request size. Using Google Ad Manager's Diagnostic Tools To further aid in troubleshooting, Google Ad Manager offers a range of diagnostic tools that can provide deeper insights into issues: Creative Preview Tool: Use this tool to test individual creatives in a live environment to see how they behave when an ad request is made. This can help pinpoint issues specific to certain ad formats or configurations. Delivery Tools: These tools allow you to simulate ad requests in real-time to verify how ads are being served under various conditions, including different user consent states. Event-Level Troubleshooting Reports: These reports give detailed breakdowns of ad behavior at the event level, allowing you to trace the path of a request and see where failures occur. By utilizing these methods and tools, publishers can better diagnose and resolve issues related to Google Ad Manager and ensure that ads are delivered in compliance with user consent preferences set through Gravito's CMP. For additional information and more specific guidance on using Google Ad Manager's features for troubleshooting, refer to the official Google support page . This resource is invaluable for understanding the intricate details of GAM's error messages and troubleshooting processes. Best Practices for Ongoing Compliance and Performance Regular CMP Updates: Keep your CMP implementation up-to-date with the latest TCF standards and Google requirements. Gravito frequently updates its CMP to align with regulatory changes and technical specifications. Enhance User Interface for Better Consent Rates: Optimize the user consent interface to make it as clear and user-friendly as possible, which can help in increasing consent rates and ensuring better compliance. Detailed Logging and Monitoring: Utilize Gravito's comprehensive logging features to keep an audit trail of consent strings and decisions, which is crucial for compliance and troubleshooting. Conclusion By following this guide, publishers can effectively integrate Gravito's CMP with Google Advertising Products under TCFv2.0, ensuring both compliance with privacy regulations and optimal operational performance. For further assistance, our technical support team is available to help you resolve any specific issues or to provide additional guidance on best practices for using Gravito's CMP solutions.","title":"Gravito CMP Integration with Google Advertising Products"},{"location":"Gravito_TCF_2.2_CMP/advanced/integration/","text":"Gravito CMP emits \"gravito:cmp:light\" events. Events indicate the UI actions and points when the user has given or denied the consents and rest of the tags can either trigger or not. The event types are: Action eventType Trigger Custom settings confirmed by clicking \"Accept selected\" layer2:opt-in:selected User clicks on \"Accept selected\" on 2nd layer of CMP \"Accept all\" clicked on layer 1 layer1:opt-in:all User clicks on \"Accept selected\" on 2nd layer of CMP \"Accept all\" clicked on layer 2 layer2:opt-in:all User clicks on \"Accept all\" button on 1st layer \"Reject all\" clicked on layer 2 layer2:opt-out:all User clicks on \"Accept all\" button on 2nd layer CMP UI closed cmpui:closed User clicks on \"Reject all\" button on 2nd layer Parent site visible without CMP UI layer2:back-to-site CMP UI closes because of user actions Example of listening events and currentState object const getCookieData = (cname) => { var name = cname + \"=\"; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(\";\"); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == \" \") { c = c.substring(1); } if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); } } return \"\"; }; document.addEventListener(\"gravito:cmp:light\", function (event) { var button_click_events = [ \"layer1:opt-in:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer2:opt-in:all\", ]; if (button_click_events.includes(event.detail.eventType)) { let currentState = getCookieData( gravitoCMPConfig.core.cookieName ); depending upon the currentState of consent you can perform the required actions } });","title":"Integration"},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/","text":"Version 3(Internal) (Latest) Note: Version 3 does not correspond to TCF Version 3 but it is Internal Version 3 for gravito CMP, and is TCF version 2 complaint. How it works? Configuration TCF CMP can be configure and customize as per your need with the help of configuration object.You can generate this configuration object using our Admin Portal or you can create your own from scratch. Following is the example of config object for TCF CMP. window.gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: true, catchCMPEvents: true, sdkVersion: 2, userIdModule: false, backendUrl: \"\", version: \"bundle_latest_3\", }, core: { cookieName: \"TcString\", cookieExpiry: 2, useTopDomain: false, syncAfter: 1800, settingBtnClassname: \"manageSettings\", version: 2, purposeOneTreatment: true, publisherCountryCode: \"EN\", googleTcfId: 755, purposes: [ { type: \"purposes\", id: 1, }, { type: \"stacks\", id: 26, }, { type: \"purposes\", id: 10, }, ], specialFeatures: [1, 2], specialPurposes: [1, 2], features: [1, 2, 3], vendors: [2, 6, 8, 511, 11, 14, 278, 755], nonTCFVendors: [ { type: \"nonTCFVendors\", id: 2, name: \"Amazon\", description: \"description for amazon\", isConsentable: false, }, ], customPurposes: [ { type: \"customPurpose\", id: 1, name: \"Data Collection\", description: \"Gravito can collect data and can use it for better experience of its customers\", descriptionLegal: \"Gravito can collect data and can use it for better experience of its customers\", isLegitimate: true, }, { type: \"customPurpose\", id: 2, name: \"Targeting\", description: \"Gravito can use data for targeting its customers\", descriptionLegal: \"Gravito can use data for targeting its customers\", isLegitimate: false, }, ], publisherRestrictions: [ { purposeID: 1, restrictionType: \"REQUIRE_CONSENT\", vendors: [6, 12], }, { purposeID: 1, restrictionType: \"REQUIRE_CONSENT\", vendors: [8], }, { purposeID: 2, restrictionType: \"REQUIRE_CONSENT\", vendors: [8], }, ], }, text: { firstLayer: { title: \"We need your consent to provide personalized experience\", introductionText: \"Gravito and its <span id='partners-link'>third-party vendors</span> collect personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", consentableItemDescription: \"Gravito and its partners require consent for following:\", legalFooter: 'By accepting, you are allowing data processing within the service, rejection can affect the user experience. Some third-party vendors might use their legitimate interest to operate, you can object that or change other settings at any time by selecting \"Settings\" at the bottom of the page.', privacyPolicyUrl: \"https://www.gravito.net/#privacy-policy\", privacyLabel: \"Privacy Policy\", actions: [\"Settings\", \"Accept All\"], }, secondLayer: { title: \"Gravito Setting title changed\", introductionText: \"Please select from the following list of purposes to help us serve you better.\", tabLabels: [\"Purposes and Characteristics\", \"Vendors\"], copyTCstringTooltip: \"Click here to copy TC string to clipboard\", checkBoxLabels: { consent: \"Consent\", legitimateInterest: \"Legitimate interest\", }, actions: [\"Accept All\", \"Accept Selected\", \"Reject All\"], }, thirdLayer: { confirmationForUncheck: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\", ], }, confirmationForAcceptSelected: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\", ], }, actions: [\"Cancel\", \"Yes\"], }, cookieReportLayer: { buttonTitle: \"Cookie Report\", heading: \"Cookie Reports layer header\", introductionText: \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", beforeAcceptHeader: \"Before Accepting\", afterAcceptHeader: \"After Accepting\", nameHeader: \"Name\", domainHeader: \"Domain\", descriptionHeader: \"Description\", cookieTypeHeader: \"Cookie Type\", expiryHeader: \"Expiry in days\", httpOnlyHeader: \"Http Only\", noCookieDataMessage: \"No scan results available\", noCookieDataBeforeAcceptingMsg: \"No cookies were found before Accepting the consents on this domain.\", noCookieDataAfterAcceptingMsg: \"No cookies were found after Accepting the consents on this domain \", }, commonTerms: { purposes: \"Purposes\", consent: \"Consent\", legitimateInterest: \"Legitimate interest\", specialPurposes: \"Special Purposes\", specialFeatures: \"Special Features\", features: \"Features\", policyURl: \"Policy Url\", nonTCFVendors: \"Non TCF Vendors\", vendors: \"Vendor\", customPurposes: \"Custom Purposes\", cookieMaxAge: \"Cookie max age (seconds)\", disclouserDetails: \"Details\", disclouserFetchingError: \"Unable to get Json data\", disclouserHeaderIdentifier: \"Identifier\", disclouserHeaderDomain: \"Domain\", disclouserHeaderType: \"Type\", disclosureHeaderMaxAge: \"Max Age(s)\", disclosureHeaderPurpose: \"Purposes\", cookieRefresh: \"Cookie refresh\", usesCookies: \"Uses cookies\", usesNonCookieAccess: \"Uses non cookie access\", yes: \"Yes\", no: \"No\", seconds: \"seconds\", days: \"days\", alertMessageForCopiedTcString: \"CMP Settings Copied\", }, }, style: { logoUrl: \"https://cdn.gravito.net/logos/gravito_logo_white_background.png\", primaryColor: \"orange\", secondaryColor: \"#666\", fonts: [ { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], customCSS: \"\", consentInputType: \"checkbox\", useAccordionForPurpose: true, layoutType: \"2-tabs\", disableConfirmationModal: true, showCopyTcStringButton: true, }, }; Deployment TCF CMP's can be deployed with the help of SDK V2. Add your config object to window.gravitoCMPConifg variable. window.gravitoCMPConfig = gravitoCMPConfig; Standalone TCF CMP. To add Standalone TCF CMP add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\"); }; document.body.appendChild(gravitoSDKTag); TCF CMP with backend. To add TCF CMP with backend add following values to settings section of your config object window.gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_3\", sdkVersion: 2, }, //other sections }; And add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\", \"firstParty\"); }; document.body.appendChild(gravitoSDKTag); Migrating to TCF CMP Version 3 Add settings section your config Object with following properties. var gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: false, // Set this flag to true if you want to use gravito backend with TCF CMP backendUrl: \"\", // This will be the URL of your gravito firstparty domain for backend support EX: https://gto.yourdomain.net. if left empty it will be evaluated from your hosted domain. version: \"bundle_latest_3\", // This will be the version of your TCFCMP. bundle_latest_3 is recommended sdkVersion: 2, // Don;t change this value , catchCMPEvents: false, // Set this value to true if you want to capture CMP events and generate report on https://admin.gravito.net dashborad. }, // other properties }; TCF CMP Version 3 should be deployed with gravito SDK version 2.Change your deployment script as follows. window.gravitoCMPConfig = gravitoCMPConfig; // Replace this with your config object;var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\"); // For Standalone TCF CMP // window.gravito.init(\"tcfCMP\",firstParty); // For TCF CMP with backend }; document.body.appendChild(gravitoSDKTag); TCF CMP Version 3 adds some special feature such as providing your custom html for first layer of UI, Configuring necessary consents. To use any of them please contact gravito support. Test your implementation of TCF CMP Version 3 thoroughly to ensure that all features are working as expected and that there are no issues with backend integration. Once you have confirmed that everything is working as expected, you can proceed with deploying TCF CMP Version 3 on your production website. Note Please note that this is a general guide and your specific implementation may require additional steps. It is always recommended to test your implementation thoroughly before deploying it to production. If you have any questions or issues during the migration process, please reach out to Gravito support for assistance.","title":"Version 3(Internal) (Latest)"},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#version-3internal-latest","text":"Note: Version 3 does not correspond to TCF Version 3 but it is Internal Version 3 for gravito CMP, and is TCF version 2 complaint.","title":"Version 3(Internal) (Latest)"},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#how-it-works","text":"Configuration TCF CMP can be configure and customize as per your need with the help of configuration object.You can generate this configuration object using our Admin Portal or you can create your own from scratch. Following is the example of config object for TCF CMP. window.gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: true, catchCMPEvents: true, sdkVersion: 2, userIdModule: false, backendUrl: \"\", version: \"bundle_latest_3\", }, core: { cookieName: \"TcString\", cookieExpiry: 2, useTopDomain: false, syncAfter: 1800, settingBtnClassname: \"manageSettings\", version: 2, purposeOneTreatment: true, publisherCountryCode: \"EN\", googleTcfId: 755, purposes: [ { type: \"purposes\", id: 1, }, { type: \"stacks\", id: 26, }, { type: \"purposes\", id: 10, }, ], specialFeatures: [1, 2], specialPurposes: [1, 2], features: [1, 2, 3], vendors: [2, 6, 8, 511, 11, 14, 278, 755], nonTCFVendors: [ { type: \"nonTCFVendors\", id: 2, name: \"Amazon\", description: \"description for amazon\", isConsentable: false, }, ], customPurposes: [ { type: \"customPurpose\", id: 1, name: \"Data Collection\", description: \"Gravito can collect data and can use it for better experience of its customers\", descriptionLegal: \"Gravito can collect data and can use it for better experience of its customers\", isLegitimate: true, }, { type: \"customPurpose\", id: 2, name: \"Targeting\", description: \"Gravito can use data for targeting its customers\", descriptionLegal: \"Gravito can use data for targeting its customers\", isLegitimate: false, }, ], publisherRestrictions: [ { purposeID: 1, restrictionType: \"REQUIRE_CONSENT\", vendors: [6, 12], }, { purposeID: 1, restrictionType: \"REQUIRE_CONSENT\", vendors: [8], }, { purposeID: 2, restrictionType: \"REQUIRE_CONSENT\", vendors: [8], }, ], }, text: { firstLayer: { title: \"We need your consent to provide personalized experience\", introductionText: \"Gravito and its <span id='partners-link'>third-party vendors</span> collect personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", consentableItemDescription: \"Gravito and its partners require consent for following:\", legalFooter: 'By accepting, you are allowing data processing within the service, rejection can affect the user experience. Some third-party vendors might use their legitimate interest to operate, you can object that or change other settings at any time by selecting \"Settings\" at the bottom of the page.', privacyPolicyUrl: \"https://www.gravito.net/#privacy-policy\", privacyLabel: \"Privacy Policy\", actions: [\"Settings\", \"Accept All\"], }, secondLayer: { title: \"Gravito Setting title changed\", introductionText: \"Please select from the following list of purposes to help us serve you better.\", tabLabels: [\"Purposes and Characteristics\", \"Vendors\"], copyTCstringTooltip: \"Click here to copy TC string to clipboard\", checkBoxLabels: { consent: \"Consent\", legitimateInterest: \"Legitimate interest\", }, actions: [\"Accept All\", \"Accept Selected\", \"Reject All\"], }, thirdLayer: { confirmationForUncheck: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\", ], }, confirmationForAcceptSelected: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\", ], }, actions: [\"Cancel\", \"Yes\"], }, cookieReportLayer: { buttonTitle: \"Cookie Report\", heading: \"Cookie Reports layer header\", introductionText: \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", beforeAcceptHeader: \"Before Accepting\", afterAcceptHeader: \"After Accepting\", nameHeader: \"Name\", domainHeader: \"Domain\", descriptionHeader: \"Description\", cookieTypeHeader: \"Cookie Type\", expiryHeader: \"Expiry in days\", httpOnlyHeader: \"Http Only\", noCookieDataMessage: \"No scan results available\", noCookieDataBeforeAcceptingMsg: \"No cookies were found before Accepting the consents on this domain.\", noCookieDataAfterAcceptingMsg: \"No cookies were found after Accepting the consents on this domain \", }, commonTerms: { purposes: \"Purposes\", consent: \"Consent\", legitimateInterest: \"Legitimate interest\", specialPurposes: \"Special Purposes\", specialFeatures: \"Special Features\", features: \"Features\", policyURl: \"Policy Url\", nonTCFVendors: \"Non TCF Vendors\", vendors: \"Vendor\", customPurposes: \"Custom Purposes\", cookieMaxAge: \"Cookie max age (seconds)\", disclouserDetails: \"Details\", disclouserFetchingError: \"Unable to get Json data\", disclouserHeaderIdentifier: \"Identifier\", disclouserHeaderDomain: \"Domain\", disclouserHeaderType: \"Type\", disclosureHeaderMaxAge: \"Max Age(s)\", disclosureHeaderPurpose: \"Purposes\", cookieRefresh: \"Cookie refresh\", usesCookies: \"Uses cookies\", usesNonCookieAccess: \"Uses non cookie access\", yes: \"Yes\", no: \"No\", seconds: \"seconds\", days: \"days\", alertMessageForCopiedTcString: \"CMP Settings Copied\", }, }, style: { logoUrl: \"https://cdn.gravito.net/logos/gravito_logo_white_background.png\", primaryColor: \"orange\", secondaryColor: \"#666\", fonts: [ { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], customCSS: \"\", consentInputType: \"checkbox\", useAccordionForPurpose: true, layoutType: \"2-tabs\", disableConfirmationModal: true, showCopyTcStringButton: true, }, };","title":"How it works?"},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#deployment","text":"TCF CMP's can be deployed with the help of SDK V2. Add your config object to window.gravitoCMPConifg variable. window.gravitoCMPConfig = gravitoCMPConfig;","title":"Deployment"},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#standalone-tcf-cmp","text":"To add Standalone TCF CMP add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\"); }; document.body.appendChild(gravitoSDKTag);","title":"Standalone TCF CMP."},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#tcf-cmp-with-backend","text":"To add TCF CMP with backend add following values to settings section of your config object window.gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_3\", sdkVersion: 2, }, //other sections }; And add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\", \"firstParty\"); }; document.body.appendChild(gravitoSDKTag);","title":"TCF CMP with backend."},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#migrating-to-tcf-cmp-version-3","text":"Add settings section your config Object with following properties. var gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: false, // Set this flag to true if you want to use gravito backend with TCF CMP backendUrl: \"\", // This will be the URL of your gravito firstparty domain for backend support EX: https://gto.yourdomain.net. if left empty it will be evaluated from your hosted domain. version: \"bundle_latest_3\", // This will be the version of your TCFCMP. bundle_latest_3 is recommended sdkVersion: 2, // Don;t change this value , catchCMPEvents: false, // Set this value to true if you want to capture CMP events and generate report on https://admin.gravito.net dashborad. }, // other properties }; TCF CMP Version 3 should be deployed with gravito SDK version 2.Change your deployment script as follows. window.gravitoCMPConfig = gravitoCMPConfig; // Replace this with your config object;var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\"); // For Standalone TCF CMP // window.gravito.init(\"tcfCMP\",firstParty); // For TCF CMP with backend }; document.body.appendChild(gravitoSDKTag); TCF CMP Version 3 adds some special feature such as providing your custom html for first layer of UI, Configuring necessary consents. To use any of them please contact gravito support. Test your implementation of TCF CMP Version 3 thoroughly to ensure that all features are working as expected and that there are no issues with backend integration. Once you have confirmed that everything is working as expected, you can proceed with deploying TCF CMP Version 3 on your production website. Note Please note that this is a general guide and your specific implementation may require additional steps. It is always recommended to test your implementation thoroughly before deploying it to production. If you have any questions or issues during the migration process, please reach out to Gravito support for assistance.","title":"Migrating to TCF CMP Version 3"},{"location":"Other_Features/Cookie_Scanner/","text":"To be done","title":"Cookie Scanner"},{"location":"Other_Features/Cookie_Scanner/#to-be-done","text":"","title":"To be done"},{"location":"Other_Features/GVL_Comparison/","text":"To be done","title":"GVL Comparison"},{"location":"Other_Features/GVL_Comparison/#to-be-done","text":"","title":"To be done"},{"location":"Other_Features/Prebid_User_Id_Module/","text":"Prebid User Id Module Gravito has a user module in prebid js, customers now can use Gravito\u2019s first party service and prebid js usermodule to use a persistent first party id in prebids bit stream. More details in the each section below. You can read more details available here","title":"Prebid User Id Module"},{"location":"Other_Features/Prebid_User_Id_Module/#prebid-user-id-module","text":"Gravito has a user module in prebid js, customers now can use Gravito\u2019s first party service and prebid js usermodule to use a persistent first party id in prebids bit stream. More details in the each section below. You can read more details available here","title":"Prebid User Id Module"},{"location":"Other_Features/Prebid_User_Module_init/","text":"Getting Started Gravito has a user module in prebid js, customers now can use Gravito\u2019s first party service and prebid js usermodule to use a persistent first party id in prebid\u2019s bit stream. To Add prebid user ID module add following code to your site. window.gravitoCMPConfig = { settings: { sdkVersion: 2, userIdModule: true, prebidUrl: \"your prebid.js build URL\", // url from which prebid build should be loaded. default will point to gravito's build }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { // init gravito with two comma separated parameters, firstParty and prebid // this will make sure that the first party service drops a persistent id which can be utlized in prebids bit stream. window.gravito.init(\"firstParty\", \"prebid\"); }; document.body.appendChild(gravitoSDKTag);","title":"Getting Started"},{"location":"Other_Features/Prebid_User_Module_init/#getting-started","text":"Gravito has a user module in prebid js, customers now can use Gravito\u2019s first party service and prebid js usermodule to use a persistent first party id in prebid\u2019s bit stream. To Add prebid user ID module add following code to your site. window.gravitoCMPConfig = { settings: { sdkVersion: 2, userIdModule: true, prebidUrl: \"your prebid.js build URL\", // url from which prebid build should be loaded. default will point to gravito's build }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { // init gravito with two comma separated parameters, firstParty and prebid // this will make sure that the first party service drops a persistent id which can be utlized in prebids bit stream. window.gravito.init(\"firstParty\", \"prebid\"); }; document.body.appendChild(gravitoSDKTag);","title":"Getting Started"},{"location":"Try_it_out/Playbooks/","text":"Playbooks Quick guides to get started with various deployment scenarios. Deploy basic consent management banner and wire the tags on it Register/login to https://adminv2.gravito.net Navigate to CMP > Gravito CMP configurator > New Configuration Create configuration, you will find help from content menus and tooltips Upload configuration when satisfied with the result Generate deployment script from list of configurations, by clicking script icon in front of your config. Copy the script to clipboard (to deploy via GTM or similar) or download it to be uploaded to your server If you are up to deploy via GTM, follow the steps here Otherwise embed the uploaded cmp script to your website template, third party tags that you might have need to be wrapped with custom triggers that are listening to CMP events and consent being set Add link on your website from which the user can resurface the CMP, give the link id \"manageSettings\" or whatever you specified when configuring the CMP. Alternatively you can specify the link to call window.gravitoLightCMP.openPreferences() Test that CMP opens as it should and after accept/reject click the CMP won't surface again on page reload Deploy consent management banner with first party API integration Register/login to https://adminv2.gravito.net If you have not added the domain you are up to deploy CMP to when registering, add the domain by going to Account > Register domains Add domain if needed Go to Domains > First party domains > New domain Select the domain you are planning to use CMP on, repeat the steps if you have multiple domains After you have added domain(s), you will have DNS settings to be made, add those to DNS server of your domain When you are complete with DNS settings wait few minutes (minimum) for the changes to propagate Open newly added first party domain from the list (click on Edit), check to confirm that you have done the required DNS settings and click on Validate After validation the certificate is created, repeat the steps for other domains if you added multiple Navigate to CMP > Gravito CMP configurator > New Configuration On the settings page of the configurator click on the \"Use Gravito Backend\" checkbox. you can optionally pass your first-party domain URL, else our code SDK will smartly derive it from the domain on which this configuration is deployed, We recommend keeping this field blank unless you need it You will find help from content menus and tooltipsUpload configuration when satisfied with the result. Generate deployment script from list of configurations Copy the script to clipboard (to deploy via GTM or similar) or download it to be uploaded to your server If you are up to deploy via GTM, follow the steps here Otherwise embed the uploaded cmp script to your website template, third party tags that you might have need to be wrapped with custom triggers that are listening to CMP events and consent being set Add link on your website from which the user can resurface the CMP, give the link id \"manageSettings\" or whatever you specified when configuring the CMP. Alternatively you can specify the link to call window.gravitoLightCMP.openPreferences() Validate that there is request made to https://gto. when CMP loads on your website (on first page load) Test that CMP opens as it should and after accept/reject click the CMP won't surface again on page reload","title":"Playbooks"},{"location":"Try_it_out/Playbooks/#playbooks","text":"Quick guides to get started with various deployment scenarios.","title":"Playbooks"},{"location":"Try_it_out/Playbooks/#deploy-basic-consent-management-banner-and-wire-the-tags-on-it","text":"Register/login to https://adminv2.gravito.net Navigate to CMP > Gravito CMP configurator > New Configuration Create configuration, you will find help from content menus and tooltips Upload configuration when satisfied with the result Generate deployment script from list of configurations, by clicking script icon in front of your config. Copy the script to clipboard (to deploy via GTM or similar) or download it to be uploaded to your server If you are up to deploy via GTM, follow the steps here Otherwise embed the uploaded cmp script to your website template, third party tags that you might have need to be wrapped with custom triggers that are listening to CMP events and consent being set Add link on your website from which the user can resurface the CMP, give the link id \"manageSettings\" or whatever you specified when configuring the CMP. Alternatively you can specify the link to call window.gravitoLightCMP.openPreferences() Test that CMP opens as it should and after accept/reject click the CMP won't surface again on page reload","title":"Deploy basic consent management banner and wire the tags on it"},{"location":"Try_it_out/Playbooks/#deploy-consent-management-banner-with-first-party-api-integration","text":"Register/login to https://adminv2.gravito.net If you have not added the domain you are up to deploy CMP to when registering, add the domain by going to Account > Register domains Add domain if needed Go to Domains > First party domains > New domain Select the domain you are planning to use CMP on, repeat the steps if you have multiple domains After you have added domain(s), you will have DNS settings to be made, add those to DNS server of your domain When you are complete with DNS settings wait few minutes (minimum) for the changes to propagate Open newly added first party domain from the list (click on Edit), check to confirm that you have done the required DNS settings and click on Validate After validation the certificate is created, repeat the steps for other domains if you added multiple Navigate to CMP > Gravito CMP configurator > New Configuration On the settings page of the configurator click on the \"Use Gravito Backend\" checkbox. you can optionally pass your first-party domain URL, else our code SDK will smartly derive it from the domain on which this configuration is deployed, We recommend keeping this field blank unless you need it You will find help from content menus and tooltipsUpload configuration when satisfied with the result. Generate deployment script from list of configurations Copy the script to clipboard (to deploy via GTM or similar) or download it to be uploaded to your server If you are up to deploy via GTM, follow the steps here Otherwise embed the uploaded cmp script to your website template, third party tags that you might have need to be wrapped with custom triggers that are listening to CMP events and consent being set Add link on your website from which the user can resurface the CMP, give the link id \"manageSettings\" or whatever you specified when configuring the CMP. Alternatively you can specify the link to call window.gravitoLightCMP.openPreferences() Validate that there is request made to https://gto. when CMP loads on your website (on first page load) Test that CMP opens as it should and after accept/reject click the CMP won't surface again on page reload","title":"Deploy consent management banner with first party API integration"}]}