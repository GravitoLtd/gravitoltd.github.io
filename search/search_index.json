{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Gravito's Documentation pages Looking for something else? Product Page | Customer Portal . We\u2019re leading with privacy in visitor data solutions Our mission is to deliver flexible and purpose-built technology that can operate as a standalone solution or within your cloud environment. Clients can choose tools to enhance their marketing capabilities, tailored to the maturity of their tech stack. Loved by developers and business","title":"Welcome to Gravito's Documentation pages"},{"location":"#welcome-to-gravitos-documentation-pages","text":"Looking for something else? Product Page | Customer Portal .","title":"Welcome to Gravito's Documentation pages"},{"location":"#were-leading-with-privacy-in-visitor-data-solutions","text":"Our mission is to deliver flexible and purpose-built technology that can operate as a standalone solution or within your cloud environment. Clients can choose tools to enhance their marketing capabilities, tailored to the maturity of their tech stack.","title":"We\u2019re leading with privacy in visitor data solutions"},{"location":"#loved-by-developers-and-business","text":"","title":"Loved by developers and business"},{"location":"Consent_Management/Google_consent_mode/","text":"Consent Management: Google Consent Mode Last updated: June 15, 2025 Announced: January 10, 2024 Overview Google Consent Mode allows you to adjust how your Google tags behave based on the consent status of your end users. When integrated with Gravito \u2019s TCF 2.2 CMP, it helps ensure compliance by dynamically controlling tag behavior across Google products such as Google Analytics, Google Ads, and more \u2014 without needing manual tag setup in Google Tag Manager (GTM). It is important to note that Google consent mode is not meant to be a solution to any regulatory requirement. This document explains: What Google Consent Mode is The requirements to use it with Gravito How Gravito handles tag behavior and consent signals How to test if your setup is working Getting Support What is Google Consent Mode? Google Consent Mode provides a way for websites to communicate user consent choices to Google\u2019s tags. It enables Google services to adjust data collection based on consent status, ensuring better compliance and reporting continuity. Read more here For example: If a user declines marketing cookies, ad_storage is set to denied , limiting tracking. If the user accepts analytics cookies, analytics_storage is set to granted , enabling full data collection. Understanding Basic and Advanced Modes of Google Consent Mode Google Consent Mode (GCM) offers two operational modes \u2014 Basic and Advanced \u2014 to help websites manage consent and data collection behavior: Basic Mode : Google tags are completely blocked from firing until the user provides explicit consent. No data is sent to Google unless consent is given. Advanced Mode : Google tags load immediately but adjust their behavior based on the consent signals. For example, if a user declines consent for ads, Google still receives basic (non-identifiable) interaction data, but it won\u2019t be used for personalized advertising or measurement that requires consent. Implementing the correct mode is crucial to ensure both compliance and measurement continuity. Why Google Collects Data When using Google services like Google Ads or Google Analytics, data may be collected to enable personalized advertising, performance measurement, and audience insights . Consent Mode helps ensure that such data collection aligns with the user\u2019s consent choices. For more details, refer to Google\u2019s Business Privacy Policy . Requirements To enable Google Consent Mode via Gravito CMP, you\u2019ll need: A Gravito TCF 2.2 CMP/ Intelligent CMP implementation This should be already configured and running on your site. If not, Gravito New CMP (Standard Component) setup and implementation guide(New) . Gravito New CMP (TCF Component) setup and implementation guide (New) . TCF 2.2 setup and implementation guide . Intelligent CMP setup and implementation guide . Gravito Google Consent Mode support enabled Gravito handles tag-level behavior without needing manual Google Tag Manager configuration. The required consent signals ( ad_storage , analytics_storage , etc.) are automatically injected based on user preferences. How Gravito Handles Google Consent Mode Gravito CMP is designed to dynamically manage Consent Mode with minimal configuration. It depends basically on how you implement the CMP either with the deployment script or using Gravito's GTM template available in the GTM Gallery Here How to test if your setup is working Please get in touch with Gravito support to get access to tooling which includes chrome extension's, sample script etc to validate that GCM is correctly setup on your site. Here is an excmple of the Gravito's GCM validator plugin in action. Basically, you can check from the data layer how the consents are populated, like below. This example screenshot shows that the consent were \"denied\" which later was updated to \"granted\" when user gave consent Google Consent Mode support All support issues related to implementation and working of Google Consent Mode , must be raised to Gravito's GCM support box : gcm.support(@)gravito.net","title":"Google Consent Mode"},{"location":"Consent_Management/Google_consent_mode/#consent-management-google-consent-mode","text":"Last updated: June 15, 2025 Announced: January 10, 2024","title":"Consent Management: Google Consent Mode"},{"location":"Consent_Management/Google_consent_mode/#overview","text":"Google Consent Mode allows you to adjust how your Google tags behave based on the consent status of your end users. When integrated with Gravito \u2019s TCF 2.2 CMP, it helps ensure compliance by dynamically controlling tag behavior across Google products such as Google Analytics, Google Ads, and more \u2014 without needing manual tag setup in Google Tag Manager (GTM). It is important to note that Google consent mode is not meant to be a solution to any regulatory requirement. This document explains: What Google Consent Mode is The requirements to use it with Gravito How Gravito handles tag behavior and consent signals How to test if your setup is working Getting Support","title":"Overview"},{"location":"Consent_Management/Google_consent_mode/#what-is-google-consent-mode","text":"Google Consent Mode provides a way for websites to communicate user consent choices to Google\u2019s tags. It enables Google services to adjust data collection based on consent status, ensuring better compliance and reporting continuity. Read more here For example: If a user declines marketing cookies, ad_storage is set to denied , limiting tracking. If the user accepts analytics cookies, analytics_storage is set to granted , enabling full data collection.","title":"What is Google Consent Mode?"},{"location":"Consent_Management/Google_consent_mode/#understanding-basic-and-advanced-modes-of-google-consent-mode","text":"Google Consent Mode (GCM) offers two operational modes \u2014 Basic and Advanced \u2014 to help websites manage consent and data collection behavior: Basic Mode : Google tags are completely blocked from firing until the user provides explicit consent. No data is sent to Google unless consent is given. Advanced Mode : Google tags load immediately but adjust their behavior based on the consent signals. For example, if a user declines consent for ads, Google still receives basic (non-identifiable) interaction data, but it won\u2019t be used for personalized advertising or measurement that requires consent. Implementing the correct mode is crucial to ensure both compliance and measurement continuity.","title":"Understanding Basic and Advanced Modes of Google Consent Mode"},{"location":"Consent_Management/Google_consent_mode/#why-google-collects-data","text":"When using Google services like Google Ads or Google Analytics, data may be collected to enable personalized advertising, performance measurement, and audience insights . Consent Mode helps ensure that such data collection aligns with the user\u2019s consent choices. For more details, refer to Google\u2019s Business Privacy Policy .","title":"Why Google Collects Data"},{"location":"Consent_Management/Google_consent_mode/#requirements","text":"To enable Google Consent Mode via Gravito CMP, you\u2019ll need: A Gravito TCF 2.2 CMP/ Intelligent CMP implementation This should be already configured and running on your site. If not, Gravito New CMP (Standard Component) setup and implementation guide(New) . Gravito New CMP (TCF Component) setup and implementation guide (New) . TCF 2.2 setup and implementation guide . Intelligent CMP setup and implementation guide . Gravito Google Consent Mode support enabled Gravito handles tag-level behavior without needing manual Google Tag Manager configuration. The required consent signals ( ad_storage , analytics_storage , etc.) are automatically injected based on user preferences.","title":"Requirements"},{"location":"Consent_Management/Google_consent_mode/#how-gravito-handles-google-consent-mode","text":"Gravito CMP is designed to dynamically manage Consent Mode with minimal configuration. It depends basically on how you implement the CMP either with the deployment script or using Gravito's GTM template available in the GTM Gallery Here","title":"How Gravito Handles Google Consent Mode"},{"location":"Consent_Management/Google_consent_mode/#how-to-test-if-your-setup-is-working","text":"Please get in touch with Gravito support to get access to tooling which includes chrome extension's, sample script etc to validate that GCM is correctly setup on your site. Here is an excmple of the Gravito's GCM validator plugin in action. Basically, you can check from the data layer how the consents are populated, like below. This example screenshot shows that the consent were \"denied\" which later was updated to \"granted\" when user gave consent","title":"How to test if your setup is working"},{"location":"Consent_Management/Google_consent_mode/#google-consent-mode-support","text":"All support issues related to implementation and working of Google Consent Mode , must be raised to Gravito's GCM support box : gcm.support(@)gravito.net","title":"Google Consent Mode support"},{"location":"Consent_Management/Iab_tcf/","text":"IAB Transparency and Consent Framework (TCF) Last updated: April 9, 2025 Overview The Interactive Advertising Bureau (IAB) Transparency and Consent Framework (TCF) is a standardized framework designed to assist all parties in the digital advertising supply chain in complying with European data protection laws, notably the General Data Protection Regulation (GDPR) and the ePrivacy Directive . Gravito CMP provides a TCF 2.2 compliant consent management platform recognized by IAB with ID 302 . With Gravito you can customize the look and feel of your CMP so that it blends well with your website. Gravito TCF 2.2 CMP is also listed as one of the Google Certified TCF CMP's ( Web and App ) Purpose of the TCF The TCF aims to: Standardize the process of obtaining, managing, and communicating user consent for data processing in digital advertising. Facilitate Compliance with legal requirements by providing a common language and set of protocols for publishers, advertisers, and technology vendors. Enhance Transparency by informing users about how their data will be used and obtaining their explicit consent. Key Components Global Vendor List (GVL): A registry of vendors participating in the TCF, detailing their data processing purposes and legal bases. Consent Management Platform (CMP): Tools or services that help publishers collect, manage, and transmit user consent choices to vendors in a standardized manner. Transparency & Consent String (TC String): A compressed, encoded data structure that records user consent choices and preferences, which is then shared with vendors to inform them of the user's decisions. Evolution of the TCF TCF v1.1 Launched: April 2018 Objective: Establish an initial framework for managing user consent in line with GDPR requirements. TCF v2.0 Launched: August 2019 Enhancements: Provided users with more granular control over data processing purposes. Allowed users to object to data processing based on legitimate interests. Improved transparency regarding vendors' data processing activities. TCF v2.1 Launched: August 2020 Updates: Aligned the framework with the Planet49 ruling by the Court of Justice of the European Union. Standardized the disclosure of the duration of operation of cookies. TCF v2.2 Launched: May 16, 2023 Key Changes: Removal of Legitimate Interest for Certain Purposes: Vendors can no longer use legitimate interest as a legal basis for processing personal data for advertising and content personalization; consent is now required. Enhanced Transparency: Introduction of user-friendly descriptions and real-use case examples to better inform users about data processing purposes. Standardized Vendor Information: Vendors must provide detailed information about data categories collected, retention periods, and any legitimate interests claimed. Disclosure of Vendor Count: Consent Management Platforms (CMPs) are required to disclose the total number of vendors seeking to establish a legal basis on the first layer of their user interfaces. Facilitated Withdrawal of Consent: Users must be able to easily withdraw consent, with CMPs ensuring that their interfaces can be resurfaced for users to change their preferences at any time. Implications for Stakeholders Publishers: Must ensure that their CMPs are updated to comply with TCF v2.2 requirements. Need to provide clear and accessible information to users about data processing activities and their rights. Advertisers and Vendors: Required to register with the GVL and adhere to the updated policies. Must rely solely on user consent for processing personal data for advertising and content personalization purposes. Consent Management Platforms (CMPs): Need to implement the new user interface and transparency requirements. Ensure mechanisms are in place for users to easily withdraw consent. Additional Resources IAB Europe: TCF v2.2 Launch Announcement IAB Europe: Understanding the Transparency & Consent Framework v2.2 IAB Europe: Transparency & Consent Framework Overview Note: This document reflects the state of the IAB TCF as of April 9, 2025. For the most current information and guidance, please refer to the official IAB Europe resources linked above.","title":"IAB TCF"},{"location":"Consent_Management/Iab_tcf/#iab-transparency-and-consent-framework-tcf","text":"Last updated: April 9, 2025","title":"IAB Transparency and Consent Framework (TCF)"},{"location":"Consent_Management/Iab_tcf/#overview","text":"The Interactive Advertising Bureau (IAB) Transparency and Consent Framework (TCF) is a standardized framework designed to assist all parties in the digital advertising supply chain in complying with European data protection laws, notably the General Data Protection Regulation (GDPR) and the ePrivacy Directive . Gravito CMP provides a TCF 2.2 compliant consent management platform recognized by IAB with ID 302 . With Gravito you can customize the look and feel of your CMP so that it blends well with your website. Gravito TCF 2.2 CMP is also listed as one of the Google Certified TCF CMP's ( Web and App )","title":"Overview"},{"location":"Consent_Management/Iab_tcf/#purpose-of-the-tcf","text":"The TCF aims to: Standardize the process of obtaining, managing, and communicating user consent for data processing in digital advertising. Facilitate Compliance with legal requirements by providing a common language and set of protocols for publishers, advertisers, and technology vendors. Enhance Transparency by informing users about how their data will be used and obtaining their explicit consent.","title":"Purpose of the TCF"},{"location":"Consent_Management/Iab_tcf/#key-components","text":"Global Vendor List (GVL): A registry of vendors participating in the TCF, detailing their data processing purposes and legal bases. Consent Management Platform (CMP): Tools or services that help publishers collect, manage, and transmit user consent choices to vendors in a standardized manner. Transparency & Consent String (TC String): A compressed, encoded data structure that records user consent choices and preferences, which is then shared with vendors to inform them of the user's decisions.","title":"Key Components"},{"location":"Consent_Management/Iab_tcf/#evolution-of-the-tcf","text":"","title":"Evolution of the TCF"},{"location":"Consent_Management/Iab_tcf/#tcf-v11","text":"Launched: April 2018 Objective: Establish an initial framework for managing user consent in line with GDPR requirements.","title":"TCF v1.1"},{"location":"Consent_Management/Iab_tcf/#tcf-v20","text":"Launched: August 2019 Enhancements: Provided users with more granular control over data processing purposes. Allowed users to object to data processing based on legitimate interests. Improved transparency regarding vendors' data processing activities.","title":"TCF v2.0"},{"location":"Consent_Management/Iab_tcf/#tcf-v21","text":"Launched: August 2020 Updates: Aligned the framework with the Planet49 ruling by the Court of Justice of the European Union. Standardized the disclosure of the duration of operation of cookies.","title":"TCF v2.1"},{"location":"Consent_Management/Iab_tcf/#tcf-v22","text":"Launched: May 16, 2023 Key Changes: Removal of Legitimate Interest for Certain Purposes: Vendors can no longer use legitimate interest as a legal basis for processing personal data for advertising and content personalization; consent is now required. Enhanced Transparency: Introduction of user-friendly descriptions and real-use case examples to better inform users about data processing purposes. Standardized Vendor Information: Vendors must provide detailed information about data categories collected, retention periods, and any legitimate interests claimed. Disclosure of Vendor Count: Consent Management Platforms (CMPs) are required to disclose the total number of vendors seeking to establish a legal basis on the first layer of their user interfaces. Facilitated Withdrawal of Consent: Users must be able to easily withdraw consent, with CMPs ensuring that their interfaces can be resurfaced for users to change their preferences at any time.","title":"TCF v2.2"},{"location":"Consent_Management/Iab_tcf/#implications-for-stakeholders","text":"Publishers: Must ensure that their CMPs are updated to comply with TCF v2.2 requirements. Need to provide clear and accessible information to users about data processing activities and their rights. Advertisers and Vendors: Required to register with the GVL and adhere to the updated policies. Must rely solely on user consent for processing personal data for advertising and content personalization purposes. Consent Management Platforms (CMPs): Need to implement the new user interface and transparency requirements. Ensure mechanisms are in place for users to easily withdraw consent.","title":"Implications for Stakeholders"},{"location":"Consent_Management/Iab_tcf/#additional-resources","text":"IAB Europe: TCF v2.2 Launch Announcement IAB Europe: Understanding the Transparency & Consent Framework v2.2 IAB Europe: Transparency & Consent Framework Overview Note: This document reflects the state of the IAB TCF as of April 9, 2025. For the most current information and guidance, please refer to the official IAB Europe resources linked above.","title":"Additional Resources"},{"location":"Consent_Management/Microsoft_consent_mode/","text":"Consent Management: Microsoft Consent Mode Last updated: 06/05/2025 Announced: 05/06/2025 What is Microsoft UET Mode? UET Consent Mode lets you adjust UET cookie access based on the consent status of your users. This enhances the privacy capabilities of UET and gives you control over whether first and third-party cookies are stored. For the purposes of UET Consent Mode, first-party cookies are those created by the advertiser domain (your website), and third-party cookies are created by Microsoft Advertising (Bing.com). How does UET Consent Mode work? Consent Mode is set via a property in UET called ad_storage . The possible values for ad_storage are: Value for ad_storage Description granted First and third-party cookies may be read and written for UET. If no default is set, UET uses granted by default. denied First-party cookies are not read nor written for UET. Third-party cookies are not written. Third-party cookies are read-only for fraud and spam purposes\u2014not for advertising purposes. Additional Resources Based on the CMP you are using, please refer to below setup documentation for configuring Microsoft Consent Mode. Gravito New CMP (Standard Component) setup and implementation guide . Gravito New CMP (TCF Component) setup and implementation guide . Gravito Intelligent CMP Gravito TCF CMP Official Microsoft Documentation","title":"Microsoft Consent Mode"},{"location":"Consent_Management/Microsoft_consent_mode/#consent-management-microsoft-consent-mode","text":"Last updated: 06/05/2025 Announced: 05/06/2025","title":"Consent Management: Microsoft Consent Mode"},{"location":"Consent_Management/Microsoft_consent_mode/#what-is-microsoft-uet-mode","text":"UET Consent Mode lets you adjust UET cookie access based on the consent status of your users. This enhances the privacy capabilities of UET and gives you control over whether first and third-party cookies are stored. For the purposes of UET Consent Mode, first-party cookies are those created by the advertiser domain (your website), and third-party cookies are created by Microsoft Advertising (Bing.com).","title":"What is Microsoft UET Mode?"},{"location":"Consent_Management/Microsoft_consent_mode/#how-does-uet-consent-mode-work","text":"Consent Mode is set via a property in UET called ad_storage . The possible values for ad_storage are: Value for ad_storage Description granted First and third-party cookies may be read and written for UET. If no default is set, UET uses granted by default. denied First-party cookies are not read nor written for UET. Third-party cookies are not written. Third-party cookies are read-only for fraud and spam purposes\u2014not for advertising purposes.","title":"How does UET Consent Mode work?"},{"location":"Consent_Management/Microsoft_consent_mode/#additional-resources","text":"Based on the CMP you are using, please refer to below setup documentation for configuring Microsoft Consent Mode. Gravito New CMP (Standard Component) setup and implementation guide . Gravito New CMP (TCF Component) setup and implementation guide . Gravito Intelligent CMP Gravito TCF CMP Official Microsoft Documentation","title":"Additional Resources"},{"location":"Getting_started/Frequently_Asked_Questions/","text":"Frequently Asked Questions Frequently Asked Questions (FAQ) \u2013 Gravito First-Party Identifiers, Gravito Intelligent CMP and TCF 2.2 CMP Banner . 1. What is Gravito? Gravito is more than just a Consent Banner provider for websites. That being said, it offers both TCF (Transparency & Consent Framework 2.2 ) certified Consent Management Platforms (CMPs) for publisher websites and CMPs for normal retail and ecommerce websites. 2. What is a Consent Banner? A Consent Banner is a pop-up or notification that appears on a website, informing users about the website\u2019s data collection and requesting their consent for data processing activities, such as cookies and tracking. 3. What is TCF Certification? TCF stands for Transparency & Consent Framework, a set of standards developed by the IAB (Interactive Advertising Bureau) Europe to help websites and advertisers comply with GDPR (General Data Protection Regulation) requirements related to data privacy and user consent. Gravito is a Iab certified TCF CMP (Id 302). 4. How does Gravito\u2019s TCF certified CMP benefit publishers? Gravito\u2019s TCF certified CMP helps publishers comply with GDPR by providing a robust consent management solution that ensures user consent is obtained for data processing activities. This can help publishers avoid potential legal issues and maintain a trustworthy reputation with their users. 5. What features does Gravito\u2019s CMP offer for retail and ecommerce websites? Gravito\u2019s CMP for retail and ecommerce websites is designed to make it easy for these businesses to implement and manage consent banners. Some key features include customizable banners, cookie consent management, and analytics to monitor user consent preferences. 6. Why is it important for a CMP to be easy to implement? Easy implementation ensures that website owners and administrators can quickly integrate the consent banner into their websites without significant technical challenges. This reduces the time and effort required to become GDPR compliant. 7. What does \u201cmade in Finland with the Nordic data mindset\u201d mean? Gravito\u2019s products are developed in Finland, and they adhere to a Nordic data mindset, which emphasizes strong data privacy and protection principles. This ensures that the solutions prioritize user consent and data security. 8. How can I get started with Gravito\u2019s CMP for my website? You can get started with Gravito by contacting their sales or support team through their website. They will provide you with the necessary information and guidance to implement their CMP on your website. 9. Is Gravito suitable for both small and large websites? Yes, Gravito\u2019s CMP solutions are designed to cater to websites of all sizes, from small blogs to large e-commerce platforms. Their flexibility allows customization to suit different website requirements. 10. How does Gravito ensure compliance with evolving data privacy regulations? Gravito keeps its CMPs updated to comply with evolving data privacy regulations, such as GDPR and future changes in the TCF. They stay informed about industry standards and best practices to ensure their solutions remain compliant. 11. Does Gravito offer customer support and training? Yes, Gravito provides customer support and may offer training resources to assist users in implementing and managing their CMP effectively. 12. Is Gravito\u2019s CMP compatible with different website platforms and content management systems (CMS)? Gravito\u2019s CMP solutions are designed to be compatible with various website platforms and CMS, making them versatile for different website setups. Please note that this FAQ document provides general information about Gravito and its Consent Banner solutions. For specific details and inquiries, we recommend contacting us directly..","title":"Frequently Asked Questions"},{"location":"Getting_started/Frequently_Asked_Questions/#frequently-asked-questions","text":"Frequently Asked Questions (FAQ) \u2013 Gravito First-Party Identifiers, Gravito Intelligent CMP and TCF 2.2 CMP Banner . 1. What is Gravito? Gravito is more than just a Consent Banner provider for websites. That being said, it offers both TCF (Transparency & Consent Framework 2.2 ) certified Consent Management Platforms (CMPs) for publisher websites and CMPs for normal retail and ecommerce websites. 2. What is a Consent Banner? A Consent Banner is a pop-up or notification that appears on a website, informing users about the website\u2019s data collection and requesting their consent for data processing activities, such as cookies and tracking. 3. What is TCF Certification? TCF stands for Transparency & Consent Framework, a set of standards developed by the IAB (Interactive Advertising Bureau) Europe to help websites and advertisers comply with GDPR (General Data Protection Regulation) requirements related to data privacy and user consent. Gravito is a Iab certified TCF CMP (Id 302). 4. How does Gravito\u2019s TCF certified CMP benefit publishers? Gravito\u2019s TCF certified CMP helps publishers comply with GDPR by providing a robust consent management solution that ensures user consent is obtained for data processing activities. This can help publishers avoid potential legal issues and maintain a trustworthy reputation with their users. 5. What features does Gravito\u2019s CMP offer for retail and ecommerce websites? Gravito\u2019s CMP for retail and ecommerce websites is designed to make it easy for these businesses to implement and manage consent banners. Some key features include customizable banners, cookie consent management, and analytics to monitor user consent preferences. 6. Why is it important for a CMP to be easy to implement? Easy implementation ensures that website owners and administrators can quickly integrate the consent banner into their websites without significant technical challenges. This reduces the time and effort required to become GDPR compliant. 7. What does \u201cmade in Finland with the Nordic data mindset\u201d mean? Gravito\u2019s products are developed in Finland, and they adhere to a Nordic data mindset, which emphasizes strong data privacy and protection principles. This ensures that the solutions prioritize user consent and data security. 8. How can I get started with Gravito\u2019s CMP for my website? You can get started with Gravito by contacting their sales or support team through their website. They will provide you with the necessary information and guidance to implement their CMP on your website. 9. Is Gravito suitable for both small and large websites? Yes, Gravito\u2019s CMP solutions are designed to cater to websites of all sizes, from small blogs to large e-commerce platforms. Their flexibility allows customization to suit different website requirements. 10. How does Gravito ensure compliance with evolving data privacy regulations? Gravito keeps its CMPs updated to comply with evolving data privacy regulations, such as GDPR and future changes in the TCF. They stay informed about industry standards and best practices to ensure their solutions remain compliant. 11. Does Gravito offer customer support and training? Yes, Gravito provides customer support and may offer training resources to assist users in implementing and managing their CMP effectively. 12. Is Gravito\u2019s CMP compatible with different website platforms and content management systems (CMS)? Gravito\u2019s CMP solutions are designed to be compatible with various website platforms and CMS, making them versatile for different website setups. Please note that this FAQ document provides general information about Gravito and its Consent Banner solutions. For specific details and inquiries, we recommend contacting us directly..","title":"Frequently Asked Questions"},{"location":"Getting_started/Register/","text":"Register Before you can start using Gravito features you will need to register yourself in the Gravito portal. Head to https://adminv2.gravito.net and enter your email you want to use with Gravito: After submission you will receive an email with PIN code, enter that to application: After successful login Gravito needs to know few more details about your business: After completion you will land to Gravito administration application: If you have colleagues to invite to work on the same domain(s) and/or business account, head to upper right corner and click on \u201c Account \u201c. You will find \u201c Team \u201d option: Fill in the email address you want to invite and set the domain access as needed : After submission the invitee should receive an email containing link to activate the access to the business account.","title":"Register"},{"location":"Getting_started/Register/#register","text":"Before you can start using Gravito features you will need to register yourself in the Gravito portal. Head to https://adminv2.gravito.net and enter your email you want to use with Gravito: After submission you will receive an email with PIN code, enter that to application: After successful login Gravito needs to know few more details about your business: After completion you will land to Gravito administration application: If you have colleagues to invite to work on the same domain(s) and/or business account, head to upper right corner and click on \u201c Account \u201c. You will find \u201c Team \u201d option: Fill in the email address you want to invite and set the domain access as needed : After submission the invitee should receive an email containing link to activate the access to the business account.","title":"Register"},{"location":"Getting_started/Release_Notes/","text":"Release Notes Stay up to date with our latest releases! Gravito\u2019s release notes are generally divided as different category as development happens constantly under all categories. You can jump to specific release notes here Gravito CMP Latest Gravito Intelligent CMP (Only applicable to existing deployments) Gravito TCF 2.2 CMP (Only applicable to existing deployments) Gravito SDK Here you can find more about the general product updates Product Release notes : Release notes: Sprint 81 - 10/06/2025 New Latest version of Gravito CMP and its modular Configurator . This is the latest version of Gravito and is a powerful, new tool from Gravito designed for ultimate customizability and flexibility. It provides a single, consistent setup-to-deployment process for all CMP frameworks, making consent management smoother than ever! Existing versions of CMP will continue to function. Possibility of Custom Tabs on the CMP. Release notes: Sprint 80 - 06/05/2025 Added support for Microsoft's universal Tracking (UET) and GCM V2 Basic/Advanced setup in the Gravito Intelligent and TCF CMP configurator. UI improvements in PRO CMP configurator for better user experience. Release notes: Sprint 79 - 15/04/2025 Added GCM-V2 default setup for Gravito CMP, TCF CMP & Pro Gravito CMP in their respective configurators. Improved Reporting UI for better user experience and accurate data representation. Release notes: Sprint 78 - 22/01/2025 In the latest version , based on feedback collected from our customers we have modified some of the names and order of options in the configurator to keep things more understandable. Gravito CMP Configurator: The step names in configurator are changed as follows to better describe its purpose Core => Consent Categories Text => Banner Content style => Appearance A new validation layer has been added which checks config for mandatory values and validity of privacy URL. It also displays report of errors found along with their location. The sequence \"Consent Categories\" & \"Setting\" section has been changed along with their internal order keeping in mind the practicality of its occurrence. Some user irrelevant configurations have been removed or placed under advance section to reduce complexity & confusion. TCF CMP Configurator: The step names in configurator are changes as follows to better describe its purpose Core => TCF Settings Text => Banner Content style => Appearance A new validation layer has been added which checks config for mandatory values and validity of privacy URL. It also displays report of errors found along with their location. The sequence \"TCF Settings\" & \"Setting\" section has been changed along with their internal order keeping in mind the practicality of its occurrence Some user irrelevant configurations have been removed or placed under advance section to reduce complexity & confusion. Manage Cookie Scan: Added new manage cookie scan feature to check and correct cookies found during scan. Also a user can add or remove domains where cookie scan has to be performed. user can also add new cookies manually in the database. These cookies will be displayed under the consents based on their category. Release notes: Sprint 77 - 13/08/2024 Generate and manage Data Access tokens (in Manage Account section) Optimization and refactoring in Gravito & TCF CMP Configurator Removed the customer admin checkbox option (user will be always accepted as customer admin) Support for Dutch translations in TCF configurator. Cookie disclaimers can now be added to each of the Non-TCF Vendor via TCF Configurator. Configurations related to Pixel Requests section on cookie report layer can now be configured using TCF configurator. Both TCF and Gravito configurator are now setup to create V5 configs that use SDK version 3. Release notes: Sprint 76 - 12/06/2024 Dashboard charts are now split into 2 sections ie. \"Visitor Statistics\" & \"CMP Statistics\". Browser and Domain table merged to show domain specific browser statistics in reporting. newly added Firstparty & device statistics for dashboard and compare trends Renaming and beaytification of dashboard content. Domain group creation and management feature has been added. Domain group selector/filter for dashboard & reporting. \"Guide Me\" documentation upgradation. Bug fixes & Optimization changes. Release Notes : Sprint 75 (10/04/2024) Domain Grouping: To see stats of a group of domains. For. eg. Publisher groups. Available Under Domain -> Manage Domain groups Allows you to manage different domain groups with overlap of domains Available for selection under Dashboard and Compare trends. \ud83d\udcc5 Date-wise filter Dashboard Compare trends Reporting section \u201cConsent Data\u201d Added note stating that reporting data is from past 60 days Unnecessary app bar options and filters are removed in CMP(TCF & Gravito) configurator section. Removed ledger tab in reporting section. (As Obsolete data) Changed names of tabs in reporting section Have renamed to First Party and Third party context data \u2139 Added tool tip for sub-tabs containing some helper text. Other smaller bug fixes and minor improvements Release Notes: Sprint 74 (26/03/2024) Support for German and Polish Language in Gravito Intelligent CMP Bug fixes and minor enhancements","title":"Release Notes"},{"location":"Getting_started/Release_Notes/#release-notes","text":"Stay up to date with our latest releases! Gravito\u2019s release notes are generally divided as different category as development happens constantly under all categories. You can jump to specific release notes here Gravito CMP Latest Gravito Intelligent CMP (Only applicable to existing deployments) Gravito TCF 2.2 CMP (Only applicable to existing deployments) Gravito SDK Here you can find more about the general product updates","title":"Release Notes"},{"location":"Getting_started/Release_Notes/#product-release-notes","text":"","title":"Product Release notes :"},{"location":"Getting_started/Release_Notes/#release-notes-sprint-81-10062025-new","text":"Latest version of Gravito CMP and its modular Configurator . This is the latest version of Gravito and is a powerful, new tool from Gravito designed for ultimate customizability and flexibility. It provides a single, consistent setup-to-deployment process for all CMP frameworks, making consent management smoother than ever! Existing versions of CMP will continue to function. Possibility of Custom Tabs on the CMP.","title":"Release notes: Sprint 81 - 10/06/2025 New"},{"location":"Getting_started/Release_Notes/#release-notes-sprint-80-06052025","text":"Added support for Microsoft's universal Tracking (UET) and GCM V2 Basic/Advanced setup in the Gravito Intelligent and TCF CMP configurator. UI improvements in PRO CMP configurator for better user experience.","title":"Release notes: Sprint 80 - 06/05/2025"},{"location":"Getting_started/Release_Notes/#release-notes-sprint-79-15042025","text":"Added GCM-V2 default setup for Gravito CMP, TCF CMP & Pro Gravito CMP in their respective configurators. Improved Reporting UI for better user experience and accurate data representation.","title":"Release notes: Sprint 79 - 15/04/2025"},{"location":"Getting_started/Release_Notes/#release-notes-sprint-78-22012025","text":"In the latest version , based on feedback collected from our customers we have modified some of the names and order of options in the configurator to keep things more understandable. Gravito CMP Configurator: The step names in configurator are changed as follows to better describe its purpose Core => Consent Categories Text => Banner Content style => Appearance A new validation layer has been added which checks config for mandatory values and validity of privacy URL. It also displays report of errors found along with their location. The sequence \"Consent Categories\" & \"Setting\" section has been changed along with their internal order keeping in mind the practicality of its occurrence. Some user irrelevant configurations have been removed or placed under advance section to reduce complexity & confusion. TCF CMP Configurator: The step names in configurator are changes as follows to better describe its purpose Core => TCF Settings Text => Banner Content style => Appearance A new validation layer has been added which checks config for mandatory values and validity of privacy URL. It also displays report of errors found along with their location. The sequence \"TCF Settings\" & \"Setting\" section has been changed along with their internal order keeping in mind the practicality of its occurrence Some user irrelevant configurations have been removed or placed under advance section to reduce complexity & confusion. Manage Cookie Scan: Added new manage cookie scan feature to check and correct cookies found during scan. Also a user can add or remove domains where cookie scan has to be performed. user can also add new cookies manually in the database. These cookies will be displayed under the consents based on their category.","title":"Release notes: Sprint 78 - 22/01/2025"},{"location":"Getting_started/Release_Notes/#release-notes-sprint-77-13082024","text":"Generate and manage Data Access tokens (in Manage Account section) Optimization and refactoring in Gravito & TCF CMP Configurator Removed the customer admin checkbox option (user will be always accepted as customer admin) Support for Dutch translations in TCF configurator. Cookie disclaimers can now be added to each of the Non-TCF Vendor via TCF Configurator. Configurations related to Pixel Requests section on cookie report layer can now be configured using TCF configurator. Both TCF and Gravito configurator are now setup to create V5 configs that use SDK version 3.","title":"Release notes: Sprint 77 - 13/08/2024"},{"location":"Getting_started/Release_Notes/#release-notes-sprint-76-12062024","text":"Dashboard charts are now split into 2 sections ie. \"Visitor Statistics\" & \"CMP Statistics\". Browser and Domain table merged to show domain specific browser statistics in reporting. newly added Firstparty & device statistics for dashboard and compare trends Renaming and beaytification of dashboard content. Domain group creation and management feature has been added. Domain group selector/filter for dashboard & reporting. \"Guide Me\" documentation upgradation. Bug fixes & Optimization changes.","title":"Release notes: Sprint 76 - 12/06/2024"},{"location":"Getting_started/Release_Notes/#release-notes-sprint-75-10042024","text":"Domain Grouping: To see stats of a group of domains. For. eg. Publisher groups. Available Under Domain -> Manage Domain groups Allows you to manage different domain groups with overlap of domains Available for selection under Dashboard and Compare trends. \ud83d\udcc5 Date-wise filter Dashboard Compare trends Reporting section \u201cConsent Data\u201d Added note stating that reporting data is from past 60 days Unnecessary app bar options and filters are removed in CMP(TCF & Gravito) configurator section. Removed ledger tab in reporting section. (As Obsolete data) Changed names of tabs in reporting section Have renamed to First Party and Third party context data \u2139 Added tool tip for sub-tabs containing some helper text. Other smaller bug fixes and minor improvements","title":"Release Notes : Sprint 75 (10/04/2024)"},{"location":"Getting_started/Release_Notes/#release-notes-sprint-74-26032024","text":"Support for German and Polish Language in Gravito Intelligent CMP Bug fixes and minor enhancements","title":"Release Notes: Sprint 74 (26/03/2024)"},{"location":"Getting_started/Support/","text":"Support All support cases and issues are handled by the support team of Gravito or by technology partners. In case you need support please send us email at support@gravito.net Be part of our community? Join us on our Discord Channel here","title":"Support"},{"location":"Getting_started/Support/#support","text":"All support cases and issues are handled by the support team of Gravito or by technology partners. In case you need support please send us email at support@gravito.net","title":"Support"},{"location":"Getting_started/Support/#be-part-of-our-community","text":"Join us on our Discord Channel here","title":"Be part of our community?"},{"location":"Gravito_API/CustomerdataApi/","text":"Customer data access API Gravito provides an easy access to the customer data that gravito stores in its backend for the customers who are using Gravito's first party capabilities. Gravito provides an api using with a customer can fetch data for the last 7 days. Create an access token In order to access the customer data using api, you need to generate an access token using Gravito's Admin portal. Login to Admin portal and go to account section of the of the portal and select Data Access Tokens menu. In order to generate a new token, click on the \"Generate New Access Token\" button. It will generate a new token and it will be available in the list below. You can generate a new token when ever you wish to, to see the token click on \"Show Token\" icon, it will show the token and you would be able to copy active token in the clipboard. How to access the customer data? Gravito provides an open api, using which customer data can be accessed. This api returns the customer data for one domain, following details has to be passed to the api. domainName (name of the domain for this you are fetch data ex. gravito.net) access token (gravito access token generated on Admin Portal following the steps outlined in above section, this has to be passed in request header) gravito version (version of the Gravito's first party service that you are using, it will default to v3 if this header is not passed.) (function () { var xhr = new XMLHttpRequest(); xhr.open(\"GET\", 'https://apiv2.gravito.net/api/gp/gravitocustomerdata?domainName=<yourdomain>', true); xhr.withCredentials = true; xhr.setRequestHeader('gravitoaccess', '<your_gravitoaccess_token_generated on admin portal>'); xhr.setRequestHeader('gravitoversion', '<your_firstparty_api_version>'); xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"GET response : \" + response.target.response); } } xhr.send(); })(); API Reponse This api will return data into following structure [ { \"referer\": \"gravito.net\", \"message\": \"{\\\"i\\\":\\\"dc65b539-dd53-4a4a-a9fc-b1ab2a3c931a\\\",\\\"r\\\":\\\"gravito.net\\\",\\\"v\\\":\\\"v3\\\",\\\"e\\\":{\\\"id1\\\":\\\"abcd\\\",\\\"matchOnId\\\":\\\"Id001\\\"},\\\"k\\\":[],\\\"c\\\":[{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642690365},{\\\"i\\\":\\\"m\\\",\\\"c\\\":\\\"consent2\\\",\\\"s\\\":true,\\\"t\\\":1642690365},{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642691322},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":true,\\\"t\\\":1642691322},{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642691342},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":true,\\\"t\\\":1642691342},{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642691353},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":false,\\\"t\\\":1642691353},{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642691387},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":false,\\\"t\\\":1642691387},{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642691406},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":false,\\\"t\\\":1642691406}]}\" }, { \"referer\": \"gravito.net\", \"message\": \"{\\\"i\\\":\\\"70624636-dc77-484f-af61-8ebbb646fb80\\\",\\\"r\\\":\\\"gravito.net\\\",\\\"v\\\":\\\"v3\\\",\\\"e\\\":{\\\"id1\\\":\\\"abc\\\",\\\"matchOnId\\\":\\\"gId001\\\"},\\\"k\\\":[{\\\"i\\\":\\\"ab7cvVsef9\\\",\\\"k\\\":\\\"GAID\\\",\\\"v\\\":\\\"ab7cvVsef9\\\",\\\"t\\\":1642693204},{\\\"i\\\":\\\"alhsldasdlfa-asdkasdyfsh\\\",\\\"k\\\":\\\"GMID\\\",\\\"v\\\":\\\"alhsldasdlfa-asdkasdyfsh\\\",\\\"t\\\":1642693204},{\\\"i\\\":\\\"alasd333ldasdlfa-dasdh\\\",\\\"k\\\":\\\"KID\\\",\\\"v\\\":\\\"alasd333ldasdlfa-dasdh\\\",\\\"t\\\":1642693204}],\\\"c\\\":[{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":true,\\\"t\\\":1642693204},{\\\"i\\\":\\\"m\\\",\\\"c\\\":\\\"consent2\\\",\\\"s\\\":false,\\\"t\\\":1642693204},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":true,\\\"t\\\":1642693204}]}\" }, { \"referer\": \"gravito.net\", \"message\": \"{\\\"i\\\":\\\"e20e3759-b180-4a3c-9af1-1dc6a86a1c99\\\",\\\"r\\\":\\\"gravito.net\\\",\\\"v\\\":\\\"v3\\\",\\\"e\\\":{\\\"gravitoData\\\":\\\"{\\\\\\\"TCString\\\\\\\":\\\\\\\"CPVMwMAPVMwMABUAJAFICECsAP_AAH_AAApAHxQIwAFgAQAAqABkADwAIAAZAA0AB8AEQAI4ATwAqABbADmAH4AQQAhABMADRAGyAQgAiIBFgCRAE7ALSAYEAxQB1AD9AJkAWyAvMB8QHxQHwAFgAVAAyAB4AEAAMgAaAA-F5jIAQC8wHxDoCoACwAKgAZABAADIAGgAPgAiABPADmAH4ATAA0QBsgEWALSAYoA6gCZAFsgLzIQBgAFgAZALSAYoA6gC2SUAgABYAGQAiADZALSAYoA6gC8ykA8ABYAFQAMgAgABkADQAIgATwA5gB-AGiANkAiwBigF5gAAA.YAAAAAAAAMAA\\\\\\\",\\\\\\\"NonTCFVendors\\\\\\\":[{\\\\\\\"id\\\\\\\":1,\\\\\\\"name\\\\\\\":\\\\\\\"Facebook\\\\\\\",\\\\\\\"consent\\\\\\\":true},{\\\\\\\"id\\\\\\\":3,\\\\\\\"name\\\\\\\":\\\\\\\"Google\\\\\\\",\\\\\\\"consent\\\\\\\":true},{\\\\\\\"id\\\\\\\":9,\\\\\\\"name\\\\\\\":\\\\\\\"Twitter\\\\\\\",\\\\\\\"consent\\\\\\\":true},{\\\\\\\"id\\\\\\\":10,\\\\\\\"name\\\\\\\":\\\\\\\"Wordpress\\\\\\\",\\\\\\\"consent\\\\\\\":true},{\\\\\\\"id\\\\\\\":15,\\\\\\\"name\\\\\\\":\\\\\\\"Linkedin\\\\\\\",\\\\\\\"consent\\\\\\\":true},{\\\\\\\"id\\\\\\\":16,\\\\\\\"name\\\\\\\":\\\\\\\"Microsoft\\\\\\\",\\\\\\\"consent\\\\\\\":true},]}\\\",\\\"matchOnId\\\":\\\"11fb248d7984777b5d956057f160ca3d636f1f6e12f91bc365a2ca6901de4f9e\\\"},\\\"k\\\":[],\\\"c\\\":[]}\" } ]","title":"Customer Data API"},{"location":"Gravito_API/CustomerdataApi/#customer-data-access-api","text":"Gravito provides an easy access to the customer data that gravito stores in its backend for the customers who are using Gravito's first party capabilities. Gravito provides an api using with a customer can fetch data for the last 7 days. Create an access token In order to access the customer data using api, you need to generate an access token using Gravito's Admin portal. Login to Admin portal and go to account section of the of the portal and select Data Access Tokens menu. In order to generate a new token, click on the \"Generate New Access Token\" button. It will generate a new token and it will be available in the list below. You can generate a new token when ever you wish to, to see the token click on \"Show Token\" icon, it will show the token and you would be able to copy active token in the clipboard. How to access the customer data? Gravito provides an open api, using which customer data can be accessed. This api returns the customer data for one domain, following details has to be passed to the api. domainName (name of the domain for this you are fetch data ex. gravito.net) access token (gravito access token generated on Admin Portal following the steps outlined in above section, this has to be passed in request header) gravito version (version of the Gravito's first party service that you are using, it will default to v3 if this header is not passed.) (function () { var xhr = new XMLHttpRequest(); xhr.open(\"GET\", 'https://apiv2.gravito.net/api/gp/gravitocustomerdata?domainName=<yourdomain>', true); xhr.withCredentials = true; xhr.setRequestHeader('gravitoaccess', '<your_gravitoaccess_token_generated on admin portal>'); xhr.setRequestHeader('gravitoversion', '<your_firstparty_api_version>'); xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"GET response : \" + response.target.response); } } xhr.send(); })(); API Reponse This api will return data into following structure [ { \"referer\": \"gravito.net\", \"message\": \"{\\\"i\\\":\\\"dc65b539-dd53-4a4a-a9fc-b1ab2a3c931a\\\",\\\"r\\\":\\\"gravito.net\\\",\\\"v\\\":\\\"v3\\\",\\\"e\\\":{\\\"id1\\\":\\\"abcd\\\",\\\"matchOnId\\\":\\\"Id001\\\"},\\\"k\\\":[],\\\"c\\\":[{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642690365},{\\\"i\\\":\\\"m\\\",\\\"c\\\":\\\"consent2\\\",\\\"s\\\":true,\\\"t\\\":1642690365},{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642691322},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":true,\\\"t\\\":1642691322},{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642691342},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":true,\\\"t\\\":1642691342},{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642691353},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":false,\\\"t\\\":1642691353},{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642691387},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":false,\\\"t\\\":1642691387},{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":false,\\\"t\\\":1642691406},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":false,\\\"t\\\":1642691406}]}\" }, { \"referer\": \"gravito.net\", \"message\": \"{\\\"i\\\":\\\"70624636-dc77-484f-af61-8ebbb646fb80\\\",\\\"r\\\":\\\"gravito.net\\\",\\\"v\\\":\\\"v3\\\",\\\"e\\\":{\\\"id1\\\":\\\"abc\\\",\\\"matchOnId\\\":\\\"gId001\\\"},\\\"k\\\":[{\\\"i\\\":\\\"ab7cvVsef9\\\",\\\"k\\\":\\\"GAID\\\",\\\"v\\\":\\\"ab7cvVsef9\\\",\\\"t\\\":1642693204},{\\\"i\\\":\\\"alhsldasdlfa-asdkasdyfsh\\\",\\\"k\\\":\\\"GMID\\\",\\\"v\\\":\\\"alhsldasdlfa-asdkasdyfsh\\\",\\\"t\\\":1642693204},{\\\"i\\\":\\\"alasd333ldasdlfa-dasdh\\\",\\\"k\\\":\\\"KID\\\",\\\"v\\\":\\\"alasd333ldasdlfa-dasdh\\\",\\\"t\\\":1642693204}],\\\"c\\\":[{\\\"i\\\":\\\"t\\\",\\\"c\\\":\\\"consent1\\\",\\\"s\\\":true,\\\"t\\\":1642693204},{\\\"i\\\":\\\"m\\\",\\\"c\\\":\\\"consent2\\\",\\\"s\\\":false,\\\"t\\\":1642693204},{\\\"i\\\":\\\"n\\\",\\\"c\\\":\\\"consent3\\\",\\\"s\\\":true,\\\"t\\\":1642693204}]}\" }, { \"referer\": \"gravito.net\", \"message\": \"{\\\"i\\\":\\\"e20e3759-b180-4a3c-9af1-1dc6a86a1c99\\\",\\\"r\\\":\\\"gravito.net\\\",\\\"v\\\":\\\"v3\\\",\\\"e\\\":{\\\"gravitoData\\\":\\\"{\\\\\\\"TCString\\\\\\\":\\\\\\\"CPVMwMAPVMwMABUAJAFICECsAP_AAH_AAApAHxQIwAFgAQAAqABkADwAIAAZAA0AB8AEQAI4ATwAqABbADmAH4AQQAhABMADRAGyAQgAiIBFgCRAE7ALSAYEAxQB1AD9AJkAWyAvMB8QHxQHwAFgAVAAyAB4AEAAMgAaAA-F5jIAQC8wHxDoCoACwAKgAZABAADIAGgAPgAiABPADmAH4ATAA0QBsgEWALSAYoA6gCZAFsgLzIQBgAFgAZALSAYoA6gC2SUAgABYAGQAiADZALSAYoA6gC8ykA8ABYAFQAMgAgABkADQAIgATwA5gB-AGiANkAiwBigF5gAAA.YAAAAAAAAMAA\\\\\\\",\\\\\\\"NonTCFVendors\\\\\\\":[{\\\\\\\"id\\\\\\\":1,\\\\\\\"name\\\\\\\":\\\\\\\"Facebook\\\\\\\",\\\\\\\"consent\\\\\\\":true},{\\\\\\\"id\\\\\\\":3,\\\\\\\"name\\\\\\\":\\\\\\\"Google\\\\\\\",\\\\\\\"consent\\\\\\\":true},{\\\\\\\"id\\\\\\\":9,\\\\\\\"name\\\\\\\":\\\\\\\"Twitter\\\\\\\",\\\\\\\"consent\\\\\\\":true},{\\\\\\\"id\\\\\\\":10,\\\\\\\"name\\\\\\\":\\\\\\\"Wordpress\\\\\\\",\\\\\\\"consent\\\\\\\":true},{\\\\\\\"id\\\\\\\":15,\\\\\\\"name\\\\\\\":\\\\\\\"Linkedin\\\\\\\",\\\\\\\"consent\\\\\\\":true},{\\\\\\\"id\\\\\\\":16,\\\\\\\"name\\\\\\\":\\\\\\\"Microsoft\\\\\\\",\\\\\\\"consent\\\\\\\":true},]}\\\",\\\"matchOnId\\\":\\\"11fb248d7984777b5d956057f160ca3d636f1f6e12f91bc365a2ca6901de4f9e\\\"},\\\"k\\\":[],\\\"c\\\":[]}\" } ]","title":"Customer data access API"},{"location":"Gravito_API/Getting_Started/","text":"Getting Started Gravito API is a powerful tool when it comes to collecting consent statistics while allowing you to connect multiple ids that you use in your setup and give it more persistence. One of the key features of the Gravito API, the Gravito ID Connector is enabled using the server side microprofile which is created. We will discuss this in more detail in the coming section. Here are the sections that we will have in this section. Setup and Validation Version 3 (Latest) Version 2 Microprofile","title":"Getting Started"},{"location":"Gravito_API/Microprofile/","text":"Microprofile Microprofile which relies on Gravito Firstparty API v3 is in Beta testing Gravito Microprofile is sort of a synonym to first party API. First party API was initially developed as simple microservice to help with setting first party cookie to hold CMP settings and consents. As more advanced requirements started to surface we thought that calling the service \u201cmicroprofile\u201d would be reasonable. Micro means simple, right? Wish it was. However, the general idea is pretty simple. We store various types of attributes to a cookie that is set from server-side by API served from sub-domain associated with your domain. Two reasons why: 1) server-side cookie lasts longer than cookies set by javascript running on client 2) API operating on your domain avoids the blocking of third party cookies (now and the future) How does it work? First learn about setting up First Party API, after registering your domain(s) you are ready to roll: (Example provided based on Version 3 (function () { var xhr = new XMLHttpRequest(); var params = { \"e\": { \"matchOnId\": \"dem05\", \"id1\": \"xyz\", \"counterPageView\":\"2\" }, \"k\": [{ \"i\":\"1\", \"k\":\"GAID\", \"v\": \"2700108e-b965-4d98-b214-274b0701725a\" }, { \"i\":\"2\", \"k\":\"OMID\", \"v\": \"cb115185-2a25-4587-8ff5-e3fe7cc7a25b\" } ], \"c\": [ { \"i\":\"t\", \"c\":\"consent2\", \"s\": false }, { \"i\":\"m\", \"c\":\"consent2\", \"s\": false } ] }; xhr.open(\"POST\", 'https://gto.<yourdomain>/api/v3/firstparty', true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"POST response : \" + response.target.response); } } xhr.send(JSON.stringify(params)); })(); Looks heavy? Let\u2019s open the structure of \u201cparams\u201d a bit. It consists of three main branches: \u201ce\u201d stands for events , that is any key/value pairs that you might need to store into microprofile. Only restricted key name is \u201c matchOnId \u201d which we use to connect microprofiles to each other when there is e.g. hash of user email available, ie. user has logged in and microprofile can be associated to a person. Further on matchOnId has two reserved values: 1) \u201cdisconnect\u201d allows you to disassociate microprofile from login but keep the history and 2) \u201creset\u201d performs disconnect and wipes the microprofile to default stage. \u201ck\u201d stands for keyring , allowing any key/value pairs stored inside keyring. Functionality is somewhat the same as with events but adding/modifying a key is recorded with timestamp, that allows to link the consents collected to these keys (and whether the keys can be used for whatever purpose they were recorded). Keyring (\u201ck\u201d) has fixed structure: \"i\":\"keyId\", -> string\"k\":\"keyName\", -> string\"v\": \"keyValue\" -> string When sending requests to API you will notice that keyring items will have timestamp \u201ct\u201d set by the API, containing timestamp in epochtime. \u201cc\u201d stands for consents , that is to collect the consents received from CMP. Again the behavior follows the key/value pairs approach but with fixed structure: \"i\":\"consentId\", -> string\"c\":\"consentName\", -> string\"s\": status as true or false -> bool Same as with keyring, the timestamp of adding/modifying particular consentId is recorded and returned in API responses. This allows to monitor that when consents are changed and how those turning points connect to collected IDs in keyring (allowing or preventing further activities within integrated systems). Limitations In our microprofile ( basically a server-side cookie that holds key-value pairs, consents and keys), especially the events supports storing various data types\u2014we support longer values like TCstrings, but there are some practical size limits to keep in mind. To maintain compatibility, the profile size should stay below 5KB, with a safe limit of 2KB for headers to avoid issues. Exceeding these limits, can choke the webservers (for. eg: on AWS, this could result in added costs or even failed requests). To work within these boundaries, we recommend encoding data into a shorter format whenever possible. Note : We compress the profile data, which often reduces 5KB down to 1-2KB depending on the data density. However, heavy use of cookies or extra headers can still push limits, especially in browser or network handling, so it's wise to keep only relevant information in these profiles.","title":"Microprofile"},{"location":"Gravito_API/Microprofile/#microprofile","text":"Microprofile which relies on Gravito Firstparty API v3 is in Beta testing Gravito Microprofile is sort of a synonym to first party API. First party API was initially developed as simple microservice to help with setting first party cookie to hold CMP settings and consents. As more advanced requirements started to surface we thought that calling the service \u201cmicroprofile\u201d would be reasonable. Micro means simple, right? Wish it was. However, the general idea is pretty simple. We store various types of attributes to a cookie that is set from server-side by API served from sub-domain associated with your domain. Two reasons why: 1) server-side cookie lasts longer than cookies set by javascript running on client 2) API operating on your domain avoids the blocking of third party cookies (now and the future) How does it work? First learn about setting up First Party API, after registering your domain(s) you are ready to roll: (Example provided based on Version 3 (function () { var xhr = new XMLHttpRequest(); var params = { \"e\": { \"matchOnId\": \"dem05\", \"id1\": \"xyz\", \"counterPageView\":\"2\" }, \"k\": [{ \"i\":\"1\", \"k\":\"GAID\", \"v\": \"2700108e-b965-4d98-b214-274b0701725a\" }, { \"i\":\"2\", \"k\":\"OMID\", \"v\": \"cb115185-2a25-4587-8ff5-e3fe7cc7a25b\" } ], \"c\": [ { \"i\":\"t\", \"c\":\"consent2\", \"s\": false }, { \"i\":\"m\", \"c\":\"consent2\", \"s\": false } ] }; xhr.open(\"POST\", 'https://gto.<yourdomain>/api/v3/firstparty', true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"POST response : \" + response.target.response); } } xhr.send(JSON.stringify(params)); })(); Looks heavy? Let\u2019s open the structure of \u201cparams\u201d a bit. It consists of three main branches: \u201ce\u201d stands for events , that is any key/value pairs that you might need to store into microprofile. Only restricted key name is \u201c matchOnId \u201d which we use to connect microprofiles to each other when there is e.g. hash of user email available, ie. user has logged in and microprofile can be associated to a person. Further on matchOnId has two reserved values: 1) \u201cdisconnect\u201d allows you to disassociate microprofile from login but keep the history and 2) \u201creset\u201d performs disconnect and wipes the microprofile to default stage. \u201ck\u201d stands for keyring , allowing any key/value pairs stored inside keyring. Functionality is somewhat the same as with events but adding/modifying a key is recorded with timestamp, that allows to link the consents collected to these keys (and whether the keys can be used for whatever purpose they were recorded). Keyring (\u201ck\u201d) has fixed structure: \"i\":\"keyId\", -> string\"k\":\"keyName\", -> string\"v\": \"keyValue\" -> string When sending requests to API you will notice that keyring items will have timestamp \u201ct\u201d set by the API, containing timestamp in epochtime. \u201cc\u201d stands for consents , that is to collect the consents received from CMP. Again the behavior follows the key/value pairs approach but with fixed structure: \"i\":\"consentId\", -> string\"c\":\"consentName\", -> string\"s\": status as true or false -> bool Same as with keyring, the timestamp of adding/modifying particular consentId is recorded and returned in API responses. This allows to monitor that when consents are changed and how those turning points connect to collected IDs in keyring (allowing or preventing further activities within integrated systems). Limitations In our microprofile ( basically a server-side cookie that holds key-value pairs, consents and keys), especially the events supports storing various data types\u2014we support longer values like TCstrings, but there are some practical size limits to keep in mind. To maintain compatibility, the profile size should stay below 5KB, with a safe limit of 2KB for headers to avoid issues. Exceeding these limits, can choke the webservers (for. eg: on AWS, this could result in added costs or even failed requests). To work within these boundaries, we recommend encoding data into a shorter format whenever possible. Note : We compress the profile data, which often reduces 5KB down to 1-2KB depending on the data density. However, heavy use of cookies or extra headers can still push limits, especially in browser or network handling, so it's wise to keep only relevant information in these profiles.","title":"Microprofile"},{"location":"Gravito_API/Setup_and_Validation/","text":"Setup and Validation First Party domain means the domain your website operates. e.g. website.com. To avoid third party cookies being blocked (occurs already on many browsers) you can configure the CMP to set the cookies under first party domain or you can use Gravito\u2019s first party API to store and retrieve other valuable profile data. To get started with first party setup, you first need to set up domain in Gravito\u2019s admin panel Step 1 : Setup Setup of first party domain Once you have configured your domain gto.website.com, you need to do the DNS changes for your domain. These steps are varying between different DNS providers, generally you have to configure three records: Step 2 : Validation First party domain configuration After you have made the DNS records (A, TXT and CNAME), allow the changes to propagate to DNS servers (few minutes at least) and then press \u201cValidate\u201d button. After succesful validation you should see domain status as \u201cValidated\u201d: Step 3 : Web Setting up on Web Once the DNS entries are done and validated, you can include our SDK. We have attached the sample script which for e.g. you can include inside a GTM tag or implement it directly on your website. function waitForOrGetVendorConsent(vendorId, callback) { if (typeof __tcfapi !== \"function\") { return callback(new Error(\"__tcfapi is not available.\")); } // First, check if we already have the TCData available __tcfapi(\"getTCData\", 2, function (tcData, success) { if (success && tcData && tcData.vendor && tcData.vendor.consents) { var hasConsent = tcData.vendor.consents[vendorId] === true; // If consent string already exists and eventStatus isn't 'tcloaded', we can resolve if ( tcData.eventStatus === \"useractioncomplete\" || tcData.eventStatus === \"tcloaded\" ) { return callback(null, hasConsent); } } // Otherwise, wait for consent update via event listener var listener = function (updatedData, ok) { if (!ok || !updatedData) return; if (updatedData.vendor && updatedData.vendor.consents) { var hasConsent = updatedData.vendor.consents[vendorId] === true; // Clean up listener __tcfapi(\"removeEventListener\", 2, function () {}, listener); callback(null, hasConsent); } }; __tcfapi(\"addEventListener\", 2, listener); }); } function initilizeGravitoSDK(callback) { try { window.gravitoPROCMPConfig = { settings: { sdkVersion: 3, }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/prosdk/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"firstParty\"); gravito.state.subscribe( function (value) { // first Party is now loaded and sdk is fully initialized callback(null, value.firstPartyLoaded); }, function (currentState, prevState) { return currentState.firstPartyLoaded !== prevState.firstPartyLoaded; } ); }; document.body.appendChild(gravitoSDKTag); } catch (error) { callback(error); } } function main() { var vendorId = 1347; // gravito TCF vendorId waitForOrGetVendorConsent(vendorId, function (error, hasConsent) { if (error) { console.error(\"Error checking vendor consent:\", error); return; } if (hasConsent) { console.log(\"User has given consent for vendor ID \" + vendorId + \".\"); // Initialize Gravito SDK initilizeGravitoSDK(function (err, isLoaded) { if (err) { console.error(\"Error initializing Gravito SDK:\", err); return; } if (isLoaded) { console.log(\"Gravito SDK is loaded and initialized.\"); // You can now use the Gravito SDK var gravitoFPid = window.gravito.firstParty.profile.i; console.log(\"Gravito FP ID:\", gravitoFPid); // Do somethign with FP id. // for eg. pass as the }); } else { console.log(\"User has not given consent for vendor ID \" + vendorId + \".\"); } }); } var waitPeriod = 0; function whenAvailable(name, callback) { var interval = 250; // ms if (window[name]) { waitPeriod = 0; callback(window[name]); return; } if (this.waitPeriod >= 1500) { console.error(\"No TCF CMP in context\"); return; } window.setTimeout(function () { if (window[name]) { waitPeriod = 0; callback(window[name]); } else { waitPeriod = waitPeriod + 250; whenAvailable(name, callback); } }, interval); } whenAvailable(\"__tcfapi\", function (tcfApi) { console.log(\"TCF API is available\"); main(); }); For.eg. this script above basically looks for the consent of the vendor Gravito (1347) from your CMP and based on consent initiates the SDK to provision the PPIDs which you will need. Step 4 : Mobile Setting up on mobile The sample repo is present here at GitHub - GravitoLtd/gravitoAndroidFPv3 Please go through the read me file to understand more about the implementation You can use the input domains which are your \"xyz.com\" and the app domain as for eg : \"myapp.xyz.com\" (some sub - domain)","title":"Setup and Validation"},{"location":"Gravito_API/Setup_and_Validation/#setup-and-validation","text":"First Party domain means the domain your website operates. e.g. website.com. To avoid third party cookies being blocked (occurs already on many browsers) you can configure the CMP to set the cookies under first party domain or you can use Gravito\u2019s first party API to store and retrieve other valuable profile data. To get started with first party setup, you first need to set up domain in Gravito\u2019s admin panel","title":"Setup and Validation"},{"location":"Gravito_API/Setup_and_Validation/#step-1-setup","text":"Setup of first party domain Once you have configured your domain gto.website.com, you need to do the DNS changes for your domain. These steps are varying between different DNS providers, generally you have to configure three records:","title":"Step 1 : Setup"},{"location":"Gravito_API/Setup_and_Validation/#step-2-validation","text":"First party domain configuration After you have made the DNS records (A, TXT and CNAME), allow the changes to propagate to DNS servers (few minutes at least) and then press \u201cValidate\u201d button. After succesful validation you should see domain status as \u201cValidated\u201d:","title":"Step 2 : Validation"},{"location":"Gravito_API/Setup_and_Validation/#step-3-web","text":"Setting up on Web Once the DNS entries are done and validated, you can include our SDK. We have attached the sample script which for e.g. you can include inside a GTM tag or implement it directly on your website. function waitForOrGetVendorConsent(vendorId, callback) { if (typeof __tcfapi !== \"function\") { return callback(new Error(\"__tcfapi is not available.\")); } // First, check if we already have the TCData available __tcfapi(\"getTCData\", 2, function (tcData, success) { if (success && tcData && tcData.vendor && tcData.vendor.consents) { var hasConsent = tcData.vendor.consents[vendorId] === true; // If consent string already exists and eventStatus isn't 'tcloaded', we can resolve if ( tcData.eventStatus === \"useractioncomplete\" || tcData.eventStatus === \"tcloaded\" ) { return callback(null, hasConsent); } } // Otherwise, wait for consent update via event listener var listener = function (updatedData, ok) { if (!ok || !updatedData) return; if (updatedData.vendor && updatedData.vendor.consents) { var hasConsent = updatedData.vendor.consents[vendorId] === true; // Clean up listener __tcfapi(\"removeEventListener\", 2, function () {}, listener); callback(null, hasConsent); } }; __tcfapi(\"addEventListener\", 2, listener); }); } function initilizeGravitoSDK(callback) { try { window.gravitoPROCMPConfig = { settings: { sdkVersion: 3, }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/prosdk/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"firstParty\"); gravito.state.subscribe( function (value) { // first Party is now loaded and sdk is fully initialized callback(null, value.firstPartyLoaded); }, function (currentState, prevState) { return currentState.firstPartyLoaded !== prevState.firstPartyLoaded; } ); }; document.body.appendChild(gravitoSDKTag); } catch (error) { callback(error); } } function main() { var vendorId = 1347; // gravito TCF vendorId waitForOrGetVendorConsent(vendorId, function (error, hasConsent) { if (error) { console.error(\"Error checking vendor consent:\", error); return; } if (hasConsent) { console.log(\"User has given consent for vendor ID \" + vendorId + \".\"); // Initialize Gravito SDK initilizeGravitoSDK(function (err, isLoaded) { if (err) { console.error(\"Error initializing Gravito SDK:\", err); return; } if (isLoaded) { console.log(\"Gravito SDK is loaded and initialized.\"); // You can now use the Gravito SDK var gravitoFPid = window.gravito.firstParty.profile.i; console.log(\"Gravito FP ID:\", gravitoFPid); // Do somethign with FP id. // for eg. pass as the }); } else { console.log(\"User has not given consent for vendor ID \" + vendorId + \".\"); } }); } var waitPeriod = 0; function whenAvailable(name, callback) { var interval = 250; // ms if (window[name]) { waitPeriod = 0; callback(window[name]); return; } if (this.waitPeriod >= 1500) { console.error(\"No TCF CMP in context\"); return; } window.setTimeout(function () { if (window[name]) { waitPeriod = 0; callback(window[name]); } else { waitPeriod = waitPeriod + 250; whenAvailable(name, callback); } }, interval); } whenAvailable(\"__tcfapi\", function (tcfApi) { console.log(\"TCF API is available\"); main(); }); For.eg. this script above basically looks for the consent of the vendor Gravito (1347) from your CMP and based on consent initiates the SDK to provision the PPIDs which you will need.","title":"Step 3 : Web"},{"location":"Gravito_API/Setup_and_Validation/#step-4-mobile","text":"Setting up on mobile The sample repo is present here at GitHub - GravitoLtd/gravitoAndroidFPv3 Please go through the read me file to understand more about the implementation You can use the input domains which are your \"xyz.com\" and the app domain as for eg : \"myapp.xyz.com\" (some sub - domain)","title":"Step 4 : Mobile"},{"location":"Gravito_API/Version_2/","text":"Version 2 First party API / Microprofile Most common use for first party microprofile is to store CMP consents and other metadata on it. That configuration is automatically generated by CMP configurator, just select \"with backend\" option when generating the deployment script and choose right first party domain from the menu. The properties that can be managed with with a First party Microprofile V2 looks like this. { \"id\": \"<microprofileid>\", \"referer\": \"<originDomain>\", \"events\": { \"key1\":\"value1\", \"key2\":\"value2\" } } Note: The features available in the Microprofile has been improved a lot in the version 3. You can look at the documentation here. If there would be other needs to use microprofile to act as keyring store, store context analytics results (e.g. segments) or something similar, the calls to first party API microprofile would look something like this: Get profile (function gtoFirstParty() { var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.<<domain>>/api/v2/firstparty', true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P echo : \" + response.target.response); } } xhr.send(); })(); Send data to profile (function gtoFirstParty() { var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.<<domain>>/api/v2/firstparty?attribute1=value1', true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P echo : \" + response.target.response); } } xhr.send(); })(); Connect cookies across domains, this can be done e.g. using user ID: (function gtoFirstParty() {\u200b var xhr = new XMLHttpRequest();\u200b xhr.open(\"POST\", 'https://gto.<<domain>>/api/v2/firstparty?matchOnId=123', true); \u200b xhr.withCredentials = true;\u200b xhr.onreadystatechange = function(response) {\u200b if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {\u200b console.log(\"1P echo : \" + response.target.response);\u200b } \u200b }\u200b xhr.send();\u200b })(); matchOnID is the only reserved key value pair, it allows retrieving the cookie set for particular ID (e.g. logged in user has UID known) from other domain. A user with a matchOnId can be dealt with in 3 different ways to change the particular Id associated in 3 different ways. reset Reset value for the matchOnId can be used to clear all the values from the events key value pair temporarily. disconnect Disconnect value for the matchOnId can be used to remove the matchOnId from the events key value pair. delete Delete keyword for the matchOnId can be used to delete the whole events and the existing microProfileId provided. This operation will reset the microProfileId and give you a new one. Note: In all these cases passing the matchOnId value for a particular ID (e.g. logged in user has UID known) can resurface the whole profile again for your convenience.","title":"Version 2"},{"location":"Gravito_API/Version_2/#version-2","text":"","title":"Version 2"},{"location":"Gravito_API/Version_2/#first-party-api-microprofile","text":"Most common use for first party microprofile is to store CMP consents and other metadata on it. That configuration is automatically generated by CMP configurator, just select \"with backend\" option when generating the deployment script and choose right first party domain from the menu. The properties that can be managed with with a First party Microprofile V2 looks like this. { \"id\": \"<microprofileid>\", \"referer\": \"<originDomain>\", \"events\": { \"key1\":\"value1\", \"key2\":\"value2\" } } Note: The features available in the Microprofile has been improved a lot in the version 3. You can look at the documentation here. If there would be other needs to use microprofile to act as keyring store, store context analytics results (e.g. segments) or something similar, the calls to first party API microprofile would look something like this: Get profile (function gtoFirstParty() { var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.<<domain>>/api/v2/firstparty', true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P echo : \" + response.target.response); } } xhr.send(); })(); Send data to profile (function gtoFirstParty() { var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.<<domain>>/api/v2/firstparty?attribute1=value1', true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P echo : \" + response.target.response); } } xhr.send(); })(); Connect cookies across domains, this can be done e.g. using user ID: (function gtoFirstParty() {\u200b var xhr = new XMLHttpRequest();\u200b xhr.open(\"POST\", 'https://gto.<<domain>>/api/v2/firstparty?matchOnId=123', true); \u200b xhr.withCredentials = true;\u200b xhr.onreadystatechange = function(response) {\u200b if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {\u200b console.log(\"1P echo : \" + response.target.response);\u200b } \u200b }\u200b xhr.send();\u200b })(); matchOnID is the only reserved key value pair, it allows retrieving the cookie set for particular ID (e.g. logged in user has UID known) from other domain. A user with a matchOnId can be dealt with in 3 different ways to change the particular Id associated in 3 different ways. reset Reset value for the matchOnId can be used to clear all the values from the events key value pair temporarily. disconnect Disconnect value for the matchOnId can be used to remove the matchOnId from the events key value pair. delete Delete keyword for the matchOnId can be used to delete the whole events and the existing microProfileId provided. This operation will reset the microProfileId and give you a new one. Note: In all these cases passing the matchOnId value for a particular ID (e.g. logged in user has UID known) can resurface the whole profile again for your convenience.","title":"First party API / Microprofile"},{"location":"Gravito_API/Version_3_%28Latest%29/","text":"Version 3 (Latest) First party API / Microprofile As discussed in the previous version 2, most common use for first party microprofile is to store CMP consents and other metadata on it. In version 3 we have added a whole new set of features to manage observations, consents and key rings with in the microprofile. New features: Supports Key Rings, Consents and events Data compression enabled by default Third-party to First-party ID fusion More options to get the audit trail. The data properties of the Version 3 of the api looks like below. { \"i\": \"<microprofileid>\", \"r\": \"<originDomain>\", \"v\": \"v3\", \"e\": { \"key1\": \"value1\", \"key2\": \"value2\" }, \"k\": [ //key value pairs { \"i\": \"keyId\", \"k\": \"KeyName\", \"v\": \"keyValue\", \"t\": <timestamp> }, { \"i\": \"keyId\", \"k\": \"KeyName\", \"v\": \"keyValue\", \"t\": <timestamp> } ], \"c\": [ { \"i\": \"consentId\", \"c\": \"consentName\", \"s\": true, \"t\": <timestamp> }, { \"i\": \"consentId\", \"c\": \"consentName\", \"s\": true, \"t\": <timestamp> } ] } The property values in the V3 are mainly short forms to reduce space in the requests. You can refer the full form here. Timestamp for each entity is auto-generated by Gravito 1st party end point itself to help you keep track of different values when merging data across domains. k : Key Rings i: Key Id k: Key Name v: Key Value t: Timestamp c: Consents i: Consent Id k: Consent Name v: Consent Value t: Timestamp e: Events i: Id r: Referrer v: version If there would be other needs to use microprofile to act as keyring store, store context analytics results (e.g. segments) or something similar, the calls to first party API microprofile would look something like this: (function gtoFirstPartyV3() { var xhr = new XMLHttpRequest(); var params = { \"e\": {}, \"k\": [], \"c\": [] }; xhr.open(\"POST\", \"https://gto.<<domain>>/api/v3/firstparty\", true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P Echo : \" + response.target.response); } } xhr.send(JSON.stringify(params)); })(); Please get in touch with is for a detailed Postman collection to get details of different use cases of this API. We will be happy to help. We can help you get started with sample GTM tag samples which enables simple profiling to complex cases which can enable Thirdparty to FirstParty Id fusion. Connect cookies across domains Under the Key value pair (\"e\"), similar to the version 2 you can still use the matchOnId to connect profiles to different domains. This for example can be done using a users Id when they login. (e.g. logged in user has UID known) matchOnID is the only reserved key value pair, it allows retrieving the cookie set for particular ID (e.g. logged in user has UID known) from other domain. A user with a matchOnId can be dealt with in 3 different ways to change the particular Id associated in 3 different ways. reset Reset value for the matchOnId can be used to clear all the values from the events key value pair temporarily. disconnect Disconnect value for the matchOnId can be used to remove the matchOnId from the events key value pair. delete Delete keyword for the matchOnId can be used to delete the whole events and the existing microProfileId provided. This operation will reset the microProfileId and give you a new one. Note: In all these cases passing the matchOnId value for a particular ID (e.g. logged in user has UID known) can resurface the whole profile again for your convenience.","title":"Version 3 (Latest)"},{"location":"Gravito_API/Version_3_%28Latest%29/#version-3-latest","text":"","title":"Version 3 (Latest)"},{"location":"Gravito_API/Version_3_%28Latest%29/#first-party-api-microprofile","text":"As discussed in the previous version 2, most common use for first party microprofile is to store CMP consents and other metadata on it. In version 3 we have added a whole new set of features to manage observations, consents and key rings with in the microprofile. New features: Supports Key Rings, Consents and events Data compression enabled by default Third-party to First-party ID fusion More options to get the audit trail. The data properties of the Version 3 of the api looks like below. { \"i\": \"<microprofileid>\", \"r\": \"<originDomain>\", \"v\": \"v3\", \"e\": { \"key1\": \"value1\", \"key2\": \"value2\" }, \"k\": [ //key value pairs { \"i\": \"keyId\", \"k\": \"KeyName\", \"v\": \"keyValue\", \"t\": <timestamp> }, { \"i\": \"keyId\", \"k\": \"KeyName\", \"v\": \"keyValue\", \"t\": <timestamp> } ], \"c\": [ { \"i\": \"consentId\", \"c\": \"consentName\", \"s\": true, \"t\": <timestamp> }, { \"i\": \"consentId\", \"c\": \"consentName\", \"s\": true, \"t\": <timestamp> } ] } The property values in the V3 are mainly short forms to reduce space in the requests. You can refer the full form here. Timestamp for each entity is auto-generated by Gravito 1st party end point itself to help you keep track of different values when merging data across domains. k : Key Rings i: Key Id k: Key Name v: Key Value t: Timestamp c: Consents i: Consent Id k: Consent Name v: Consent Value t: Timestamp e: Events i: Id r: Referrer v: version If there would be other needs to use microprofile to act as keyring store, store context analytics results (e.g. segments) or something similar, the calls to first party API microprofile would look something like this: (function gtoFirstPartyV3() { var xhr = new XMLHttpRequest(); var params = { \"e\": {}, \"k\": [], \"c\": [] }; xhr.open(\"POST\", \"https://gto.<<domain>>/api/v3/firstparty\", true); xhr.withCredentials = true; xhr.onreadystatechange = function(response) { if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P Echo : \" + response.target.response); } } xhr.send(JSON.stringify(params)); })(); Please get in touch with is for a detailed Postman collection to get details of different use cases of this API. We will be happy to help. We can help you get started with sample GTM tag samples which enables simple profiling to complex cases which can enable Thirdparty to FirstParty Id fusion. Connect cookies across domains Under the Key value pair (\"e\"), similar to the version 2 you can still use the matchOnId to connect profiles to different domains. This for example can be done using a users Id when they login. (e.g. logged in user has UID known) matchOnID is the only reserved key value pair, it allows retrieving the cookie set for particular ID (e.g. logged in user has UID known) from other domain. A user with a matchOnId can be dealt with in 3 different ways to change the particular Id associated in 3 different ways. reset Reset value for the matchOnId can be used to clear all the values from the events key value pair temporarily. disconnect Disconnect value for the matchOnId can be used to remove the matchOnId from the events key value pair. delete Delete keyword for the matchOnId can be used to delete the whole events and the existing microProfileId provided. This operation will reset the microProfileId and give you a new one. Note: In all these cases passing the matchOnId value for a particular ID (e.g. logged in user has UID known) can resurface the whole profile again for your convenience.","title":"First party API / Microprofile"},{"location":"Gravito_CCPA_CMP/About_Ccpa/","text":"California Consumer Privacy Act (CCPA) The California Consumer Privacy Act (CCPA) is a state statute that enhances privacy rights and consumer protection for residents of California, United States. The CCPA was passed in 2018 and went into effect on January 1, 2020. It is considered one of the most comprehensive data privacy laws in the United States. Key Provisions of the CCPA The CCPA grants California residents the following rights: Right to Know : Consumers have the right to know what personal information is collected about them, where it is sourced from, how it is used, and whether it is disclosed or sold. Right to Delete : Consumers have the right to request the deletion of their personal information. Right to Opt-Out : Consumers have the right to opt-out of the sale of their personal information. Right to Non-Discrimination : Businesses are prohibited from discriminating against consumers who exercise their privacy rights. Right to Access : Consumers have the right to access their personal information. Right to Data Portability : Consumers have the right to request their personal information in a portable format. Compliance Requirements Businesses subject to the CCPA must comply with the following requirements: Notice at Collection : Businesses must provide consumers with notice at or before the point of collection of personal information. Privacy Policy : Businesses must maintain a privacy policy that discloses the categories of personal information collected, the purposes for which it is used, and the categories of third parties with whom it is shared. Opt-Out Mechanism : Businesses must provide consumers with a mechanism to opt-out of the sale of their personal information. Data Security : Businesses must implement reasonable security measures to protect consumer data. Training and Record-Keeping : Businesses must train employees on privacy practices and maintain records of consumer requests and responses. Non-Discrimination : Businesses must not discriminate against consumers who exercise their privacy rights. USPrivacy Cookie The USPrivacy cookie is a mechanism used to manage and communicate user privacy preferences in compliance with the IAB's U.S. Privacy Framework. This framework is designed to help businesses comply with various U.S. state privacy laws, including the CCPA. Key Features of the USPrivacy Cookie User Consent Management : The USPrivacy cookie stores user consent preferences regarding the collection, use, and sharing of personal information. Standardized Format : The cookie follows a standardized format to ensure interoperability across different websites and ad tech platforms. Privacy Signals : The cookie communicates privacy signals to downstream partners, indicating whether a user has opted out of the sale of their personal information. Compliance Support : By using the USPrivacy cookie, businesses can more easily comply with state-specific privacy regulations and demonstrate their commitment to user privacy. USPrivacy Cookie Format The USPrivacy cookie is typically stored in the browser as a first-party cookie and contains the following key fields: Version : The version of the USPrivacy framework being used (currently 1). Explicit Notice/Opportunity to Opt-Out : Indicates whether the user has received explicit notice and an opportunity to opt-out of the sale of their personal information. Opt-Out Sale : Indicates whether the user has opted out of the sale of their personal information. LSPA : Indicates whether the user has opted out of the sale of their personal information under the Limited Service Provider Agreement (LSPA). Previous Next","title":"California Consumer Privacy Act (CCPA)"},{"location":"Gravito_CCPA_CMP/About_Ccpa/#california-consumer-privacy-act-ccpa","text":"The California Consumer Privacy Act (CCPA) is a state statute that enhances privacy rights and consumer protection for residents of California, United States. The CCPA was passed in 2018 and went into effect on January 1, 2020. It is considered one of the most comprehensive data privacy laws in the United States.","title":"California Consumer Privacy Act (CCPA)"},{"location":"Gravito_CCPA_CMP/About_Ccpa/#key-provisions-of-the-ccpa","text":"The CCPA grants California residents the following rights: Right to Know : Consumers have the right to know what personal information is collected about them, where it is sourced from, how it is used, and whether it is disclosed or sold. Right to Delete : Consumers have the right to request the deletion of their personal information. Right to Opt-Out : Consumers have the right to opt-out of the sale of their personal information. Right to Non-Discrimination : Businesses are prohibited from discriminating against consumers who exercise their privacy rights. Right to Access : Consumers have the right to access their personal information. Right to Data Portability : Consumers have the right to request their personal information in a portable format.","title":"Key Provisions of the CCPA"},{"location":"Gravito_CCPA_CMP/About_Ccpa/#compliance-requirements","text":"Businesses subject to the CCPA must comply with the following requirements: Notice at Collection : Businesses must provide consumers with notice at or before the point of collection of personal information. Privacy Policy : Businesses must maintain a privacy policy that discloses the categories of personal information collected, the purposes for which it is used, and the categories of third parties with whom it is shared. Opt-Out Mechanism : Businesses must provide consumers with a mechanism to opt-out of the sale of their personal information. Data Security : Businesses must implement reasonable security measures to protect consumer data. Training and Record-Keeping : Businesses must train employees on privacy practices and maintain records of consumer requests and responses. Non-Discrimination : Businesses must not discriminate against consumers who exercise their privacy rights.","title":"Compliance Requirements"},{"location":"Gravito_CCPA_CMP/About_Ccpa/#usprivacy-cookie","text":"The USPrivacy cookie is a mechanism used to manage and communicate user privacy preferences in compliance with the IAB's U.S. Privacy Framework. This framework is designed to help businesses comply with various U.S. state privacy laws, including the CCPA.","title":"USPrivacy Cookie"},{"location":"Gravito_CCPA_CMP/About_Ccpa/#key-features-of-the-usprivacy-cookie","text":"User Consent Management : The USPrivacy cookie stores user consent preferences regarding the collection, use, and sharing of personal information. Standardized Format : The cookie follows a standardized format to ensure interoperability across different websites and ad tech platforms. Privacy Signals : The cookie communicates privacy signals to downstream partners, indicating whether a user has opted out of the sale of their personal information. Compliance Support : By using the USPrivacy cookie, businesses can more easily comply with state-specific privacy regulations and demonstrate their commitment to user privacy.","title":"Key Features of the USPrivacy Cookie"},{"location":"Gravito_CCPA_CMP/About_Ccpa/#usprivacy-cookie-format","text":"The USPrivacy cookie is typically stored in the browser as a first-party cookie and contains the following key fields: Version : The version of the USPrivacy framework being used (currently 1). Explicit Notice/Opportunity to Opt-Out : Indicates whether the user has received explicit notice and an opportunity to opt-out of the sale of their personal information. Opt-Out Sale : Indicates whether the user has opted out of the sale of their personal information. LSPA : Indicates whether the user has opted out of the sale of their personal information under the Limited Service Provider Agreement (LSPA). Previous Next","title":"USPrivacy Cookie Format"},{"location":"Gravito_CCPA_CMP/Configuration/","text":"CCPA CMP Configuration Here you can find the configuration options for the Gravito CCPA CMP. Property Name Purpose Datatype title The title of the CMP. String introductionText The introduction text displayed at the top of the CMP below title. String cookieName The name of the cookie used to store user preferences. String cookieExpiry The expiry time of the cookie in days. Number defaultUspString The default USPrivacy string to be used if the cookie is not present. String consents The list of consents to be displayed in the CMP. Array consents[i] > name The name of the consent. String consents[i] > label The label of the consent. String logoUrl The URL of the logo to be displayed in the CMP. String style The style configuration of the CMP. Object style > customCss The custom CSS to be applied to the CMP. String style > fonts The font configuration of the CMP. Array style > fonts[i] > url The URL of the font file. String style > fonts[i] > unicodeRange The unicode range of the font. String componentUrl The URL of the component to be loaded in the CMP. String Example Configuration { \"title\": \"Gravito CCPA CMP\", \"introductionText\": \"This is a testing model for Gravito's CCPA compliant CMP.\", \"cookieName\": \"usprivacy\", \"cookieExpiry\": 30, \"defaultUspString\": \"1NNN\", \"consents\": [ { \"name\": \"notice\", \"label\": \"Notice/Opportunity to Opt Out\" }, { \"name\": \"optOutSale\", \"label\": \"Opt-Out Sale\" }, { \"name\": \"lspa\", \"label\": \"LSPA Covered Transaction\" } ], \"logoUrl\": \"https://cdn.gravito.net/logos/Gravito-logo-Dark.png\", \"style\": { \"customCss\": \"\", \"fonts\": [ { \"url\": \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", \"unicodeRange\": \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\" }, { \"url\": \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", \"unicodeRange\": \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\" } ] }, \"componentUrl\": \"https://gravitocdn.blob.core.windows.net/ccpa\" }","title":"CCPA CMP Configuration"},{"location":"Gravito_CCPA_CMP/Configuration/#ccpa-cmp-configuration","text":"Here you can find the configuration options for the Gravito CCPA CMP. Property Name Purpose Datatype title The title of the CMP. String introductionText The introduction text displayed at the top of the CMP below title. String cookieName The name of the cookie used to store user preferences. String cookieExpiry The expiry time of the cookie in days. Number defaultUspString The default USPrivacy string to be used if the cookie is not present. String consents The list of consents to be displayed in the CMP. Array consents[i] > name The name of the consent. String consents[i] > label The label of the consent. String logoUrl The URL of the logo to be displayed in the CMP. String style The style configuration of the CMP. Object style > customCss The custom CSS to be applied to the CMP. String style > fonts The font configuration of the CMP. Array style > fonts[i] > url The URL of the font file. String style > fonts[i] > unicodeRange The unicode range of the font. String componentUrl The URL of the component to be loaded in the CMP. String","title":"CCPA CMP Configuration"},{"location":"Gravito_CCPA_CMP/Configuration/#example-configuration","text":"{ \"title\": \"Gravito CCPA CMP\", \"introductionText\": \"This is a testing model for Gravito's CCPA compliant CMP.\", \"cookieName\": \"usprivacy\", \"cookieExpiry\": 30, \"defaultUspString\": \"1NNN\", \"consents\": [ { \"name\": \"notice\", \"label\": \"Notice/Opportunity to Opt Out\" }, { \"name\": \"optOutSale\", \"label\": \"Opt-Out Sale\" }, { \"name\": \"lspa\", \"label\": \"LSPA Covered Transaction\" } ], \"logoUrl\": \"https://cdn.gravito.net/logos/Gravito-logo-Dark.png\", \"style\": { \"customCss\": \"\", \"fonts\": [ { \"url\": \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", \"unicodeRange\": \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\" }, { \"url\": \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", \"unicodeRange\": \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\" } ] }, \"componentUrl\": \"https://gravitocdn.blob.core.windows.net/ccpa\" }","title":"Example Configuration"},{"location":"Gravito_CCPA_CMP/Getting_Started/","text":"Getting Started Introduction Gravito CCPA CMP is a Consent Management Platform (CMP) that helps you manage user consent for your website. It is designed to help you comply with the California Consumer Privacy Act (CCPA) and other privacy regulations. Features Consent Management : Manage user consent for your website. CCPA Compliance : Comply with the California Consumer Privacy Act (CCPA). Customizable : Customize the CMP to match your website's look and feel. Easy Integration : Easily integrate the CMP with your website. CMP Preview Here is a preview of the Gravito CCPA CMP: CCPA CMP Configuration Here you can find the configuration options for the Gravito CCPA CMP. Property Name Purpose Datatype title The title of the CMP. String introductionText The introduction text displayed at the top of the CMP below title. String cookieName The name of the cookie used to store user preferences. String cookieExpiry The expiry time of the cookie in days. Number defaultUspString The default USPrivacy string to be used if the cookie is not present. String consents The list of consents to be displayed in the CMP. Array consents[i] > name The name of the consent. String consents[i] > label The label of the consent. String logoUrl The URL of the logo to be displayed in the CMP. String style The style configuration of the CMP. Object style > customCss The custom CSS to be applied to the CMP. String style > fonts The font configuration of the CMP. Array style > fonts[i] > url The URL of the font file. String style > fonts[i] > unicodeRange The unicode range of the font. String componentUrl The URL of the component to be loaded in the CMP. String CSS Customization CSS customization can be done by adding the custom CSS in the style section of the CMP config. The following are the CSS classes that can be used to customize the CMP. Class Name Purpose .gravitoCcpaCmp-card to customize the CMP modal/card .gravitoCcpaCmp-logo-container to customize the CMP logo container .gravitoCcpaCmp-logo to customize the CMP logo image .gravitoCcpaCmp-title to customize the CMP title .gravitoCcpaCmp-description to customize the CMP description .gravitoCcpaCmp-checkbox-container to customize the consent container .gravitoCcpaCmp-checkbox to customize the checkbox styling .gravitoCcpaCmp-row to customize the checkbox label .gravitoCcpaCmp-btn-container button to customize the CMP action button Example Configuration { \"title\": \"Gravito CCPA CMP\", \"introductionText\": \"We value your privacy. Our website uses cookies and similar technologies to enhance your experience. By continuing to browse, you consent to their use as outlined in our <a href='' target='_blank'>Privacy Policy</a>. You may manage your preferences at any time.\", \"cookieName\": \"usprivacy\", \"cookieExpiry\": 30, \"defaultUspString\": \"1YYY\", \"consents\": [ { \"name\": \"notice\", \"label\": \"Notice/Opportunity to Opt Out\" }, { \"name\": \"optOutSale\", \"label\": \"Opt-Out Sale\" }, { \"name\": \"lspa\", \"label\": \"LSPA Covered Transaction\" } ], \"logoUrl\": \"https://cdn.gravito.net/logos/Gravito-logo-Dark.png\", \"style\": { \"customCss\": \"\", \"fonts\": [ { \"url\": \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", \"unicodeRange\": \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\" }, { \"url\": \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", \"unicodeRange\": \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\" } ] }, \"componentUrl\": \"https://gravitocdn.blob.core.windows.net/ccpa\" } Deployment To deploy the Gravito CCPA CMP on your website, there are majorly two ways: Deployment Script : You have to paste the deployment script provided by gravito into your website's HTML code just after the opening <body> tag. The deployment script will load the CMP on your website. <script> var gravitoCMPConfig = { title: \"Gravito CCPA CMP\", introductionText: \"We value your privacy. Our website uses cookies and similar technologies to enhance your experience. By continuing to browse, you consent to their use as outlined in our <a href='https://www.gravito.net/privacy-notice/' target='_blank'>Privacy Policy</a>. You may manage your preferences at any time.\", cookieName: \"usprivacy\", cookieExpiry: 30, defaultUspString: \"1YYY\", consents: [ { name: \"notice\", label: \"Notice/Opportunity to Opt Out\", }, { name: \"optOutSale\", label: \"Opt-Out Sale\", }, { name: \"lspa\", label: \"LSPA Covered Transaction\", }, ], logoUrl: \"https://cdn.gravito.net/logos/Gravito-logo-Dark.png\", style: { customCss: \"\", fonts: [ { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], }, componentUrl: \"https://gravitocdn.blob.core.windows.net/ccpa\", }; window.gravitoCMPConfig = gravitoCMPConfig; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.type = \"module\"; gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv3/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"CCPA\"); }; document.body.appendChild(gravitoSDKTag); </script> Using GTM : You can also deploy the CMP using Google Tag Manager (GTM). You have to create a GTM tag and paste the deployment script provided by gravito into the tag. <script> var gravitoCMPConfig = { title: \"Gravito CCPA CMP\", introductionText: \"We value your privacy. Our website uses cookies and similar technologies to enhance your experience. By continuing to browse, you consent to their use as outlined in our <a href='https://www.gravito.net/privacy-notice/' target='_blank'>Privacy Policy</a>. You may manage your preferences at any time.\", cookieName: \"usprivacy\", cookieExpiry: 30, defaultUspString: \"1YYY\", consents: [ { name: \"notice\", label: \"Notice/Opportunity to Opt Out\", }, { name: \"optOutSale\", label: \"Opt-Out Sale\", }, { name: \"lspa\", label: \"LSPA Covered Transaction\", }, ], logoUrl: \"https://cdn.gravito.net/logos/Gravito-logo-Dark.png\", style: { customCss: \"\", fonts: [ { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], }, componentUrl: \"https://gravitocdn.blob.core.windows.net/ccpa\", }; window.gravitoCMPConfig = gravitoCMPConfig; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.type = \"module\"; gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv3/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"CCPA\"); }; document.body.appendChild(gravitoSDKTag); </script> Now trigger the GTM tag from your website to load the CMP. Previous Next","title":"Getting Started"},{"location":"Gravito_CCPA_CMP/Getting_Started/#getting-started","text":"","title":"Getting Started"},{"location":"Gravito_CCPA_CMP/Getting_Started/#introduction","text":"Gravito CCPA CMP is a Consent Management Platform (CMP) that helps you manage user consent for your website. It is designed to help you comply with the California Consumer Privacy Act (CCPA) and other privacy regulations.","title":"Introduction"},{"location":"Gravito_CCPA_CMP/Getting_Started/#features","text":"Consent Management : Manage user consent for your website. CCPA Compliance : Comply with the California Consumer Privacy Act (CCPA). Customizable : Customize the CMP to match your website's look and feel. Easy Integration : Easily integrate the CMP with your website.","title":"Features"},{"location":"Gravito_CCPA_CMP/Getting_Started/#cmp-preview","text":"Here is a preview of the Gravito CCPA CMP:","title":"CMP Preview"},{"location":"Gravito_CCPA_CMP/Getting_Started/#ccpa-cmp-configuration","text":"Here you can find the configuration options for the Gravito CCPA CMP. Property Name Purpose Datatype title The title of the CMP. String introductionText The introduction text displayed at the top of the CMP below title. String cookieName The name of the cookie used to store user preferences. String cookieExpiry The expiry time of the cookie in days. Number defaultUspString The default USPrivacy string to be used if the cookie is not present. String consents The list of consents to be displayed in the CMP. Array consents[i] > name The name of the consent. String consents[i] > label The label of the consent. String logoUrl The URL of the logo to be displayed in the CMP. String style The style configuration of the CMP. Object style > customCss The custom CSS to be applied to the CMP. String style > fonts The font configuration of the CMP. Array style > fonts[i] > url The URL of the font file. String style > fonts[i] > unicodeRange The unicode range of the font. String componentUrl The URL of the component to be loaded in the CMP. String","title":"CCPA CMP Configuration"},{"location":"Gravito_CCPA_CMP/Getting_Started/#css-customization","text":"CSS customization can be done by adding the custom CSS in the style section of the CMP config. The following are the CSS classes that can be used to customize the CMP. Class Name Purpose .gravitoCcpaCmp-card to customize the CMP modal/card .gravitoCcpaCmp-logo-container to customize the CMP logo container .gravitoCcpaCmp-logo to customize the CMP logo image .gravitoCcpaCmp-title to customize the CMP title .gravitoCcpaCmp-description to customize the CMP description .gravitoCcpaCmp-checkbox-container to customize the consent container .gravitoCcpaCmp-checkbox to customize the checkbox styling .gravitoCcpaCmp-row to customize the checkbox label .gravitoCcpaCmp-btn-container button to customize the CMP action button","title":"CSS Customization"},{"location":"Gravito_CCPA_CMP/Getting_Started/#example-configuration","text":"{ \"title\": \"Gravito CCPA CMP\", \"introductionText\": \"We value your privacy. Our website uses cookies and similar technologies to enhance your experience. By continuing to browse, you consent to their use as outlined in our <a href='' target='_blank'>Privacy Policy</a>. You may manage your preferences at any time.\", \"cookieName\": \"usprivacy\", \"cookieExpiry\": 30, \"defaultUspString\": \"1YYY\", \"consents\": [ { \"name\": \"notice\", \"label\": \"Notice/Opportunity to Opt Out\" }, { \"name\": \"optOutSale\", \"label\": \"Opt-Out Sale\" }, { \"name\": \"lspa\", \"label\": \"LSPA Covered Transaction\" } ], \"logoUrl\": \"https://cdn.gravito.net/logos/Gravito-logo-Dark.png\", \"style\": { \"customCss\": \"\", \"fonts\": [ { \"url\": \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", \"unicodeRange\": \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\" }, { \"url\": \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", \"unicodeRange\": \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\" } ] }, \"componentUrl\": \"https://gravitocdn.blob.core.windows.net/ccpa\" }","title":"Example Configuration"},{"location":"Gravito_CCPA_CMP/Getting_Started/#deployment","text":"To deploy the Gravito CCPA CMP on your website, there are majorly two ways: Deployment Script : You have to paste the deployment script provided by gravito into your website's HTML code just after the opening <body> tag. The deployment script will load the CMP on your website. <script> var gravitoCMPConfig = { title: \"Gravito CCPA CMP\", introductionText: \"We value your privacy. Our website uses cookies and similar technologies to enhance your experience. By continuing to browse, you consent to their use as outlined in our <a href='https://www.gravito.net/privacy-notice/' target='_blank'>Privacy Policy</a>. You may manage your preferences at any time.\", cookieName: \"usprivacy\", cookieExpiry: 30, defaultUspString: \"1YYY\", consents: [ { name: \"notice\", label: \"Notice/Opportunity to Opt Out\", }, { name: \"optOutSale\", label: \"Opt-Out Sale\", }, { name: \"lspa\", label: \"LSPA Covered Transaction\", }, ], logoUrl: \"https://cdn.gravito.net/logos/Gravito-logo-Dark.png\", style: { customCss: \"\", fonts: [ { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], }, componentUrl: \"https://gravitocdn.blob.core.windows.net/ccpa\", }; window.gravitoCMPConfig = gravitoCMPConfig; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.type = \"module\"; gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv3/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"CCPA\"); }; document.body.appendChild(gravitoSDKTag); </script> Using GTM : You can also deploy the CMP using Google Tag Manager (GTM). You have to create a GTM tag and paste the deployment script provided by gravito into the tag. <script> var gravitoCMPConfig = { title: \"Gravito CCPA CMP\", introductionText: \"We value your privacy. Our website uses cookies and similar technologies to enhance your experience. By continuing to browse, you consent to their use as outlined in our <a href='https://www.gravito.net/privacy-notice/' target='_blank'>Privacy Policy</a>. You may manage your preferences at any time.\", cookieName: \"usprivacy\", cookieExpiry: 30, defaultUspString: \"1YYY\", consents: [ { name: \"notice\", label: \"Notice/Opportunity to Opt Out\", }, { name: \"optOutSale\", label: \"Opt-Out Sale\", }, { name: \"lspa\", label: \"LSPA Covered Transaction\", }, ], logoUrl: \"https://cdn.gravito.net/logos/Gravito-logo-Dark.png\", style: { customCss: \"\", fonts: [ { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], }, componentUrl: \"https://gravitocdn.blob.core.windows.net/ccpa\", }; window.gravitoCMPConfig = gravitoCMPConfig; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.type = \"module\"; gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv3/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"CCPA\"); }; document.body.appendChild(gravitoSDKTag); </script> Now trigger the GTM tag from your website to load the CMP. Previous Next","title":"Deployment"},{"location":"Gravito_Intelligent_CMP/Advanced_Features/","text":"Advanced Features Here are the links to the advanced features supported by Gravito Intelligent CMP Google Consent Mode V2 Implementing Google Consent Mode V2 Microsoft Consent Mode Implementing Microsoft Consent Mode Customization Advanced Customization Options Latest Gravito Configuration example (json) Headless CMP using Gravito Integrations How to integrate events emitted by the Gravito Intelligent CMP? Support for CCPA Getting Started About CCPA","title":"Advanced Features"},{"location":"Gravito_Intelligent_CMP/Advanced_Features/#advanced-features","text":"Here are the links to the advanced features supported by Gravito Intelligent CMP","title":"Advanced Features"},{"location":"Gravito_Intelligent_CMP/Advanced_Features/#google-consent-mode-v2","text":"Implementing Google Consent Mode V2","title":"Google Consent Mode V2"},{"location":"Gravito_Intelligent_CMP/Advanced_Features/#microsoft-consent-mode","text":"Implementing Microsoft Consent Mode","title":"Microsoft Consent Mode"},{"location":"Gravito_Intelligent_CMP/Advanced_Features/#customization","text":"Advanced Customization Options Latest Gravito Configuration example (json) Headless CMP using Gravito","title":"Customization"},{"location":"Gravito_Intelligent_CMP/Advanced_Features/#integrations","text":"How to integrate events emitted by the Gravito Intelligent CMP?","title":"Integrations"},{"location":"Gravito_Intelligent_CMP/Advanced_Features/#support-for-ccpa","text":"Getting Started About CCPA","title":"Support for CCPA"},{"location":"Gravito_Intelligent_CMP/GTM_Template/","text":"GTM Template Gravito CMP now can be deployed using GTM Template. In order to use this feature, check the \"GTM Template?\" option in the deploy section of the configuration wizard. If the config is published using the \"GTM Template \" option then in the list view we can see an additional GTM icon in front of it. By clicking on the icon we can copy the Unique GTM token of the config which can be used in your GTM container. Now go to your Google Tag Manager, and while creating a GTM tag search for Gravito Lite Custom Template Inside the tag configuration UI, paste your GTM token, Which you copied from the configurator UI of the Gravito admin portal. Add your required Triggers and then click on save. This template will now use the configuration that you have created and will add Gravito CMP to your website.","title":"GTM Template"},{"location":"Gravito_Intelligent_CMP/GTM_Template/#gtm-template","text":"Gravito CMP now can be deployed using GTM Template. In order to use this feature, check the \"GTM Template?\" option in the deploy section of the configuration wizard. If the config is published using the \"GTM Template \" option then in the list view we can see an additional GTM icon in front of it. By clicking on the icon we can copy the Unique GTM token of the config which can be used in your GTM container. Now go to your Google Tag Manager, and while creating a GTM tag search for Gravito Lite Custom Template Inside the tag configuration UI, paste your GTM token, Which you copied from the configurator UI of the Gravito admin portal. Add your required Triggers and then click on save. This template will now use the configuration that you have created and will add Gravito CMP to your website.","title":"GTM Template"},{"location":"Gravito_Intelligent_CMP/Getting_Started/","text":"Getting Started Gravito Intelligent CMP is a consent management solution that helps to collect consent for data collection, analytics, targeting, personalization and whatever your business needs to fulfil legal or regulatory terms. \ud83d\udca1 Note: Have you registered with Gravito yet? Please find here on how to get registered with Gravito We have the Gravito Intelligent CMP configurator using which you can create the consent banner based on your needs \ud83d\udca1 Note: If you are advertiser or publisher, you might benefit from GravitoTCF 2.2 compliant CMP but not every use case is the same so choice is yours. To include light CMP in copy and paste following script in your website. Note Replace gravitoCMPConifg with your config object. window.gravitoCMPConfig = gravitoCMPConfig; // your config object var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag);","title":"Getting Started"},{"location":"Gravito_Intelligent_CMP/Getting_Started/#getting-started","text":"Gravito Intelligent CMP is a consent management solution that helps to collect consent for data collection, analytics, targeting, personalization and whatever your business needs to fulfil legal or regulatory terms. \ud83d\udca1 Note: Have you registered with Gravito yet? Please find here on how to get registered with Gravito We have the Gravito Intelligent CMP configurator using which you can create the consent banner based on your needs \ud83d\udca1 Note: If you are advertiser or publisher, you might benefit from GravitoTCF 2.2 compliant CMP but not every use case is the same so choice is yours. To include light CMP in copy and paste following script in your website. Note Replace gravitoCMPConifg with your config object. window.gravitoCMPConfig = gravitoCMPConfig; // your config object var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag);","title":"Getting Started"},{"location":"Gravito_Intelligent_CMP/Release_Notes/","text":"Release Notes Gravito Intelligent CMP release notes. Version 4.0.7 Multiple Language Support: Light CMP now supports multiple languages within the user interface, offering a more inclusive experience for users worldwide. Users can access a language selection dropdown within the CMP UI, allowing them to translate the interface into their preferred language. This feature empowers publishers to provide a localized experience, catering to diverse language preferences and improving accessibility for users globally. Google Consent Mode V2 Integration: Light CMP now integrates Google Consent Mode V2 functionalities, enabling publishers to leverage advanced consent management features offered by Google. This integration enhances the CMP\u2019s capabilities in managing user consent preferences for data collection and processing, especially for advertising purposes. With Google Consent Mode V2 support, publishers can align their consent mechanisms with evolving privacy regulations and user expectations, ensuring more nuanced control over data usage. More about the Google Consent Mode V2 is available here Version 4.0.5 Release date: 07/11/2023 New features to our admin portal Gravito CMP now, supports saving configuration in draft status. Customers can revisit their draft configurations and can make changes to it till they decide to publish it. Gravito CMP, provides following deployment options now to make it easy to integrate with your website, customers will get to choose their preferred deployment option and would be guided with the deployment steps. GTM Template WordPress plugin Standard Tag management based deployment Version 4.0.0 New major release SDK v2 compatibility. Feature to capture CMP events such as Accept-All, and Reject-All, and have a report generated on the Admin portal. Prebid.js user Id support with Light CMP. Version 3.0.0 New major release, introducing headless mode and other major improvements. As this version introduces new UI elements and third layer, release 1 and 2 deployments will not automatically upgrade, the jump needs to be performed manually (by loading \u201c_latest_3\u201d scripts). As the logic for look & feel customization changes entirely, some configuration changes will need to be made to migrate from R2 to R3, please contact gravito support for assistance. Version 2.0.5 First layer supports now \u201cReject all\u201d button, enable it by defining third button label for first layer: actions: [\"Asetukset\",\"Hyv\u00e4ksy kaikki\",\"Est\u00e4 kaikki\"] Version 2.0.4 Max-width of the screen is changed to 100px with small screens. Version 2.0.3 CMP cookie content encoded (allows special characters in names of consent groups). Version 2.0.2 Minor bug and CSS fixes. Version 2.0.1 Support for Gravito SDK (enables e.g. integration with Gravito CDP), naming changes, minor enhancements. Version 1.0.4 Minor bug fixes, cookie setting to support subdomains added. Add following to configuration of CMP: useTopDomain:true Version 1.0.3 CSS fixes, support for RTL. Version 1.0.2 CSS fixes, minor bug fixes Version 1.0.1 Added support for Google Consent Mode (beta), see separate page for more details. Version 1.0.0 Fully responsive, mobile optimized UI Presentation, CMP core logic and configuration are separated to allow maximum customization flexibility and deployment strategies Event-driven, user activity (consents, rejections etc.) emits events that can trigger ad/martech tags, data to analytics etc. Localization through configuration file Standard, tested deployment with tag management systems like Google Tag Manager, Tealium iQ and Ensighten","title":"Release Notes"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#release-notes","text":"Gravito Intelligent CMP release notes.","title":"Release Notes"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-407","text":"Multiple Language Support: Light CMP now supports multiple languages within the user interface, offering a more inclusive experience for users worldwide. Users can access a language selection dropdown within the CMP UI, allowing them to translate the interface into their preferred language. This feature empowers publishers to provide a localized experience, catering to diverse language preferences and improving accessibility for users globally. Google Consent Mode V2 Integration: Light CMP now integrates Google Consent Mode V2 functionalities, enabling publishers to leverage advanced consent management features offered by Google. This integration enhances the CMP\u2019s capabilities in managing user consent preferences for data collection and processing, especially for advertising purposes. With Google Consent Mode V2 support, publishers can align their consent mechanisms with evolving privacy regulations and user expectations, ensuring more nuanced control over data usage. More about the Google Consent Mode V2 is available here","title":"Version 4.0.7"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-405","text":"Release date: 07/11/2023 New features to our admin portal Gravito CMP now, supports saving configuration in draft status. Customers can revisit their draft configurations and can make changes to it till they decide to publish it. Gravito CMP, provides following deployment options now to make it easy to integrate with your website, customers will get to choose their preferred deployment option and would be guided with the deployment steps. GTM Template WordPress plugin Standard Tag management based deployment","title":"Version 4.0.5"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-400","text":"New major release SDK v2 compatibility. Feature to capture CMP events such as Accept-All, and Reject-All, and have a report generated on the Admin portal. Prebid.js user Id support with Light CMP.","title":"Version 4.0.0"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-300","text":"New major release, introducing headless mode and other major improvements. As this version introduces new UI elements and third layer, release 1 and 2 deployments will not automatically upgrade, the jump needs to be performed manually (by loading \u201c_latest_3\u201d scripts). As the logic for look & feel customization changes entirely, some configuration changes will need to be made to migrate from R2 to R3, please contact gravito support for assistance.","title":"Version 3.0.0"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-205","text":"First layer supports now \u201cReject all\u201d button, enable it by defining third button label for first layer: actions: [\"Asetukset\",\"Hyv\u00e4ksy kaikki\",\"Est\u00e4 kaikki\"]","title":"Version 2.0.5"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-204","text":"Max-width of the screen is changed to 100px with small screens.","title":"Version 2.0.4"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-203","text":"CMP cookie content encoded (allows special characters in names of consent groups).","title":"Version 2.0.3"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-202","text":"Minor bug and CSS fixes.","title":"Version 2.0.2"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-201","text":"Support for Gravito SDK (enables e.g. integration with Gravito CDP), naming changes, minor enhancements.","title":"Version 2.0.1"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-104","text":"Minor bug fixes, cookie setting to support subdomains added. Add following to configuration of CMP: useTopDomain:true","title":"Version 1.0.4"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-103","text":"CSS fixes, support for RTL.","title":"Version 1.0.3"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-102","text":"CSS fixes, minor bug fixes","title":"Version 1.0.2"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-101","text":"Added support for Google Consent Mode (beta), see separate page for more details.","title":"Version 1.0.1"},{"location":"Gravito_Intelligent_CMP/Release_Notes/#version-100","text":"Fully responsive, mobile optimized UI Presentation, CMP core logic and configuration are separated to allow maximum customization flexibility and deployment strategies Event-driven, user activity (consents, rejections etc.) emits events that can trigger ad/martech tags, data to analytics etc. Localization through configuration file Standard, tested deployment with tag management systems like Google Tag Manager, Tealium iQ and Ensighten","title":"Version 1.0.0"},{"location":"Gravito_Intelligent_CMP/Setup_and_Design/","text":"Gravito Intelligent CMP Setup can be done using Gravito CMP Configurator on Gravito\u2019s Admin Portal. Go to CMP>>Gravito CMP configurator. You can choose the language of your choice when creating your own CMP Config Do you want to try out how our configuration is? You can check it out here Try out now","title":"Setup and Design"},{"location":"Gravito_Intelligent_CMP/advanced/Consent_based_rendering/","text":"Render Certain Elements Based on Consent Value Provided by Gravito CMP Gravito CMP emits events to the DOM whenever a user takes any action on the consent banner. You can use these events to render certain elements based on the consent value provided by Gravito CMP. To listen to these events, you can use the following code snippet: window.addEventListener(\"gravito:cmp:light\", function (e) { var syncEvents = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", \"cmploaded\", ]; if (syncEvents.includes(e.detail.eventType)) { // Consent values were updated/changed // \"opt-in:previously\" event is fired when the user has already given consent and has cookies } }); When these events are triggered, you can check the consent value and update the element visibility. Here is an example of how to do that: function updateViewState() { console.log(\"updateViewState\"); let id = 2; // ID of the consent you want to check let elementID = \"YOUR_ELEMENT_ID\"; // ID of the map or element // Check the consent value for cookies let isCookieConsent = window.gravitoLightCMP.consentHandler.getConsentValue(2); // Show or hide the element based on consent value if (!isCookieConsent) { document.getElementById(elementID).style.display = \"none\"; } else { document.getElementById(elementID).style.display = \"block\"; } } You can call this function in the event listener to update the view state whenever the consent value changes: function updateViewState() { console.log(\"updateViewState\"); let id = 2; // ID of the consent you want to check let elementID = \"YOUR_ELEMENT_ID\"; // ID of the map or element let isCookieConsent = window.gravitoLightCMP.consentHandler.getConsentValue(2); if (!isCookieConsent) { document.getElementById(elementID).style.display = \"none\"; } else { document.getElementById(elementID).style.display = \"block\"; } } window.addEventListener(\"gravito:cmp:light\", function (e) { var syncEvents = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", \"cmploaded\", ]; if (syncEvents.includes(e.detail.eventType)) { updateViewState(); } }); In some cases, you might want to show a button or clickable item as a placeholder for hidden elements when consent is not given. On clicking the button, you can call a method to accept all consents and show the hidden elements. The CMP provides a method to accept all consents. You can call this method on button click and then call the updateViewState method to show the elements: function buttonClick() { window.gravitoLightCMP.useractionHandler.saveAll(); updateViewState(); }","title":"Render Certain Elements Based on Consent Value Provided by Gravito CMP"},{"location":"Gravito_Intelligent_CMP/advanced/Consent_based_rendering/#render-certain-elements-based-on-consent-value-provided-by-gravito-cmp","text":"Gravito CMP emits events to the DOM whenever a user takes any action on the consent banner. You can use these events to render certain elements based on the consent value provided by Gravito CMP. To listen to these events, you can use the following code snippet: window.addEventListener(\"gravito:cmp:light\", function (e) { var syncEvents = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", \"cmploaded\", ]; if (syncEvents.includes(e.detail.eventType)) { // Consent values were updated/changed // \"opt-in:previously\" event is fired when the user has already given consent and has cookies } }); When these events are triggered, you can check the consent value and update the element visibility. Here is an example of how to do that: function updateViewState() { console.log(\"updateViewState\"); let id = 2; // ID of the consent you want to check let elementID = \"YOUR_ELEMENT_ID\"; // ID of the map or element // Check the consent value for cookies let isCookieConsent = window.gravitoLightCMP.consentHandler.getConsentValue(2); // Show or hide the element based on consent value if (!isCookieConsent) { document.getElementById(elementID).style.display = \"none\"; } else { document.getElementById(elementID).style.display = \"block\"; } } You can call this function in the event listener to update the view state whenever the consent value changes: function updateViewState() { console.log(\"updateViewState\"); let id = 2; // ID of the consent you want to check let elementID = \"YOUR_ELEMENT_ID\"; // ID of the map or element let isCookieConsent = window.gravitoLightCMP.consentHandler.getConsentValue(2); if (!isCookieConsent) { document.getElementById(elementID).style.display = \"none\"; } else { document.getElementById(elementID).style.display = \"block\"; } } window.addEventListener(\"gravito:cmp:light\", function (e) { var syncEvents = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", \"cmploaded\", ]; if (syncEvents.includes(e.detail.eventType)) { updateViewState(); } }); In some cases, you might want to show a button or clickable item as a placeholder for hidden elements when consent is not given. On clicking the button, you can call a method to accept all consents and show the hidden elements. The CMP provides a method to accept all consents. You can call this method on button click and then call the updateViewState method to show the elements: function buttonClick() { window.gravitoLightCMP.useractionHandler.saveAll(); updateViewState(); }","title":"Render Certain Elements Based on Consent Value Provided by Gravito CMP"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/","text":"Google Consent Mode v2 What is Google Consent Mode v2? Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) : Consent Signals: ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Official Google Documentation on Consent Mode v2 Enabling Google Consent Mode v2 in Gravito CMP Creating Config in Admin Portal Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP Config. Fill in the basic information , then click Next at the bottom-left corner. On the Consent Category page: Tick the checkbox labeled \"Use GCMv2\" . This will open a section for Google Consent Mode mapping . Use GCM Advance Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . Note: when the using GCM Basic Mode, the GTM template deployment option will not be available. Consent Mapping: You\u2019ll now see dropdowns to map categories for the following Google consent signals: - ad_storage - analytics_storage - ad_user_data - ad_personalization For each of these, select the relevant consent category from the dropdown list. You will see default mappings, but you can change them as per your requirements. Once mappings are complete, click Save at the bottom-right. You may continue filling out the other CMP configuration steps, or jump directly to the \"Deploy\" tab. Gravito CMP supports two ways to enable Consent Mode v2: 1. With GTM Template In the Deploy tab, you\u2019ll see multiple deployment options. Click on the \"GTM Template\" option. Click \"Publish\" . Note: When you click Publish , the system will validate all required fields. If anything is missing, it will display an error. Once the config is published, you\u2019ll be provided with a button labeled \"Copy GTM Token\" . Clicking this will copy the GTM token to your clipboard. We will use this token in the GTM template. Login to your Google Tag Manager account and click on a new Tag . Tag Configuration: Choose the Gravito Consent Management template from the list. Fill the fields: Field Description Gravito Token Paste the CMP token copied from Gravito portal Gravito CMP type Select Gravito CMP (or other type if applicable) \u2705 Enable Google Consent Mode Enable this to activate GCM support Google Consent Mode Settings Option Description Wait for update Time to wait (in ms) for consent before proceeding (default: 2000 ) Enable URL passthrough Optional: Enable if you need to forward consent state via query params Redact ads data Set to Dynamic (based on ad_storage) for flexible ad personalization Default Consent State (Optional) Configure regional preferences if needed. You can leave it blank to apply globally. Add Trigger and Save Add a Page View or All Pages trigger to fire this tag on every page load. Click Save . Publish the GTM Container Submit and Publish the container. CMP will now load and handle consent dynamically on your site. 2. Without GTM Template Deployment (Without Template): In the Deploy tab, you'll see multiple deployment options. Since we\u2019re not using the GTM template, click on \"Deployment Script\" . Click \"Publish\" . Note: When you click Publish , the system will validate all required fields. If anything is missing, it will display an error. Once the config is published, you\u2019ll be provided with a deployment script , which you can embed directly in your webpage to activate Consent Mode v2. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. below the comment // Insert your GTM script here you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\");","title":"Google Consent Mode v2"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#google-consent-mode-v2","text":"","title":"Google Consent Mode v2"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#what-is-google-consent-mode-v2","text":"Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) :","title":"What is Google Consent Mode v2?"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#consent-signals","text":"ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Official Google Documentation on Consent Mode v2","title":"Consent Signals:"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#enabling-google-consent-mode-v2-in-gravito-cmp","text":"","title":"Enabling Google Consent Mode v2 in Gravito CMP"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#creating-config-in-admin-portal","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP Config. Fill in the basic information , then click Next at the bottom-left corner. On the Consent Category page: Tick the checkbox labeled \"Use GCMv2\" . This will open a section for Google Consent Mode mapping . Use GCM Advance Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . Note: when the using GCM Basic Mode, the GTM template deployment option will not be available.","title":"Creating Config in Admin Portal"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#consent-mapping","text":"You\u2019ll now see dropdowns to map categories for the following Google consent signals: - ad_storage - analytics_storage - ad_user_data - ad_personalization For each of these, select the relevant consent category from the dropdown list. You will see default mappings, but you can change them as per your requirements. Once mappings are complete, click Save at the bottom-right. You may continue filling out the other CMP configuration steps, or jump directly to the \"Deploy\" tab. Gravito CMP supports two ways to enable Consent Mode v2:","title":"Consent Mapping:"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#1-with-gtm-template","text":"In the Deploy tab, you\u2019ll see multiple deployment options. Click on the \"GTM Template\" option. Click \"Publish\" . Note: When you click Publish , the system will validate all required fields. If anything is missing, it will display an error. Once the config is published, you\u2019ll be provided with a button labeled \"Copy GTM Token\" . Clicking this will copy the GTM token to your clipboard. We will use this token in the GTM template. Login to your Google Tag Manager account and click on a new Tag .","title":"1. With GTM Template"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#tag-configuration","text":"Choose the Gravito Consent Management template from the list.","title":"Tag Configuration:"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#fill-the-fields","text":"Field Description Gravito Token Paste the CMP token copied from Gravito portal Gravito CMP type Select Gravito CMP (or other type if applicable) \u2705 Enable Google Consent Mode Enable this to activate GCM support","title":"Fill the fields:"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#google-consent-mode-settings","text":"Option Description Wait for update Time to wait (in ms) for consent before proceeding (default: 2000 ) Enable URL passthrough Optional: Enable if you need to forward consent state via query params Redact ads data Set to Dynamic (based on ad_storage) for flexible ad personalization","title":"Google Consent Mode Settings"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#default-consent-state-optional","text":"Configure regional preferences if needed. You can leave it blank to apply globally.","title":"Default Consent State (Optional)"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#add-trigger-and-save","text":"Add a Page View or All Pages trigger to fire this tag on every page load. Click Save .","title":"Add Trigger and Save"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#publish-the-gtm-container","text":"Submit and Publish the container. CMP will now load and handle consent dynamically on your site.","title":"Publish the GTM Container"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#2-without-gtm-template","text":"","title":"2. Without GTM Template"},{"location":"Gravito_Intelligent_CMP/advanced/Google_consent_mode_v2/#deployment-without-template","text":"In the Deploy tab, you'll see multiple deployment options. Since we\u2019re not using the GTM template, click on \"Deployment Script\" . Click \"Publish\" . Note: When you click Publish , the system will validate all required fields. If anything is missing, it will display an error. Once the config is published, you\u2019ll be provided with a deployment script , which you can embed directly in your webpage to activate Consent Mode v2. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. below the comment // Insert your GTM script here you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\");","title":"Deployment (Without Template):"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/","text":"Headless CMP In the headless version of Gravito Intelligent CMP you can render the first layer and second layer of CMP into to your own container elements that are present on your website. It provides a way to use your own CSS (and design system) to style the elements on CMP modals. Using your own elements for CMP instead of default modals To render the first-layer and second-layer of Gravito Intelligent CMP into your own container elements you need to add following fields inside core section of your CMP config gravitoCMPconfig={ core:{ // ... other properties ... firstLayerId: \"cmpfirstlayer\", // elementID for CMP 1st layer secondLayerId: \"cmpsecondlayer\", // elementID for CMP 2nd layer thirdLayerId: \"cmpthirdlayer\", // elementID for CMP 3rd layer } } NOTE: If CMP do not find these elements in DOM i.e document.getElementById(id)===undefined, then CMP will use it's own container instead and append those inside the body of html. Keep these fields undefined if you want to use CMP default modals. Using your own CSS to style the elements With this headless version you can use customize the UI of CMP by providing your own CSS for the given class of CMP element. To configure CMP to use custom CSS file you change \"useCustomCss:true\" inside style section of your config. gravitoCMPconfig={ style:{ ///other properties useCustomCss: true,// false to use gravito's Default CSS } } NOTE: You should ensure that your custom css file is loaded in DOM before loading CMP. Make sure your CSS file has all classes specified in CMP CSS file. You can see the sample CSS file here . Examples Customizing CMP UI using \"useCustomCss\" option and Gravito's CSS file For Example let's assume that you need to change the color of \"Accept All\" button on first layer of CMP. By default it is orange. Before: Step 1 : Copy the custom CSS file provided by gravito into your css file, you can find the file here . Step 2 : find the CSS class name \".gravitoLightCMP-layer1-actions-accept-all\". It will look like this .gravitoLightCMP-layer1-actions-accept-all { outline: none; margin: 10px; font-size: 18px; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; color: #fff; box-sizing: border-box; display: block; border-radius: 22px; border: none; cursor: pointer; height: 40px; width: auto; padding: 0px 12px; margin: 0px 5px; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); font-family: \"gravitoFont\"; background-color: #ffa500; font-size: 10pt; } Step 3: Change the background color property value to the color you want to use,here I will make it \"purple\". Now the class should look like this .gravitoLightCMP-layer1-actions-accept-all { outline: none; margin: 10px; font-size: 18px; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; color: #fff; box-sizing: border-box; display: block; border-radius: 22px; border: none; cursor: pointer; height: 40px; width: auto; padding: 0px 12px; margin: 0px 5px; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); font-family: \"gravitoFont\"; background-color: purple; font-size: 10pt; } Step 4 : Now Add this file to your website. Make sure to place it above the CMP's deployment scripts as the style should be loaded inside the DOM before loading CMP. After:","title":"Headless CMP"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/#headless-cmp","text":"In the headless version of Gravito Intelligent CMP you can render the first layer and second layer of CMP into to your own container elements that are present on your website. It provides a way to use your own CSS (and design system) to style the elements on CMP modals.","title":"Headless CMP"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/#using-your-own-elements-for-cmp-instead-of-default-modals","text":"To render the first-layer and second-layer of Gravito Intelligent CMP into your own container elements you need to add following fields inside core section of your CMP config gravitoCMPconfig={ core:{ // ... other properties ... firstLayerId: \"cmpfirstlayer\", // elementID for CMP 1st layer secondLayerId: \"cmpsecondlayer\", // elementID for CMP 2nd layer thirdLayerId: \"cmpthirdlayer\", // elementID for CMP 3rd layer } } NOTE: If CMP do not find these elements in DOM i.e document.getElementById(id)===undefined, then CMP will use it's own container instead and append those inside the body of html. Keep these fields undefined if you want to use CMP default modals.","title":"Using your own elements for CMP instead of default modals"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/#using-your-own-css-to-style-the-elements","text":"With this headless version you can use customize the UI of CMP by providing your own CSS for the given class of CMP element. To configure CMP to use custom CSS file you change \"useCustomCss:true\" inside style section of your config. gravitoCMPconfig={ style:{ ///other properties useCustomCss: true,// false to use gravito's Default CSS } } NOTE: You should ensure that your custom css file is loaded in DOM before loading CMP. Make sure your CSS file has all classes specified in CMP CSS file. You can see the sample CSS file here .","title":"Using your own CSS to style the elements"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/#examples","text":"","title":"Examples"},{"location":"Gravito_Intelligent_CMP/advanced/Headless_Cmp/#customizing-cmp-ui-using-usecustomcss-option-and-gravitos-css-file","text":"For Example let's assume that you need to change the color of \"Accept All\" button on first layer of CMP. By default it is orange. Before: Step 1 : Copy the custom CSS file provided by gravito into your css file, you can find the file here . Step 2 : find the CSS class name \".gravitoLightCMP-layer1-actions-accept-all\". It will look like this .gravitoLightCMP-layer1-actions-accept-all { outline: none; margin: 10px; font-size: 18px; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; color: #fff; box-sizing: border-box; display: block; border-radius: 22px; border: none; cursor: pointer; height: 40px; width: auto; padding: 0px 12px; margin: 0px 5px; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); font-family: \"gravitoFont\"; background-color: #ffa500; font-size: 10pt; } Step 3: Change the background color property value to the color you want to use,here I will make it \"purple\". Now the class should look like this .gravitoLightCMP-layer1-actions-accept-all { outline: none; margin: 10px; font-size: 18px; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; color: #fff; box-sizing: border-box; display: block; border-radius: 22px; border: none; cursor: pointer; height: 40px; width: auto; padding: 0px 12px; margin: 0px 5px; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); font-family: \"gravitoFont\"; background-color: purple; font-size: 10pt; } Step 4 : Now Add this file to your website. Make sure to place it above the CMP's deployment scripts as the style should be loaded inside the DOM before loading CMP. After:","title":"Customizing CMP UI using \"useCustomCss\" option and Gravito's CSS file"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/","text":"Version 4 (Latest) How it works? Configuration Light CMP can be configure and customize as per your need with the help of configuration object.You can generate this configuration object using our Admin Portal or you can create your own from scratch. Following is the example of config object for light CMP. var gravitoCMPConfig={ \"settings\": { \"type\": \"Light\", \"useGCM\": false, \"useGravitoBackend\": false, \"backendUrl\": \"\", \"catchCMPEvents\": true, \"sdkVersion\": 2, \"gtmTags\": [] }, \"core\": { \"cookieName\": \"GCString\", \"languageCode\": \"en\", \"cookieExpiry\": 365, \"settingBtnId\": \"manageSettings\", \"firstLayerId\": \"\", \"secondLayerId\": \"\", \"cookieReportLayerId\": \"\", \"syncEvents\": [ \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"layer2:opt-in:selected\", \"layer2:opt-out:all\", \"layer1:opt-out:all\" ], \"syncAfter\": 1800, \"useTopDomain\": false, \"adsConsentId\": 4, \"analyticsConsentId\": 3, \"version\": 1, \"consents\": [ { \"type\": \"consent\", \"id\": 1, \"name\": \"Essential cookies\", \"description\": \"Essential cookies and similar technologies are implementing the basic functions of the website such as page navigation, use of forms and shopping cart functionality. Without these technologies the website will not work properly.\", \"isConsentable\": false }, { \"type\": \"consent\", \"id\": 2, \"name\": \"Functional cookies\", \"description\": \"Functional cookies and similar technologies make it possible to save information that changes the way the website appears to you or functions, e.g. your preferred language.\", \"isConsentable\": true }, { \"type\": \"consent\", \"id\": 3, \"name\": \"Statistical cookies\", \"description\": \"Statistical cookies and similar technologies allow us to collect information about how our website is used. This information helps us to improve the content and usability of the website.\", \"isConsentable\": true }, { \"type\": \"consent\", \"id\": 4, \"name\": \"Marketing & advertising cookies\", \"description\": \"Marketing cookies and similar technologies are used to track visitors across websites. The intention is to display ads that are relevant and interesting to you and thus more valuable for us and third-party advertisers.\", \"isConsentable\": true } ] }, \"text\": { \"firstLayer\": { \"title\": \"We need your consent to provide personalized experience\", \"introductionText\": \"We and our third-party vendors are collecting personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", \"legalFooter\": \"By accepting, you are allowing data processing within the service, rejection can affect the user experience.\", \"privacyPolicyUrl\": \"https://site.url.invalid/privacy-policy\", \"privacyLabel\": \"Privacy Policy\", \"checkBoxLabels\": { \"consent\": \"Consent\" }, \"actions\": [\"Accept all\", \"Settings\", \"Reject all\"] }, \"secondLayer\": { \"title\": \"Gravito Settings\", \"introductionText\": \"Please select from the following list of purposes to help us serve you better.\", \"privacyPolicyUrl\": \"https://site.url.invalid/privacy-policy\", \"privacyLabel\": \"Privacy Policy\", \"checkBoxLabels\": { \"consent\": \"Consent\" }, \"actions\": [\"Accept all\", \"Accept selected\", \"Reject all\"] }, \"confirmationLayer\": { \"confirmationForUncheck\": { \"heading\": \"Are you sure you want to disable?\", \"paragraphs\": [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\" ] }, \"confirmationForAcceptSelected\": { \"heading\": \"Are you sure you want to disable?\", \"paragraphs\": [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\" ] }, \"actions\": [\"Cancel\", \"Yes\"] }, \"cookieReportLayer\": { \"buttonTitle\": \"Cookie Report\", \"heading\": \"Cookie Reports layer header\", \"introductionText\": \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", \"beforeAcceptHeader\": \"Before Accepting\", \"afterAcceptHeader\": \"After Accepting\", \"nameHeader\": \"Name\", \"domainHeader\": \"Domain\", \"descriptionHeader\": \"Description\", \"cookieTypeHeader\": \"Cookie Type\", \"expiryHeader\": \"Expiry in days\", \"httpOnlyHeader\": \"Http Only\", \"noCookieDataMessage\": \"No scan results available\", \"noCookieDataBeforeAcceptingMsg\": \"No cookies were found before Accepting the consents on this domain.\", \"noCookieDataAfterAcceptingMsg\": \"No cookies were found after Accepting the consents on this domain \" } }, \"style\": { \"customCSS\": \"\", \"logoUrl\": \"https://cdn.gravito.net/logos/gravito_logo.jpg\", \"logoSvg\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"105\\\" height=\\\"18\\\" viewBox=\\\"0 0 105 18\\\"><path fill=\\\"#1C4598\\\" fill-rule=\\\"evenodd\\\" d=\\\"M88.922 10.934h6.569l-3.285-6.331-3.284 6.331zm9.95 6.844l-1.563-3.046H87.086l-1.545 3.045h-5.837L89.07.29h6.568L105 17.778h-6.128zM73.445.291h5.284v17.487h-5.284V.291zm-9.152 0h6.974l-9.413 8.18 10.617 9.307h-7.463l-9.64-9.12L64.293.291zM50.085 17.778h5.283V.291h-5.283v17.487zm-9.04-4.209c1.156 0 1.563-.069 1.84-.325.258-.24.372-.548.372-1.576V6.332c0-1.028-.114-1.334-.372-1.574-.277-.258-.684-.326-1.84-.326h-8.208c-1.155 0-1.561.068-1.837.326-.26.24-.374.546-.374 1.574v5.336c0 1.028.114 1.337.374 1.576.276.256.682.325 1.837.325h8.209zm6.976-1.198c0 2.43-.423 3.269-1.123 4.072C45.826 17.64 44.265 18 41.258 18h-8.632c-3.007 0-4.57-.36-5.641-1.557-.7-.803-1.122-1.641-1.122-4.072V5.629c0-2.43.423-3.266 1.122-4.071C28.057.36 29.619 0 32.626 0h8.633c3.006 0 4.567.36 5.64 1.558.699.805 1.122 1.642 1.122 4.071v6.742zM5.056 17.778H0V.291h8.744l10.031 13.055V.291h5.056v17.487h-8.567L5.056 4.5v13.278z\\\"/></svg>\", \"logoType\": \"img\", \"primaryColor\": \"orange\", \"secondaryColor\": \"grey\", \"disableConfirmationModal\": false, \"fonts\": [ { \"url\": \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", \"unicodeRange\": \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\" }, { \"url\": \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", \"unicodeRange\": \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\" } ] } }, Deployment Light CMP's can be deployed with the help of SDK V2. Add your config object to window.gravitoCMPConifg variable. window.gravitoCMPConfig = gravitoCMPConfig; Standalone Light CMP. To add Standalone light CMP add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag); Light CMP with backend. To add Light CMP with backend add following values to settings section of your config object window.gravitoCMPConfig = { settings: { type: \"Light\", useGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_4\", sdkVersion: 2, }, //other sections }; And add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\", \"firstParty\"); }; document.body.appendChild(gravitoSDKTag); Using GCM mode. GCM support can be added to both standalone CMP and CMP with backend by adding useGCM property to settings section. window.gravitoCMPConfig = { settings: { type: \"Light\", useGCM: true, // add this to enable GCMuseGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_2\", sdkVersion: 2, }, //other sections }; Sample Scripts Light CMP in Modal View. By using customCSS property you can render CMP in modal view. Following script demonstrates this type of customization. var customCss = \"gravitoLightCMP-layer1-logo{ margin: 0 25px 0 0 !important; width: 80px !important; }.gravitoLightCMP-layer1-modal,.gravitoLightCMP-layer2-modal {width: 75%;top: 50%;left: 50%;-ms-transform: translate(-50%, -50%);transform: translate(-50%, -50%);bottom: unset;}\"; window.gravitoCMPConfig = { settings: { type: \"Light\", useGCM: false, useGravitoBackend: false, backendUrl: \"\", catchCMPEvents: true, sdkVersion: 2, userIdModule: false, gtmTags: [], version: \"bundle_latest_4\", }, core: { cookieName: \"GCString\", languageCode: \"en\", cookieExpiry: 365, settingBtnId: \"manageSettings\", firstLayerId: \"\", secondLayerId: \"\", cookieReportLayerId: \"\", syncEvents: [ \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"layer2:opt-in:selected\", \"layer2:opt-out:all\", \"layer1:opt-out:all\", ], syncAfter: 1800, useTopDomain: false, adsConsentId: 4, analyticsConsentId: 3, version: 1, consents: [ { type: \"consent\", id: 1, name: \"Essential cookies\", description: \"Essential cookies and similar technologies are implementing the basic functions of the website such as page navigation, use of forms and shopping cart functionality. Without these technologies the website will not work properly.\", isConsentable: false, }, { type: \"consent\", id: 2, name: \"Functional cookies\", description: \"Functional cookies and similar technologies make it possible to save information that changes the way the website appears to you or functions, e.g. your preferred language.\", isConsentable: true, }, { type: \"consent\", id: 3, name: \"Statistical cookies\", description: \"Statistical cookies and similar technologies allow us to collect information about how our website is used. This information helps us to improve the content and usability of the website.\", isConsentable: true, }, { type: \"consent\", id: 4, name: \"Marketing & advertising cookies\", description: \"Marketing cookies and similar technologies are used to track visitors across websites. The intention is to display ads that are relevant and interesting to you and thus more valuable for us and third-party advertisers.\", isConsentable: true, }, ], }, text: { firstLayer: { title: \"We need your consent to provide personalized experience\", introductionText: \"We and our third-party vendors are collecting personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", legalFooter: \"By accepting, you are allowing data processing within the service, rejection can affect the user experience.\", privacyPolicyUrl: \"https://site.url.invalid/privacy-policy\", privacyLabel: \"Privacy Policy\", checkBoxLabels: { consent: \"Consent\", }, actions: [\"Accept all\", \"Settings\", \"Reject all\"], }, secondLayer: { title: \"Gravito Settings\", introductionText: \"Please select from the following list of purposes to help us serve you better.\", privacyPolicyUrl: \"https://site.url.invalid/privacy-policy\", privacyLabel: \"Privacy Policy\", checkBoxLabels: { consent: \"Consent\", }, actions: [\"Accept all\", \"Accept selected\", \"Reject all\"], }, confirmationLayer: { confirmationForUncheck: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\", ], }, confirmationForAcceptSelected: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\", ], }, actions: [\"Cancel\", \"Yes\"], }, cookieReportLayer: { buttonTitle: \"Cookie Report\", heading: \"Cookie Reports layer header\", introductionText: \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", beforeAcceptHeader: \"Before Accepting\", afterAcceptHeader: \"After Accepting\", nameHeader: \"Name\", domainHeader: \"Domain\", descriptionHeader: \"Description\", cookieTypeHeader: \"Cookie Type\", expiryHeader: \"Expiry in days\", httpOnlyHeader: \"Http Only\", noCookieDataMessage: \"No scan results available\", noCookieDataBeforeAcceptingMsg: \"No cookies were found before Accepting the consents on this domain.\", noCookieDataAfterAcceptingMsg: \"No cookies were found after Accepting the consents on this domain \", }, }, style: { customCSS: customCss, logoUrl: \"https://cdn.gravito.net/logos/gravito_logo.jpg\", logoSvg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"105\" height=\"18\" viewBox=\"0 0 105 18\"><path fill=\"#1C4598\" fill-rule=\"evenodd\" d=\"M88.922 10.934h6.569l-3.285-6.331-3.284 6.331zm9.95 6.844l-1.563-3.046H87.086l-1.545 3.045h-5.837L89.07.29h6.568L105 17.778h-6.128zM73.445.291h5.284v17.487h-5.284V.291zm-9.152 0h6.974l-9.413 8.18 10.617 9.307h-7.463l-9.64-9.12L64.293.291zM50.085 17.778h5.283V.291h-5.283v17.487zm-9.04-4.209c1.156 0 1.563-.069 1.84-.325.258-.24.372-.548.372-1.576V6.332c0-1.028-.114-1.334-.372-1.574-.277-.258-.684-.326-1.84-.326h-8.208c-1.155 0-1.561.068-1.837.326-.26.24-.374.546-.374 1.574v5.336c0 1.028.114 1.337.374 1.576.276.256.682.325 1.837.325h8.209zm6.976-1.198c0 2.43-.423 3.269-1.123 4.072C45.826 17.64 44.265 18 41.258 18h-8.632c-3.007 0-4.57-.36-5.641-1.557-.7-.803-1.122-1.641-1.122-4.072V5.629c0-2.43.423-3.266 1.122-4.071C28.057.36 29.619 0 32.626 0h8.633c3.006 0 4.567.36 5.64 1.558.699.805 1.122 1.642 1.122 4.071v6.742zM5.056 17.778H0V.291h8.744l10.031 13.055V.291h5.056v17.487h-8.567L5.056 4.5v13.278z\"/></svg>', logoType: \"img\", primaryColor: \"orange\", secondaryColor: \"grey\", disableConfirmationModal: false, fonts: [ { url: \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag); Migrating to lightCMP Version 4 Add settings section your config Object with following properties. var gravitoCMPConfig = { settings: { type: \"Light\", useGCM: false, // Set this flag to true if you want to use Google Consent Mode with light CMP useGravitoBackend: false, // Set this flag to true if you want to use gravito backend with Light CMP backendUrl: \"\", // This will be the URL of your gravito firstparty domain for backend support EX: https://gto.yourdomain.net. if left empty it will be evaluated from your hosted domain. version: \"bundle_latest_4\", // This will be the version of your lightCMP. bundle_latest_4 is recommended sdkVersion: 2, // Don;t change this value , catchCMPEvents: false, // Set this value to true if you want to capture CMP events and generate report on https://admin.gravito.net dashborad. }, // other properties }; CSS structure in Version 4 is different from that of Version 2 so if you are comming from version 2 you will have to redo the css customization for v4 and update you customCSS property in style section of your config object. Light CMP Version 4 should be deployed with gravito SDK version 2.Change your deployment script as follows. window.gravitoCMPConfig = gravitoCMPConfig; // Replace this with your config object;var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); // For Standalone Light CMP // window.gravito.init(\"lightCMP\",firstParty); // For Light CMP with backend }; document.body.appendChild(gravitoSDKTag); Version 4 now has feature to resurface CMP to users if their is version upgrade in config. To enable this you will have to add resurfaceOnMissingVersion: true to the core section of your config. Test your implementation of Light CMP Version 4 thoroughly to ensure that all features are working as expected and that there are no issues with the updated CSS structure or GCM/backend integration. Once you have confirmed that everything is working as expected, you can proceed with deploying Light CMP Version 4 on your production website. Note Please note that this is a general guide and your specific implementation may require additional steps. It is always recommended to test your implementation thoroughly before deploying it to production. If you have any questions or issues during the migration process, please reach out to Gravito support for assistance.","title":"Version 4 (Latest)"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#version-4-latest","text":"","title":"Version 4 (Latest)"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#how-it-works","text":"","title":"How it works?"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#configuration","text":"Light CMP can be configure and customize as per your need with the help of configuration object.You can generate this configuration object using our Admin Portal or you can create your own from scratch. Following is the example of config object for light CMP. var gravitoCMPConfig={ \"settings\": { \"type\": \"Light\", \"useGCM\": false, \"useGravitoBackend\": false, \"backendUrl\": \"\", \"catchCMPEvents\": true, \"sdkVersion\": 2, \"gtmTags\": [] }, \"core\": { \"cookieName\": \"GCString\", \"languageCode\": \"en\", \"cookieExpiry\": 365, \"settingBtnId\": \"manageSettings\", \"firstLayerId\": \"\", \"secondLayerId\": \"\", \"cookieReportLayerId\": \"\", \"syncEvents\": [ \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"layer2:opt-in:selected\", \"layer2:opt-out:all\", \"layer1:opt-out:all\" ], \"syncAfter\": 1800, \"useTopDomain\": false, \"adsConsentId\": 4, \"analyticsConsentId\": 3, \"version\": 1, \"consents\": [ { \"type\": \"consent\", \"id\": 1, \"name\": \"Essential cookies\", \"description\": \"Essential cookies and similar technologies are implementing the basic functions of the website such as page navigation, use of forms and shopping cart functionality. Without these technologies the website will not work properly.\", \"isConsentable\": false }, { \"type\": \"consent\", \"id\": 2, \"name\": \"Functional cookies\", \"description\": \"Functional cookies and similar technologies make it possible to save information that changes the way the website appears to you or functions, e.g. your preferred language.\", \"isConsentable\": true }, { \"type\": \"consent\", \"id\": 3, \"name\": \"Statistical cookies\", \"description\": \"Statistical cookies and similar technologies allow us to collect information about how our website is used. This information helps us to improve the content and usability of the website.\", \"isConsentable\": true }, { \"type\": \"consent\", \"id\": 4, \"name\": \"Marketing & advertising cookies\", \"description\": \"Marketing cookies and similar technologies are used to track visitors across websites. The intention is to display ads that are relevant and interesting to you and thus more valuable for us and third-party advertisers.\", \"isConsentable\": true } ] }, \"text\": { \"firstLayer\": { \"title\": \"We need your consent to provide personalized experience\", \"introductionText\": \"We and our third-party vendors are collecting personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", \"legalFooter\": \"By accepting, you are allowing data processing within the service, rejection can affect the user experience.\", \"privacyPolicyUrl\": \"https://site.url.invalid/privacy-policy\", \"privacyLabel\": \"Privacy Policy\", \"checkBoxLabels\": { \"consent\": \"Consent\" }, \"actions\": [\"Accept all\", \"Settings\", \"Reject all\"] }, \"secondLayer\": { \"title\": \"Gravito Settings\", \"introductionText\": \"Please select from the following list of purposes to help us serve you better.\", \"privacyPolicyUrl\": \"https://site.url.invalid/privacy-policy\", \"privacyLabel\": \"Privacy Policy\", \"checkBoxLabels\": { \"consent\": \"Consent\" }, \"actions\": [\"Accept all\", \"Accept selected\", \"Reject all\"] }, \"confirmationLayer\": { \"confirmationForUncheck\": { \"heading\": \"Are you sure you want to disable?\", \"paragraphs\": [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\" ] }, \"confirmationForAcceptSelected\": { \"heading\": \"Are you sure you want to disable?\", \"paragraphs\": [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\" ] }, \"actions\": [\"Cancel\", \"Yes\"] }, \"cookieReportLayer\": { \"buttonTitle\": \"Cookie Report\", \"heading\": \"Cookie Reports layer header\", \"introductionText\": \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", \"beforeAcceptHeader\": \"Before Accepting\", \"afterAcceptHeader\": \"After Accepting\", \"nameHeader\": \"Name\", \"domainHeader\": \"Domain\", \"descriptionHeader\": \"Description\", \"cookieTypeHeader\": \"Cookie Type\", \"expiryHeader\": \"Expiry in days\", \"httpOnlyHeader\": \"Http Only\", \"noCookieDataMessage\": \"No scan results available\", \"noCookieDataBeforeAcceptingMsg\": \"No cookies were found before Accepting the consents on this domain.\", \"noCookieDataAfterAcceptingMsg\": \"No cookies were found after Accepting the consents on this domain \" } }, \"style\": { \"customCSS\": \"\", \"logoUrl\": \"https://cdn.gravito.net/logos/gravito_logo.jpg\", \"logoSvg\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"105\\\" height=\\\"18\\\" viewBox=\\\"0 0 105 18\\\"><path fill=\\\"#1C4598\\\" fill-rule=\\\"evenodd\\\" d=\\\"M88.922 10.934h6.569l-3.285-6.331-3.284 6.331zm9.95 6.844l-1.563-3.046H87.086l-1.545 3.045h-5.837L89.07.29h6.568L105 17.778h-6.128zM73.445.291h5.284v17.487h-5.284V.291zm-9.152 0h6.974l-9.413 8.18 10.617 9.307h-7.463l-9.64-9.12L64.293.291zM50.085 17.778h5.283V.291h-5.283v17.487zm-9.04-4.209c1.156 0 1.563-.069 1.84-.325.258-.24.372-.548.372-1.576V6.332c0-1.028-.114-1.334-.372-1.574-.277-.258-.684-.326-1.84-.326h-8.208c-1.155 0-1.561.068-1.837.326-.26.24-.374.546-.374 1.574v5.336c0 1.028.114 1.337.374 1.576.276.256.682.325 1.837.325h8.209zm6.976-1.198c0 2.43-.423 3.269-1.123 4.072C45.826 17.64 44.265 18 41.258 18h-8.632c-3.007 0-4.57-.36-5.641-1.557-.7-.803-1.122-1.641-1.122-4.072V5.629c0-2.43.423-3.266 1.122-4.071C28.057.36 29.619 0 32.626 0h8.633c3.006 0 4.567.36 5.64 1.558.699.805 1.122 1.642 1.122 4.071v6.742zM5.056 17.778H0V.291h8.744l10.031 13.055V.291h5.056v17.487h-8.567L5.056 4.5v13.278z\\\"/></svg>\", \"logoType\": \"img\", \"primaryColor\": \"orange\", \"secondaryColor\": \"grey\", \"disableConfirmationModal\": false, \"fonts\": [ { \"url\": \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", \"unicodeRange\": \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\" }, { \"url\": \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", \"unicodeRange\": \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\" } ] } },","title":"Configuration"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#deployment","text":"Light CMP's can be deployed with the help of SDK V2. Add your config object to window.gravitoCMPConifg variable. window.gravitoCMPConfig = gravitoCMPConfig;","title":"Deployment"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#standalone-light-cmp","text":"To add Standalone light CMP add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag);","title":"Standalone Light CMP."},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#light-cmp-with-backend","text":"To add Light CMP with backend add following values to settings section of your config object window.gravitoCMPConfig = { settings: { type: \"Light\", useGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_4\", sdkVersion: 2, }, //other sections }; And add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\", \"firstParty\"); }; document.body.appendChild(gravitoSDKTag);","title":"Light CMP with backend."},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#using-gcm-mode","text":"GCM support can be added to both standalone CMP and CMP with backend by adding useGCM property to settings section. window.gravitoCMPConfig = { settings: { type: \"Light\", useGCM: true, // add this to enable GCMuseGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_2\", sdkVersion: 2, }, //other sections };","title":"Using GCM mode."},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#sample-scripts","text":"","title":"Sample Scripts"},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#light-cmp-in-modal-view","text":"By using customCSS property you can render CMP in modal view. Following script demonstrates this type of customization. var customCss = \"gravitoLightCMP-layer1-logo{ margin: 0 25px 0 0 !important; width: 80px !important; }.gravitoLightCMP-layer1-modal,.gravitoLightCMP-layer2-modal {width: 75%;top: 50%;left: 50%;-ms-transform: translate(-50%, -50%);transform: translate(-50%, -50%);bottom: unset;}\"; window.gravitoCMPConfig = { settings: { type: \"Light\", useGCM: false, useGravitoBackend: false, backendUrl: \"\", catchCMPEvents: true, sdkVersion: 2, userIdModule: false, gtmTags: [], version: \"bundle_latest_4\", }, core: { cookieName: \"GCString\", languageCode: \"en\", cookieExpiry: 365, settingBtnId: \"manageSettings\", firstLayerId: \"\", secondLayerId: \"\", cookieReportLayerId: \"\", syncEvents: [ \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"layer2:opt-in:selected\", \"layer2:opt-out:all\", \"layer1:opt-out:all\", ], syncAfter: 1800, useTopDomain: false, adsConsentId: 4, analyticsConsentId: 3, version: 1, consents: [ { type: \"consent\", id: 1, name: \"Essential cookies\", description: \"Essential cookies and similar technologies are implementing the basic functions of the website such as page navigation, use of forms and shopping cart functionality. Without these technologies the website will not work properly.\", isConsentable: false, }, { type: \"consent\", id: 2, name: \"Functional cookies\", description: \"Functional cookies and similar technologies make it possible to save information that changes the way the website appears to you or functions, e.g. your preferred language.\", isConsentable: true, }, { type: \"consent\", id: 3, name: \"Statistical cookies\", description: \"Statistical cookies and similar technologies allow us to collect information about how our website is used. This information helps us to improve the content and usability of the website.\", isConsentable: true, }, { type: \"consent\", id: 4, name: \"Marketing & advertising cookies\", description: \"Marketing cookies and similar technologies are used to track visitors across websites. The intention is to display ads that are relevant and interesting to you and thus more valuable for us and third-party advertisers.\", isConsentable: true, }, ], }, text: { firstLayer: { title: \"We need your consent to provide personalized experience\", introductionText: \"We and our third-party vendors are collecting personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", legalFooter: \"By accepting, you are allowing data processing within the service, rejection can affect the user experience.\", privacyPolicyUrl: \"https://site.url.invalid/privacy-policy\", privacyLabel: \"Privacy Policy\", checkBoxLabels: { consent: \"Consent\", }, actions: [\"Accept all\", \"Settings\", \"Reject all\"], }, secondLayer: { title: \"Gravito Settings\", introductionText: \"Please select from the following list of purposes to help us serve you better.\", privacyPolicyUrl: \"https://site.url.invalid/privacy-policy\", privacyLabel: \"Privacy Policy\", checkBoxLabels: { consent: \"Consent\", }, actions: [\"Accept all\", \"Accept selected\", \"Reject all\"], }, confirmationLayer: { confirmationForUncheck: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\", ], }, confirmationForAcceptSelected: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\", ], }, actions: [\"Cancel\", \"Yes\"], }, cookieReportLayer: { buttonTitle: \"Cookie Report\", heading: \"Cookie Reports layer header\", introductionText: \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", beforeAcceptHeader: \"Before Accepting\", afterAcceptHeader: \"After Accepting\", nameHeader: \"Name\", domainHeader: \"Domain\", descriptionHeader: \"Description\", cookieTypeHeader: \"Cookie Type\", expiryHeader: \"Expiry in days\", httpOnlyHeader: \"Http Only\", noCookieDataMessage: \"No scan results available\", noCookieDataBeforeAcceptingMsg: \"No cookies were found before Accepting the consents on this domain.\", noCookieDataAfterAcceptingMsg: \"No cookies were found after Accepting the consents on this domain \", }, }, style: { customCSS: customCss, logoUrl: \"https://cdn.gravito.net/logos/gravito_logo.jpg\", logoSvg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"105\" height=\"18\" viewBox=\"0 0 105 18\"><path fill=\"#1C4598\" fill-rule=\"evenodd\" d=\"M88.922 10.934h6.569l-3.285-6.331-3.284 6.331zm9.95 6.844l-1.563-3.046H87.086l-1.545 3.045h-5.837L89.07.29h6.568L105 17.778h-6.128zM73.445.291h5.284v17.487h-5.284V.291zm-9.152 0h6.974l-9.413 8.18 10.617 9.307h-7.463l-9.64-9.12L64.293.291zM50.085 17.778h5.283V.291h-5.283v17.487zm-9.04-4.209c1.156 0 1.563-.069 1.84-.325.258-.24.372-.548.372-1.576V6.332c0-1.028-.114-1.334-.372-1.574-.277-.258-.684-.326-1.84-.326h-8.208c-1.155 0-1.561.068-1.837.326-.26.24-.374.546-.374 1.574v5.336c0 1.028.114 1.337.374 1.576.276.256.682.325 1.837.325h8.209zm6.976-1.198c0 2.43-.423 3.269-1.123 4.072C45.826 17.64 44.265 18 41.258 18h-8.632c-3.007 0-4.57-.36-5.641-1.557-.7-.803-1.122-1.641-1.122-4.072V5.629c0-2.43.423-3.266 1.122-4.071C28.057.36 29.619 0 32.626 0h8.633c3.006 0 4.567.36 5.64 1.558.699.805 1.122 1.642 1.122 4.071v6.742zM5.056 17.778H0V.291h8.744l10.031 13.055V.291h5.056v17.487h-8.567L5.056 4.5v13.278z\"/></svg>', logoType: \"img\", primaryColor: \"orange\", secondaryColor: \"grey\", disableConfirmationModal: false, fonts: [ { url: \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); }; document.body.appendChild(gravitoSDKTag);","title":"Light CMP in Modal View."},{"location":"Gravito_Intelligent_CMP/advanced/Latest_Config/#migrating-to-lightcmp-version-4","text":"Add settings section your config Object with following properties. var gravitoCMPConfig = { settings: { type: \"Light\", useGCM: false, // Set this flag to true if you want to use Google Consent Mode with light CMP useGravitoBackend: false, // Set this flag to true if you want to use gravito backend with Light CMP backendUrl: \"\", // This will be the URL of your gravito firstparty domain for backend support EX: https://gto.yourdomain.net. if left empty it will be evaluated from your hosted domain. version: \"bundle_latest_4\", // This will be the version of your lightCMP. bundle_latest_4 is recommended sdkVersion: 2, // Don;t change this value , catchCMPEvents: false, // Set this value to true if you want to capture CMP events and generate report on https://admin.gravito.net dashborad. }, // other properties }; CSS structure in Version 4 is different from that of Version 2 so if you are comming from version 2 you will have to redo the css customization for v4 and update you customCSS property in style section of your config object. Light CMP Version 4 should be deployed with gravito SDK version 2.Change your deployment script as follows. window.gravitoCMPConfig = gravitoCMPConfig; // Replace this with your config object;var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"lightCMP\"); // For Standalone Light CMP // window.gravito.init(\"lightCMP\",firstParty); // For Light CMP with backend }; document.body.appendChild(gravitoSDKTag); Version 4 now has feature to resurface CMP to users if their is version upgrade in config. To enable this you will have to add resurfaceOnMissingVersion: true to the core section of your config. Test your implementation of Light CMP Version 4 thoroughly to ensure that all features are working as expected and that there are no issues with the updated CSS structure or GCM/backend integration. Once you have confirmed that everything is working as expected, you can proceed with deploying Light CMP Version 4 on your production website. Note Please note that this is a general guide and your specific implementation may require additional steps. It is always recommended to test your implementation thoroughly before deploying it to production. If you have any questions or issues during the migration process, please reach out to Gravito support for assistance.","title":"Migrating to lightCMP Version 4"},{"location":"Gravito_Intelligent_CMP/advanced/Light_Cmp_Config_Options/","text":"Config example You can check out a Gravito Intelligent CMP configuration example here Following variables are good within \"gravitoCMPConfig\" variable. Variable Description Release style.customCSS Enter your custom CSS definitions, all on one line. Sounds weird but that is what IE requires. 1.0.0 core.cookieName Cookie name the CMP settings are stored to 1.0.0 core.cookieExpiry Cookie lifetime in days 1.0.0 core.settingBtnId Element ID the CMP resurfacing click is bound to 1.0.0 core.version Configuration version, increasing version causes the CMP to resurface and request consents again. 1.0.0 style.logoUrl URL where the CMP can load the logo image, leave empty if you don't want logo on it 1.0.0 style.primaryColor Primary color of your brand/styling 1.0.0 style.secondaryColor Secondary color of your brand/styling 1.0.0 fonts Define which fonts CMP should use, unicodeRange can be left out if not needed 1.0.0 core.adsConsentId Which consent ID can be used as indication of ads consent, required by Google Consent Mode 1.0.1 core.analyticsConsentId Which consent ID can be used as indication of analytics consent, required by Google Consent Mode 1.0.1 style.logoSvg You can enter the logo as SVG code here 1.0.1 style.logoType img or svg 1.0.1 style.disableConfirmationModal true/false, controls if the removal of consent is confirmed with popup or is the function direct 1.0.1 core.useTopDomain true/false, set to true if you want to share the collected consent between subdomains 1.0.4 core. withBackendIntegration true/false, tells the CMP if there it waits for backend response 1.0.4","title":"Config example"},{"location":"Gravito_Intelligent_CMP/advanced/Light_Cmp_Config_Options/#config-example","text":"You can check out a Gravito Intelligent CMP configuration example here Following variables are good within \"gravitoCMPConfig\" variable. Variable Description Release style.customCSS Enter your custom CSS definitions, all on one line. Sounds weird but that is what IE requires. 1.0.0 core.cookieName Cookie name the CMP settings are stored to 1.0.0 core.cookieExpiry Cookie lifetime in days 1.0.0 core.settingBtnId Element ID the CMP resurfacing click is bound to 1.0.0 core.version Configuration version, increasing version causes the CMP to resurface and request consents again. 1.0.0 style.logoUrl URL where the CMP can load the logo image, leave empty if you don't want logo on it 1.0.0 style.primaryColor Primary color of your brand/styling 1.0.0 style.secondaryColor Secondary color of your brand/styling 1.0.0 fonts Define which fonts CMP should use, unicodeRange can be left out if not needed 1.0.0 core.adsConsentId Which consent ID can be used as indication of ads consent, required by Google Consent Mode 1.0.1 core.analyticsConsentId Which consent ID can be used as indication of analytics consent, required by Google Consent Mode 1.0.1 style.logoSvg You can enter the logo as SVG code here 1.0.1 style.logoType img or svg 1.0.1 style.disableConfirmationModal true/false, controls if the removal of consent is confirmed with popup or is the function direct 1.0.1 core.useTopDomain true/false, set to true if you want to share the collected consent between subdomains 1.0.4 core. withBackendIntegration true/false, tells the CMP if there it waits for backend response 1.0.4","title":"Config example"},{"location":"Gravito_Intelligent_CMP/advanced/Microsoft_consent_mode/","text":"Microsoft Consent Mode (UET) Enabling Microsoft Consent Mode in Gravito Intelligent CMP Gravito CMP supports two ways to enable Universal Consent Mode: 1. Using Configurator Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Fill in the basic information , then click Next at the bottom-left corner. On the Consent Category page: Tick the checkbox labeled \"Microsoft's Universal Event Tracking (UET)\" . This will open a section for Microsoft UET Setup . Consent Mapping: You\u2019ll now see dropdowns to map category for : ad_storage Select the relevant consent category from the dropdown list. Note: This mapping is for the ad_storage signal only is common across both GCMv2 & UET. Once mapping is complete, click Save at the bottom-right. Now you have successfully enabled Microsoft UET Consent Mode in your CMP configuration. You may continue filling out the other CMP configuration steps, or jump directly to the \"Deploy\" tab. 2. Without Configurator Enable UET Mode : Add the useUET flag under the settings section of your configuration and set its value to true . \"settings\": { \"useUET\": true // ... other settings } Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the core section of your config manually. Define adsConsentId Based on CMP Type The adsConsentId should be a single ID referring to the custom consent item that you have defined in the config. It is not an array of TCF purpose IDs in this case. Example: \"core\": { \"adsConsentId\": {{YOUR_CONSENT_ITEM_ID}} } This means the consent value of the item with ID \"{{YOUR_CONSENT_ITEM_ID}}\" will be used for Microsoft UET. How Gravito CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"Microsoft Consent Mode (UET)"},{"location":"Gravito_Intelligent_CMP/advanced/Microsoft_consent_mode/#microsoft-consent-mode-uet","text":"","title":"Microsoft Consent Mode (UET)"},{"location":"Gravito_Intelligent_CMP/advanced/Microsoft_consent_mode/#enabling-microsoft-consent-mode-in-gravito-intelligent-cmp","text":"Gravito CMP supports two ways to enable Universal Consent Mode:","title":"Enabling Microsoft Consent Mode in Gravito Intelligent CMP"},{"location":"Gravito_Intelligent_CMP/advanced/Microsoft_consent_mode/#1-using-configurator","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Fill in the basic information , then click Next at the bottom-left corner. On the Consent Category page: Tick the checkbox labeled \"Microsoft's Universal Event Tracking (UET)\" . This will open a section for Microsoft UET Setup .","title":"1. Using Configurator"},{"location":"Gravito_Intelligent_CMP/advanced/Microsoft_consent_mode/#consent-mapping","text":"You\u2019ll now see dropdowns to map category for : ad_storage Select the relevant consent category from the dropdown list. Note: This mapping is for the ad_storage signal only is common across both GCMv2 & UET. Once mapping is complete, click Save at the bottom-right. Now you have successfully enabled Microsoft UET Consent Mode in your CMP configuration. You may continue filling out the other CMP configuration steps, or jump directly to the \"Deploy\" tab.","title":"Consent Mapping:"},{"location":"Gravito_Intelligent_CMP/advanced/Microsoft_consent_mode/#2-without-configurator","text":"Enable UET Mode : Add the useUET flag under the settings section of your configuration and set its value to true . \"settings\": { \"useUET\": true // ... other settings } Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the core section of your config manually. Define adsConsentId Based on CMP Type The adsConsentId should be a single ID referring to the custom consent item that you have defined in the config. It is not an array of TCF purpose IDs in this case. Example: \"core\": { \"adsConsentId\": {{YOUR_CONSENT_ITEM_ID}} } This means the consent value of the item with ID \"{{YOUR_CONSENT_ITEM_ID}}\" will be used for Microsoft UET. How Gravito CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"2. Without Configurator"},{"location":"Gravito_Intelligent_CMP/advanced/integration/","text":"Gravito CMP emits \"gravito:cmp:light\" events. Events indicate the UI actions and points when the user has given or denied the consents and rest of the tags can either trigger or not. The event types are: Action eventType Trigger Custom settings confirmed by clicking \"Accept selected\" layer2:opt-in:selected User clicks on \"Accept selected\" on 2nd layer of CMP \"Accept all\" clicked on layer 1 layer1:opt-in:all User clicks on \"Accept selected\" on 2nd layer of CMP \"Accept all\" clicked on layer 2 layer2:opt-in:all User clicks on \"Accept all\" button on 1st layer \"Reject all\" clicked on layer 2 layer2:opt-out:all User clicks on \"Accept all\" button on 2nd layer CMP UI closed cmpui:closed User clicks on \"Reject all\" button on 2nd layer Parent site visible without CMP UI layer2:back-to-site CMP UI closes because of user actions Example of listening events and currentState object const getCookieData = (cname) => { var name = cname + \"=\"; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(\";\"); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == \" \") { c = c.substring(1); } if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); } } return \"\"; }; document.addEventListener(\"gravito:cmp:light\", function (event) { var button_click_events = [ \"layer1:opt-in:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer2:opt-in:all\", ]; if (button_click_events.includes(event.detail.eventType)) { let currentState = getCookieData( gravitoCMPConfig.core.cookieName ); depending upon the currentState of consent you can perform the required actions } });","title":"Integration"},{"location":"Gravito_Pro_CMP/Components/","text":"PRO CMP Components. Pro CMP can be use to deploy variouse CMP components like Gravito CMP, TCF CMP you can choose any one as per your compliance requirement. - Gravito CMP It is Gravito's own CMP which is not TCF certified. It is a light weight CMP which can be used for any website. CMP component - TCF 2.2 CMP It is a TCF certified CMP which is used for GDPR compliance. It is a full fledged CMP which can be used for any website. TCF 2.2 component","title":"PRO CMP Components."},{"location":"Gravito_Pro_CMP/Components/#pro-cmp-components","text":"Pro CMP can be use to deploy variouse CMP components like Gravito CMP, TCF CMP you can choose any one as per your compliance requirement.","title":"PRO CMP Components."},{"location":"Gravito_Pro_CMP/Components/#-gravito-cmp","text":"It is Gravito's own CMP which is not TCF certified. It is a light weight CMP which can be used for any website. CMP component","title":"- Gravito CMP"},{"location":"Gravito_Pro_CMP/Components/#-tcf-22-cmp","text":"It is a TCF certified CMP which is used for GDPR compliance. It is a full fledged CMP which can be used for any website. TCF 2.2 component","title":"- TCF 2.2 CMP"},{"location":"Gravito_Pro_CMP/Customization/","text":"Customizations in PRO CMP Gravito's PRO CMP is a highly customizable solution that allows you to tailor the user experience to meet your specific needs. These customizations can be made through the Styles tab in Gravito's PRO CMP configurator. Styles Tab Fields The Styles tab allows you to configure the appearance of your CMP. Below are the fields available for customization: 1. Logo URL Description : URL of the logo to be displayed in the CMP. Example : https://cdn.gravito.net/logos/Website_DEMO_logo.png Note : It is recommended to use a logo that aligns with your brand identity. 2. Logo Alternate Text Description : Alternate text for the logo, used for accessibility. Example : Website Logo Note : This text will be displayed if the logo cannot be loaded. 3. Primary Color Code Description : The primary color used in the CMP interface. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Choose a color that matches your brand's primary theme. 4. Secondary Color Code Description : The secondary color used in the CMP interface. Input Format : Hexadecimal color code (e.g., #a3a3a3 ). Note : This color is typically used for less prominent elements. 5. Header Color Code Description : The color used for the header section of the CMP. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Ensure this color contrasts well with the text for readability. 6. Footer Color Code Description : The color used for the footer section of the CMP. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Similar to the header, ensure good contrast for readability. 7. Fonts Description : Add custom fonts to be used in the CMP. Fields : Font URL : URL pointing to the font file (e.g., https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2 ). Font Unicode Range : Unicode range for the font (e.g., U+0100-024F, U+0259, U+1E00-1EFF ). Actions : Add Font : Add a new font configuration by clicking the + Add Font button after which a modal will appear where you can add new font. Reset to Default : Revert to the default font settings. Note : Ensure the font URL is accessible and the Unicode range covers the required characters. Additional Customizations Apart from the styles tab, you can also customize the look and feel of the CMP by adding custom CSS. This allows for more granular control over the appearance of various elements within the CMP. You can add your CSS code in the Custom CSS editor field in the Appearence sub-tab of the selected framework.","title":"Customizations in PRO CMP"},{"location":"Gravito_Pro_CMP/Customization/#customizations-in-pro-cmp","text":"Gravito's PRO CMP is a highly customizable solution that allows you to tailor the user experience to meet your specific needs. These customizations can be made through the Styles tab in Gravito's PRO CMP configurator.","title":"Customizations in PRO CMP"},{"location":"Gravito_Pro_CMP/Customization/#styles-tab-fields","text":"The Styles tab allows you to configure the appearance of your CMP. Below are the fields available for customization:","title":"Styles Tab Fields"},{"location":"Gravito_Pro_CMP/Customization/#1-logo-url","text":"Description : URL of the logo to be displayed in the CMP. Example : https://cdn.gravito.net/logos/Website_DEMO_logo.png Note : It is recommended to use a logo that aligns with your brand identity.","title":"1. Logo URL"},{"location":"Gravito_Pro_CMP/Customization/#2-logo-alternate-text","text":"Description : Alternate text for the logo, used for accessibility. Example : Website Logo Note : This text will be displayed if the logo cannot be loaded.","title":"2. Logo Alternate Text"},{"location":"Gravito_Pro_CMP/Customization/#3-primary-color-code","text":"Description : The primary color used in the CMP interface. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Choose a color that matches your brand's primary theme.","title":"3. Primary Color Code"},{"location":"Gravito_Pro_CMP/Customization/#4-secondary-color-code","text":"Description : The secondary color used in the CMP interface. Input Format : Hexadecimal color code (e.g., #a3a3a3 ). Note : This color is typically used for less prominent elements.","title":"4. Secondary Color Code"},{"location":"Gravito_Pro_CMP/Customization/#5-header-color-code","text":"Description : The color used for the header section of the CMP. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Ensure this color contrasts well with the text for readability.","title":"5. Header Color Code"},{"location":"Gravito_Pro_CMP/Customization/#6-footer-color-code","text":"Description : The color used for the footer section of the CMP. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Similar to the header, ensure good contrast for readability.","title":"6. Footer Color Code"},{"location":"Gravito_Pro_CMP/Customization/#7-fonts","text":"Description : Add custom fonts to be used in the CMP. Fields : Font URL : URL pointing to the font file (e.g., https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2 ). Font Unicode Range : Unicode range for the font (e.g., U+0100-024F, U+0259, U+1E00-1EFF ). Actions : Add Font : Add a new font configuration by clicking the + Add Font button after which a modal will appear where you can add new font. Reset to Default : Revert to the default font settings. Note : Ensure the font URL is accessible and the Unicode range covers the required characters.","title":"7. Fonts"},{"location":"Gravito_Pro_CMP/Customization/#additional-customizations","text":"Apart from the styles tab, you can also customize the look and feel of the CMP by adding custom CSS. This allows for more granular control over the appearance of various elements within the CMP. You can add your CSS code in the Custom CSS editor field in the Appearence sub-tab of the selected framework.","title":"Additional Customizations"},{"location":"Gravito_Pro_CMP/Deployment/","text":"Deployment for Gravito Pro CMP Configuration All deployment related actions for Gravito Pro CMP are handled through Deployment tab in the Pro CMP Configurator. This tab is available as the last tab in the sidebar of the configurator. Gravito Pro CMP supports multiple deployment options to suit different environments and use cases. Below are the available deployment methods: 1. GTM (Google Tag Manager) Template: This option allows you to quickly integrate Gravito's CMP with your website using Google Tag Manager. Please follow the steps below to deploy using GTM: Select the GTM Template option from the provided Deployment Method and click the Validate & Publish button. If the validation and publishing is successful, you will get an option to copy GTM Token by clicking the Copy GTM Token button. Login to your Google Tag Manager account and click on a new Tag . Tag Configuration: Choose the Gravito Consent Management template from the list. Fill the fields: Field Description Gravito Token Paste the CMP token copied from Gravito portal Gravito CMP type Select Gravito Pro CMP \u2705 Enable Google Consent Mode Enable this to activate GCM support Google Consent Mode Settings Option Description Wait for update Time to wait (in ms) for consent before proceeding (default: 2000 ) Enable URL passthrough Optional: Enable if you need to forward consent state via query params Redact ads data Set to Dynamic (based on ad_storage) for flexible ad personalization Default Consent State (Optional) Configure regional preferences if needed. You can leave it blank to apply globally. Add Trigger and Save Add a Page View or All Pages trigger to fire this tag on every page load. Click Save . Publish the GTM Container Submit and Publish the container. CMP will now load and handle consent dynamically on your site. 2. WordPress Plugin: Seamlessly integrate Gravito's CMP into your WordPress website using our dedicated plugin. Please follow the steps below to deploy using the WordPress plugin: Select the WordPress Plugin option from the provided Deployment Method and click the Validate & Publish button. If the validation and publishing is successful, you will get an option to copy WordPress Token by clicking the Copy WordPress Token button. Use this token in the WordPress plugin to integrate Gravito's CMP into your website. 3. Deployment Script: Utilize the deployment script to efficiently incorporate Gravito's CMP into your website's codebase. Please follow the steps below to deploy using the deployment script: Select the Deployment Script option from the provided Deployment Method and click the Validate & Publish button. If the validation and publishing is successful, you will get an option to Generate Deployment Script and Download Config . Click on the Generate Deployment Script button to generate the deployment script. This will open a modal with the generated script as shown in the below image. You can paste this script in your website's <body> tag.","title":"Deployment for Gravito Pro CMP Configuration"},{"location":"Gravito_Pro_CMP/Deployment/#deployment-for-gravito-pro-cmp-configuration","text":"All deployment related actions for Gravito Pro CMP are handled through Deployment tab in the Pro CMP Configurator. This tab is available as the last tab in the sidebar of the configurator. Gravito Pro CMP supports multiple deployment options to suit different environments and use cases. Below are the available deployment methods:","title":"Deployment for Gravito Pro CMP Configuration"},{"location":"Gravito_Pro_CMP/Deployment/#1-gtm-google-tag-manager-template","text":"This option allows you to quickly integrate Gravito's CMP with your website using Google Tag Manager. Please follow the steps below to deploy using GTM: Select the GTM Template option from the provided Deployment Method and click the Validate & Publish button. If the validation and publishing is successful, you will get an option to copy GTM Token by clicking the Copy GTM Token button. Login to your Google Tag Manager account and click on a new Tag .","title":"1. GTM (Google Tag Manager) Template:"},{"location":"Gravito_Pro_CMP/Deployment/#tag-configuration","text":"Choose the Gravito Consent Management template from the list.","title":"Tag Configuration:"},{"location":"Gravito_Pro_CMP/Deployment/#fill-the-fields","text":"Field Description Gravito Token Paste the CMP token copied from Gravito portal Gravito CMP type Select Gravito Pro CMP \u2705 Enable Google Consent Mode Enable this to activate GCM support","title":"Fill the fields:"},{"location":"Gravito_Pro_CMP/Deployment/#google-consent-mode-settings","text":"Option Description Wait for update Time to wait (in ms) for consent before proceeding (default: 2000 ) Enable URL passthrough Optional: Enable if you need to forward consent state via query params Redact ads data Set to Dynamic (based on ad_storage) for flexible ad personalization","title":"Google Consent Mode Settings"},{"location":"Gravito_Pro_CMP/Deployment/#default-consent-state-optional","text":"Configure regional preferences if needed. You can leave it blank to apply globally.","title":"Default Consent State (Optional)"},{"location":"Gravito_Pro_CMP/Deployment/#add-trigger-and-save","text":"Add a Page View or All Pages trigger to fire this tag on every page load. Click Save .","title":"Add Trigger and Save"},{"location":"Gravito_Pro_CMP/Deployment/#publish-the-gtm-container","text":"Submit and Publish the container. CMP will now load and handle consent dynamically on your site.","title":"Publish the GTM Container"},{"location":"Gravito_Pro_CMP/Deployment/#2-wordpress-plugin","text":"Seamlessly integrate Gravito's CMP into your WordPress website using our dedicated plugin. Please follow the steps below to deploy using the WordPress plugin: Select the WordPress Plugin option from the provided Deployment Method and click the Validate & Publish button. If the validation and publishing is successful, you will get an option to copy WordPress Token by clicking the Copy WordPress Token button. Use this token in the WordPress plugin to integrate Gravito's CMP into your website.","title":"2. WordPress Plugin:"},{"location":"Gravito_Pro_CMP/Deployment/#3-deployment-script","text":"Utilize the deployment script to efficiently incorporate Gravito's CMP into your website's codebase. Please follow the steps below to deploy using the deployment script: Select the Deployment Script option from the provided Deployment Method and click the Validate & Publish button. If the validation and publishing is successful, you will get an option to Generate Deployment Script and Download Config . Click on the Generate Deployment Script button to generate the deployment script. This will open a modal with the generated script as shown in the below image. You can paste this script in your website's <body> tag.","title":"3. Deployment Script:"},{"location":"Gravito_Pro_CMP/FAQ/","text":"Frequently Asked Questions - PRO CMP How to use your custom font in CMP? How to Resurface the CMP UI to All users and Collect Consent Again? How to open CMP in given sesssion? How to Provide Google with the Required Legititimate Interest's Even on Reject All Action? How to fire GTM tags based on consents in CMP?(Only for Gravito CMP Component)","title":"Frequently Asked Questions - PRO CMP"},{"location":"Gravito_Pro_CMP/FAQ/#frequently-asked-questions-pro-cmp","text":"How to use your custom font in CMP? How to Resurface the CMP UI to All users and Collect Consent Again? How to open CMP in given sesssion? How to Provide Google with the Required Legititimate Interest's Even on Reject All Action? How to fire GTM tags based on consents in CMP?(Only for Gravito CMP Component)","title":"Frequently Asked Questions - PRO CMP"},{"location":"Gravito_Pro_CMP/Getting_Started/","text":"Introducing Gravito Pro CMP! Gravito Pro CMP is a powerful, new tool from Gravito designed for ultimate customizability and flexibility. It provides a single, consistent setup-to-deployment process for all CMP frameworks, making consent management smoother than ever! Quick Reminder: Have you registered with Gravito yet? \ud83d\udc49 Get Registered Here . Gravito Pro CMP Configurator: Use our intuitive configurator to create a consent banner tailored to your selected framework and specific needs. Customize it and make your website truly yours! Easy Integration: To include Gravito Pro CMP in your website, simply copy and paste the following script into your site\u2019s code: Note Replace gravitoPROCMPConfig with your config object. window.gravitoPROCMPConfig = gravitoPROCMPConfig; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/prosdkbuilds/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"proCMP\", \"firstParty\"); }; document.body.appendChild(gravitoSDKTag); Resurfacing To open the CMP again, we have a window-scoped function which can be used: window.gravitoPROCMP.openPreferences() \u2014 this will open the second layer (Details tab). To open the first layer (Declaration tab): window.gravitoPROCMP.openPreferences(0) \u2014 this will open the first layer (Declaration).","title":"Introducing Gravito Pro CMP!"},{"location":"Gravito_Pro_CMP/Getting_Started/#introducing-gravito-pro-cmp","text":"Gravito Pro CMP is a powerful, new tool from Gravito designed for ultimate customizability and flexibility. It provides a single, consistent setup-to-deployment process for all CMP frameworks, making consent management smoother than ever!","title":"Introducing Gravito Pro CMP!"},{"location":"Gravito_Pro_CMP/Getting_Started/#quick-reminder","text":"Have you registered with Gravito yet? \ud83d\udc49 Get Registered Here .","title":"Quick Reminder:"},{"location":"Gravito_Pro_CMP/Getting_Started/#gravito-pro-cmp-configurator","text":"Use our intuitive configurator to create a consent banner tailored to your selected framework and specific needs. Customize it and make your website truly yours!","title":"Gravito Pro CMP Configurator:"},{"location":"Gravito_Pro_CMP/Getting_Started/#easy-integration","text":"To include Gravito Pro CMP in your website, simply copy and paste the following script into your site\u2019s code: Note Replace gravitoPROCMPConfig with your config object. window.gravitoPROCMPConfig = gravitoPROCMPConfig; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/prosdkbuilds/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"proCMP\", \"firstParty\"); }; document.body.appendChild(gravitoSDKTag);","title":"Easy Integration:"},{"location":"Gravito_Pro_CMP/Getting_Started/#resurfacing","text":"To open the CMP again, we have a window-scoped function which can be used: window.gravitoPROCMP.openPreferences() \u2014 this will open the second layer (Details tab). To open the first layer (Declaration tab): window.gravitoPROCMP.openPreferences(0) \u2014 this will open the first layer (Declaration).","title":"Resurfacing"},{"location":"Gravito_Pro_CMP/Release_Notes/","text":"PRO CMP Release Notes Gravito Pro CMP release notes. Gravito PRO CMP \u2013 Release Notes (v1.0.6) Release date 25/03/2025 This is a maintenance release focused on internal improvements. Internal Fixes Internal Bug Fixes : Addressed several internal bugs and code-level inconsistencies to improve stability and maintainability of the PRO CMP codebase. No changes or feature additions for customers in this release. Gravito PRO CMP \u2013 Release Notes (v1.0.5) Release date 18/03/2025 This release focuses on improving the reliability of the Cookie Report fetching mechanism. Bug Fix / Enhancement Improved Referrer Domain Evaluation for Cookie Report : The logic used to evaluate the referring domain for fetching the Cookie Report has been updated. The previous approach was causing issues in certain edge cases, leading to inaccurate or failed report retrievals. The new logic ensures better accuracy and compatibility across different integration scenarios and referrer setups. Gravito PRO CMP \u2013 Release Notes (v1.0.4) rendering across key CMP components. Release date 06/03/2025 This release includes enhancements to layout structure and flexibility in content Enhancements Improved Description Layout in Details Component : The description content in the Details component is now wrapped inside a dedicated <div> for better structure and styling. This change helps maintain consistent spacing and alignment across varying content lengths. Legal Footer and Description Support HTML Rendering : The Declaration (Layer 1) and Details (Layer 2) layers now support HTML rendering for the legal footer and description fields. Customers can now directly use HTML content within the configuration to style or structure legal text as needed. This brings greater flexibility and control over how legal and consent-related information is presented to users. Gravito PRO CMP \u2013 Release Notes (v1.0.3) Release date 05/03/2025 This release simplifies user interaction within the CMP by removing redundant UI elements that could hinder the user experience. Improvements Removed Confirmation Modals for Key Actions : The confirmation modals shown on Rejection and Save actions in both Declaration (Layer 1) and Details (Layer 2) have been removed. These modals were identified as unnecessary and potentially disruptive to the consent flow. The removal streamlines user experience by reducing extra clicks and interruptions. Gravito PRO CMP \u2013 Release Notes (v1.0.2) Release date 04/03/2025 This release includes new features to enhance the functionality and usability of the Gravito PRO CMP. New Features Accessibility Compliance : PRO CMP is now aligned with accessibility standards. This includes proper ARIA attributes, keyboard navigation support, and screen reader compatibility, making the CMP more inclusive for all users. Focus Management in Modal : Implemented improved focus management for modals. When a modal is opened, keyboard focus is now trapped within the modal and returned to the trigger element upon close, ensuring a better and more predictable interaction flow. Gravito PRO CMP \u2013 Release Notes (v1.0.1) Release date 03/03/2025 This release includes several bug fixes and new features to enhance the functionality and usability of the Gravito PRO CMP. Bug Fixes Cookie Report Rendering Issue : Resolved a bug that caused incorrect or incomplete rendering of the cookie report in certain configurations. This fix ensures accurate and consistent generation of the cookie report across supported environments. New Features Multi-language Support in Cookie Report : The cookie report can now be displayed in multiple languages. This enhancement allows region-specific or user-preferred language versions of the cookie report, improving user experience and regulatory compliance. Preview Mode for Cookie Report : Introduced a new internal-use-only Preview mode for the cookie report. This feature is accessible through the Admin Portal and is designed to provide a preview of the cookie report before it goes live. It allows for testing and validation of the report's content layout, ensuring that it meets the desired standards before being made available to end-users. Gravito PRO CMP \u2013 Release Notes (v1.0.0) Release date 20/02/2025 We are pleased to announce the first official release of Gravito PRO CMP \u2013 a modern, high-performance Consent Management Platform designed for flexibility, performance, and regulatory compliance. What's New PRO CMP \u2013 A New Flavor of Gravito CMP This is the initial release of Gravito PRO CMP , a newly developed variant of our CMP platform. It is built using Preact , a lightweight alternative to React, offering improved performance and reduced bundle size. Support for Gravito Intelligent CMP Gravito PRO CMP supports the Gravito Intelligent CMP \u2013 a flexible consent mechanism suitable for various use cases outside of the TCF framework. Note: The TCF CMP component is not yet supported in version 1.0.0 , but will be included in upcoming releases. Lazy Loading for Better Performance PRO CMP includes lazy loading , reducing the initial load size of CMP bundles. This leads to faster page loads and a smoother user experience. Enhanced Tab-Based Layout The new tab-based layout improves usability and consent navigation. Users can now switch easily between different layers and settings, resulting in a more intuitive and efficient consent flow.","title":"PRO CMP Release Notes"},{"location":"Gravito_Pro_CMP/Release_Notes/#pro-cmp-release-notes","text":"Gravito Pro CMP release notes.","title":"PRO CMP Release Notes"},{"location":"Gravito_Pro_CMP/Release_Notes/#gravito-pro-cmp-release-notes-v106","text":"Release date 25/03/2025 This is a maintenance release focused on internal improvements.","title":"Gravito PRO CMP \u2013 Release Notes (v1.0.6)"},{"location":"Gravito_Pro_CMP/Release_Notes/#internal-fixes","text":"Internal Bug Fixes : Addressed several internal bugs and code-level inconsistencies to improve stability and maintainability of the PRO CMP codebase. No changes or feature additions for customers in this release.","title":"Internal Fixes"},{"location":"Gravito_Pro_CMP/Release_Notes/#gravito-pro-cmp-release-notes-v105","text":"Release date 18/03/2025 This release focuses on improving the reliability of the Cookie Report fetching mechanism.","title":"Gravito PRO CMP \u2013 Release Notes (v1.0.5)"},{"location":"Gravito_Pro_CMP/Release_Notes/#bug-fix-enhancement","text":"Improved Referrer Domain Evaluation for Cookie Report : The logic used to evaluate the referring domain for fetching the Cookie Report has been updated. The previous approach was causing issues in certain edge cases, leading to inaccurate or failed report retrievals. The new logic ensures better accuracy and compatibility across different integration scenarios and referrer setups.","title":"Bug Fix / Enhancement"},{"location":"Gravito_Pro_CMP/Release_Notes/#gravito-pro-cmp-release-notes-v104","text":"rendering across key CMP components. Release date 06/03/2025 This release includes enhancements to layout structure and flexibility in content","title":"Gravito PRO CMP \u2013 Release Notes (v1.0.4)"},{"location":"Gravito_Pro_CMP/Release_Notes/#enhancements","text":"Improved Description Layout in Details Component : The description content in the Details component is now wrapped inside a dedicated <div> for better structure and styling. This change helps maintain consistent spacing and alignment across varying content lengths. Legal Footer and Description Support HTML Rendering : The Declaration (Layer 1) and Details (Layer 2) layers now support HTML rendering for the legal footer and description fields. Customers can now directly use HTML content within the configuration to style or structure legal text as needed. This brings greater flexibility and control over how legal and consent-related information is presented to users.","title":"Enhancements"},{"location":"Gravito_Pro_CMP/Release_Notes/#gravito-pro-cmp-release-notes-v103","text":"Release date 05/03/2025 This release simplifies user interaction within the CMP by removing redundant UI elements that could hinder the user experience.","title":"Gravito PRO CMP \u2013 Release Notes (v1.0.3)"},{"location":"Gravito_Pro_CMP/Release_Notes/#improvements","text":"Removed Confirmation Modals for Key Actions : The confirmation modals shown on Rejection and Save actions in both Declaration (Layer 1) and Details (Layer 2) have been removed. These modals were identified as unnecessary and potentially disruptive to the consent flow. The removal streamlines user experience by reducing extra clicks and interruptions.","title":"Improvements"},{"location":"Gravito_Pro_CMP/Release_Notes/#gravito-pro-cmp-release-notes-v102","text":"Release date 04/03/2025 This release includes new features to enhance the functionality and usability of the Gravito PRO CMP.","title":"Gravito PRO CMP \u2013 Release Notes (v1.0.2)"},{"location":"Gravito_Pro_CMP/Release_Notes/#new-features","text":"Accessibility Compliance : PRO CMP is now aligned with accessibility standards. This includes proper ARIA attributes, keyboard navigation support, and screen reader compatibility, making the CMP more inclusive for all users. Focus Management in Modal : Implemented improved focus management for modals. When a modal is opened, keyboard focus is now trapped within the modal and returned to the trigger element upon close, ensuring a better and more predictable interaction flow.","title":"New Features"},{"location":"Gravito_Pro_CMP/Release_Notes/#gravito-pro-cmp-release-notes-v101","text":"Release date 03/03/2025 This release includes several bug fixes and new features to enhance the functionality and usability of the Gravito PRO CMP.","title":"Gravito PRO CMP \u2013 Release Notes (v1.0.1)"},{"location":"Gravito_Pro_CMP/Release_Notes/#bug-fixes","text":"Cookie Report Rendering Issue : Resolved a bug that caused incorrect or incomplete rendering of the cookie report in certain configurations. This fix ensures accurate and consistent generation of the cookie report across supported environments.","title":"Bug Fixes"},{"location":"Gravito_Pro_CMP/Release_Notes/#new-features_1","text":"Multi-language Support in Cookie Report : The cookie report can now be displayed in multiple languages. This enhancement allows region-specific or user-preferred language versions of the cookie report, improving user experience and regulatory compliance. Preview Mode for Cookie Report : Introduced a new internal-use-only Preview mode for the cookie report. This feature is accessible through the Admin Portal and is designed to provide a preview of the cookie report before it goes live. It allows for testing and validation of the report's content layout, ensuring that it meets the desired standards before being made available to end-users.","title":"New Features"},{"location":"Gravito_Pro_CMP/Release_Notes/#gravito-pro-cmp-release-notes-v100","text":"Release date 20/02/2025 We are pleased to announce the first official release of Gravito PRO CMP \u2013 a modern, high-performance Consent Management Platform designed for flexibility, performance, and regulatory compliance.","title":"Gravito PRO CMP \u2013 Release Notes (v1.0.0)"},{"location":"Gravito_Pro_CMP/Release_Notes/#whats-new","text":"","title":"What's New"},{"location":"Gravito_Pro_CMP/Release_Notes/#pro-cmp-a-new-flavor-of-gravito-cmp","text":"This is the initial release of Gravito PRO CMP , a newly developed variant of our CMP platform. It is built using Preact , a lightweight alternative to React, offering improved performance and reduced bundle size.","title":"PRO CMP \u2013 A New Flavor of Gravito CMP"},{"location":"Gravito_Pro_CMP/Release_Notes/#support-for-gravito-intelligent-cmp","text":"Gravito PRO CMP supports the Gravito Intelligent CMP \u2013 a flexible consent mechanism suitable for various use cases outside of the TCF framework. Note: The TCF CMP component is not yet supported in version 1.0.0 , but will be included in upcoming releases.","title":"Support for Gravito Intelligent CMP"},{"location":"Gravito_Pro_CMP/Release_Notes/#lazy-loading-for-better-performance","text":"PRO CMP includes lazy loading , reducing the initial load size of CMP bundles. This leads to faster page loads and a smoother user experience.","title":"Lazy Loading for Better Performance"},{"location":"Gravito_Pro_CMP/Release_Notes/#enhanced-tab-based-layout","text":"The new tab-based layout improves usability and consent navigation. Users can now switch easily between different layers and settings, resulting in a more intuitive and efficient consent flow.","title":"Enhanced Tab-Based Layout"},{"location":"Gravito_Pro_CMP/Setup_and_Design/","text":"Gravito Pro CMP Setup can be done using Pro CMP Configurator on Gravito\u2019s Admin Portal. Go to CMP >> Pro CMP configurator. Click on \"New Configuration\" button to create a new configuration. Click on \"Get Started\" button after adding a Config name and selecting a appropriate framework. You can now go through each of the following sections and configure the CMP as per your requirement. 1. Settings configuraton Tab 2. Styles configuraton Tab 3. Framework configuraton Tab 4. Deployment Tab","title":"Setup and Design"},{"location":"Gravito_Pro_CMP/Setup_and_Design/#1-settings-configuraton-tab","text":"","title":"1. Settings configuraton Tab"},{"location":"Gravito_Pro_CMP/Setup_and_Design/#2-styles-configuraton-tab","text":"","title":"2. Styles configuraton Tab"},{"location":"Gravito_Pro_CMP/Setup_and_Design/#3-framework-configuraton-tab","text":"","title":"3. Framework configuraton Tab"},{"location":"Gravito_Pro_CMP/Setup_and_Design/#4-deployment-tab","text":"","title":"4. Deployment Tab"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_gcmv2/","text":"Google Consent Mode v2 What is Google Consent Mode v2? Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) : Consent Signals: ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) functionality_storage personalization_storage security_storage The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Note: The functionality_storage , personalization_storage , and security_storage signals can only be set to granted or denied . Official Google Documentation on Consent Mode v2 Enabling Google Consent Mode v2 in Pro Gravito CMP Creating Config in Admin Portal Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito Pro CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP Config. Give config an appropriate name and choose Gravito CMP as Framework . After that, click Get Started to proceed. Now navigate to Gravito CMP tab and Consent Categories sub-tab for GCMv2 related setup. You can enable GCM by checking the checkbox labeled Google's GCM-V2 . After enabling GCM, some additional fields will appear for configuration. Use GCM Advance Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . All other fields are related to Google consent signal mapping. They are explained below. Note: when the using GCM Basic Mode, the GTM template deployment option will not be available. Consent Mapping: You\u2019ll now see dropdowns to map categories for the following Google consent signals: - ad_storage - analytics_storage - ad_user_data - ad_personalization For each of these, select the relevant consent category from the dropdown list. You will see default mappings, but you can change them as per your requirements. Once mappings are complete, you may continue filling out the other CMP configuration steps, or jump directly to the Deployment\" tab for publishing your config. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. below the comment // Insert your GTM script here you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\");","title":"Google Consent Mode v2"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_gcmv2/#google-consent-mode-v2","text":"","title":"Google Consent Mode v2"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_gcmv2/#what-is-google-consent-mode-v2","text":"Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) :","title":"What is Google Consent Mode v2?"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_gcmv2/#consent-signals","text":"ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) functionality_storage personalization_storage security_storage The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Note: The functionality_storage , personalization_storage , and security_storage signals can only be set to granted or denied . Official Google Documentation on Consent Mode v2","title":"Consent Signals:"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_gcmv2/#enabling-google-consent-mode-v2-in-pro-gravito-cmp","text":"","title":"Enabling Google Consent Mode v2 in Pro Gravito CMP"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_gcmv2/#creating-config-in-admin-portal","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito Pro CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP Config. Give config an appropriate name and choose Gravito CMP as Framework . After that, click Get Started to proceed. Now navigate to Gravito CMP tab and Consent Categories sub-tab for GCMv2 related setup. You can enable GCM by checking the checkbox labeled Google's GCM-V2 . After enabling GCM, some additional fields will appear for configuration. Use GCM Advance Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . All other fields are related to Google consent signal mapping. They are explained below. Note: when the using GCM Basic Mode, the GTM template deployment option will not be available.","title":"Creating Config in Admin Portal"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_gcmv2/#consent-mapping","text":"You\u2019ll now see dropdowns to map categories for the following Google consent signals: - ad_storage - analytics_storage - ad_user_data - ad_personalization For each of these, select the relevant consent category from the dropdown list. You will see default mappings, but you can change them as per your requirements. Once mappings are complete, you may continue filling out the other CMP configuration steps, or jump directly to the Deployment\" tab for publishing your config. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. below the comment // Insert your GTM script here you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\");","title":"Consent Mapping:"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_uet/","text":"Microsoft Consent Mode (UET) Enabling Microsoft Consent Mode in Pro Gravito CMP Pro Gravito CMP supports two ways to enable Microsoft's Universal Consent Mode: 1. Using Configurator Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito Pro CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Give config an appropriate name and choose Gravito CMP as Framework . After that, click Get Started to proceed. Now navigate to Gravito CMP tab and Consent Categories sub-tab for UET related setup. You can enable UET by checking the checkbox labeled Microsoft's Universal Event Tracking (UET) . After enabling UET, an additional field will appear for configuration. Consent Mapping: You\u2019ll now see dropdowns to map category for : ad_storage Select the relevant consent category from the dropdown list. Note: This mapping is for the ad_storage signal only is common across both GCMv2 & UET. Once mapping is complete, click Save Progress at the top-right. Now you have successfully enabled Microsoft UET Consent Mode in your CMP configuration. You may continue filling out the other CMP configuration steps, or jump directly to the Deployment tab. 2. Without Configurator Enable UET Mode : Add the useUET flag under the gravitoCMP.core section of your configuration and set its value to true . gravitoCMP: { \"core\": { \"useUET\": true, // ... other configurations } // ... other sections } Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the gravitoCMP.core section of your config manually. Define adsConsentId Based on CMP Type The adsConsentId should be a single ID referring to the custom consent item that you have defined in the config. It is not an array of TCF purpose IDs in this case. Example: gravitoCMP: { \"core\": { \"useUET\": true, \"adsConsentId\": \"{{YOUR_CONSENT_ITEM_ID}}\" // ... other configurations }, } This means the consent value of the item with ID \"{{YOUR_CONSENT_ITEM_ID}}\" will be used for Microsoft UET. How Gravito CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"Microsoft Consent Mode (UET)"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_uet/#microsoft-consent-mode-uet","text":"","title":"Microsoft Consent Mode (UET)"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_uet/#enabling-microsoft-consent-mode-in-pro-gravito-cmp","text":"Pro Gravito CMP supports two ways to enable Microsoft's Universal Consent Mode:","title":"Enabling Microsoft Consent Mode in Pro Gravito CMP"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_uet/#1-using-configurator","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito Pro CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Give config an appropriate name and choose Gravito CMP as Framework . After that, click Get Started to proceed. Now navigate to Gravito CMP tab and Consent Categories sub-tab for UET related setup. You can enable UET by checking the checkbox labeled Microsoft's Universal Event Tracking (UET) . After enabling UET, an additional field will appear for configuration.","title":"1. Using Configurator"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_uet/#consent-mapping","text":"You\u2019ll now see dropdowns to map category for : ad_storage Select the relevant consent category from the dropdown list. Note: This mapping is for the ad_storage signal only is common across both GCMv2 & UET. Once mapping is complete, click Save Progress at the top-right. Now you have successfully enabled Microsoft UET Consent Mode in your CMP configuration. You may continue filling out the other CMP configuration steps, or jump directly to the Deployment tab.","title":"Consent Mapping:"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/Gravito_cmp_uet/#2-without-configurator","text":"Enable UET Mode : Add the useUET flag under the gravitoCMP.core section of your configuration and set its value to true . gravitoCMP: { \"core\": { \"useUET\": true, // ... other configurations } // ... other sections } Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the gravitoCMP.core section of your config manually. Define adsConsentId Based on CMP Type The adsConsentId should be a single ID referring to the custom consent item that you have defined in the config. It is not an array of TCF purpose IDs in this case. Example: gravitoCMP: { \"core\": { \"useUET\": true, \"adsConsentId\": \"{{YOUR_CONSENT_ITEM_ID}}\" // ... other configurations }, } This means the consent value of the item with ID \"{{YOUR_CONSENT_ITEM_ID}}\" will be used for Microsoft UET. How Gravito CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"2. Without Configurator"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/gravito_cmp/","text":"PRO CMP - Gravito CMP Component What is Gravito CMP? Gravito CMP Component is a part of Gravito Pro CMP, used to deploy Gravito's Intelligent CMP. It is a lightweight CMP suitable for any website. It is not TCF certified. Gravito Intelligent CMP is a consent management solution that helps collect consent for data collection, analytics, targeting, personalization, and whatever your business needs to fulfill legal or regulatory requirements. How to use Gravito CMP Component in PRO CMP? You can use the Gravito CMP component in your PRO CMP while setting up your configuration. In PRO CMP Configurator's components tab, choose the Gravito CMP component and then configure it as per your requirement. How to setup Gravito CMP Component? Gravito CMP setup can be done using Pro CMP Configurator on Gravito\u2019s Admin Portal. Once you have selected the Gravito CMP component in the configurator, it will add the Gravito CMP tab in the left sidebar of the configurator. Click on it to open the Gravito CMP-specific configurator area. In this section, you will find the following tabs: Consent Categories : This tab is used to configure the consent-based settings. Here, you can configure the consent item, enable/disable various integrations such as Google Consent Mode, Microsoft UET, etc., as well as adjust some advanced settings. Note : Details on how to integrate with Google Consent Mode and Microsoft UET are already covered in the Gravito CMP UET and Gravito CMP GCM documentation. Languages : This tab is used to configure the languages for the CMP. You can add multiple languages and configure the text for each language. Appearance : This tab is used to configure the appearance of the CMP. In this tab, you can override the default styles of the CMP and configure the styles (CSS classes) as per your requirement. In the provided code editor on this tab, you can add the CSS classes to override the default styles of the CMP. Note : Whatever CSS classes you add in this tab will be added as a separate stylesheet in the head of the page. So you can basically add any CSS syntax in this editor. Help Content for each field is provided in the configurator itself. You can hover over the each field to see the help content. Event & Integration Gravito CMP Component, when used with PRO CMP, dispatches various events in its lifecycle. All these events are dispatched under the common namespace of gravito:cmp:light . You can listen to these events on your website and take the required action. To listen to these events, use the following code: window.addEventListener('gravito:cmp:light', function (event) { let eventType = event.detail.eventType; // your code here }); To access the current consent state of the CMP, use the following code: const getGravitoConsentCookieData = (cname) => { var name = cname + \"=\"; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(\";\"); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == \" \") { c = c.substring(1); } if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); } } return \"\"; }; let consentCookieName = window.gravitoPROCMPConfig.gravitoCMP.core.cookieName; let cookieData = getGravitoConsentCookieData(consentCookieName); let currentState = cookieData && JSON.parse(cookieData); // Current state will have the following structure: // { // \"Model\": [ // { // \"id\": 1, // \"name\": \"Your Consent\", // \"isConsentable\": true, // \"consent\": true // }, // ] // } You can use the above two code snippets to listen to events and get the current consent state of the CMP. For example, if you want to perform some action whenever a user gives/modifies consent, you can use the following code: const getGravitoConsentCookieData = (cname) => { var name = cname + \"=\"; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(\";\"); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == \" \") { c = c.substring(1); } if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); } } return \"\"; }; window.addEventListener('gravito:cmp:light', function (event) { let eventType = event.detail.eventType; let consentUpdateEventsList = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", ]; if (consentUpdateEventsList.includes(eventType)) { // Get the current consent state let consentCookieName = window.gravitoPROCMPConfig.gravitoCMP.core.cookieName; let cookieData = getGravitoConsentCookieData(consentCookieName); let currentState = cookieData && JSON.parse(cookieData); // Do your action here } }); Below is the list of event types dispatched by the Gravito CMP component: Event Name Description layer1:opt-out:all This event is dispatched when a user opts out of all categories in layer 1 (Declaration Tab), i.e., clicked on the Reject All button on layer 1. layer2:opt-out:all This event is dispatched when a user opts out of all categories in layer 2 (Details Tab), i.e., clicked on the Reject All button on layer 2. layer2:opt-in:selected This event is dispatched when a user opts in to selected categories in layer 2 (Details Tab), i.e., clicked on the Accept Selected button. layer1:opt-in:all This event is dispatched when a user opts in to all categories in layer 1 (Declaration Tab), i.e., clicked on the Accept All button. layer2:opt-in:all This event is dispatched when a user opts in to all categories in layer 2 (Details Tab), i.e., clicked on the Accept All button. layer1:settings This event is dispatched when a user clicks the settings button on layer 1. opt-in:previously This event is dispatched when the user has already given consent and a consent cookie is present in the browser. opt-in:previously:outdated This event is dispatched when the user has already given consent but the consent cookie is outdated. cmploaded This event is dispatched when the CMP is loaded and ready to use. ui-shown This event is dispatched when the CMP UI is shown to the user. gcm:default This event is dispatched when the GCM default event is added to the dataLayer. This is specific to GCMv2 integration and will not fire if GCMv2 is not enabled or if using a GTM Template. FAQ's How to Resurface the CMP UI to All users and Collect Consent Again? How to use your custom font in CMP?","title":"PRO CMP - Gravito CMP Component"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/gravito_cmp/#pro-cmp-gravito-cmp-component","text":"","title":"PRO CMP - Gravito CMP Component"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/gravito_cmp/#what-is-gravito-cmp","text":"Gravito CMP Component is a part of Gravito Pro CMP, used to deploy Gravito's Intelligent CMP. It is a lightweight CMP suitable for any website. It is not TCF certified. Gravito Intelligent CMP is a consent management solution that helps collect consent for data collection, analytics, targeting, personalization, and whatever your business needs to fulfill legal or regulatory requirements.","title":"What is Gravito CMP?"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/gravito_cmp/#how-to-use-gravito-cmp-component-in-pro-cmp","text":"You can use the Gravito CMP component in your PRO CMP while setting up your configuration. In PRO CMP Configurator's components tab, choose the Gravito CMP component and then configure it as per your requirement.","title":"How to use Gravito CMP Component in PRO CMP?"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/gravito_cmp/#how-to-setup-gravito-cmp-component","text":"Gravito CMP setup can be done using Pro CMP Configurator on Gravito\u2019s Admin Portal. Once you have selected the Gravito CMP component in the configurator, it will add the Gravito CMP tab in the left sidebar of the configurator. Click on it to open the Gravito CMP-specific configurator area. In this section, you will find the following tabs: Consent Categories : This tab is used to configure the consent-based settings. Here, you can configure the consent item, enable/disable various integrations such as Google Consent Mode, Microsoft UET, etc., as well as adjust some advanced settings. Note : Details on how to integrate with Google Consent Mode and Microsoft UET are already covered in the Gravito CMP UET and Gravito CMP GCM documentation. Languages : This tab is used to configure the languages for the CMP. You can add multiple languages and configure the text for each language. Appearance : This tab is used to configure the appearance of the CMP. In this tab, you can override the default styles of the CMP and configure the styles (CSS classes) as per your requirement. In the provided code editor on this tab, you can add the CSS classes to override the default styles of the CMP. Note : Whatever CSS classes you add in this tab will be added as a separate stylesheet in the head of the page. So you can basically add any CSS syntax in this editor. Help Content for each field is provided in the configurator itself. You can hover over the each field to see the help content.","title":"How to setup Gravito CMP Component?"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/gravito_cmp/#event-integration","text":"Gravito CMP Component, when used with PRO CMP, dispatches various events in its lifecycle. All these events are dispatched under the common namespace of gravito:cmp:light . You can listen to these events on your website and take the required action. To listen to these events, use the following code: window.addEventListener('gravito:cmp:light', function (event) { let eventType = event.detail.eventType; // your code here }); To access the current consent state of the CMP, use the following code: const getGravitoConsentCookieData = (cname) => { var name = cname + \"=\"; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(\";\"); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == \" \") { c = c.substring(1); } if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); } } return \"\"; }; let consentCookieName = window.gravitoPROCMPConfig.gravitoCMP.core.cookieName; let cookieData = getGravitoConsentCookieData(consentCookieName); let currentState = cookieData && JSON.parse(cookieData); // Current state will have the following structure: // { // \"Model\": [ // { // \"id\": 1, // \"name\": \"Your Consent\", // \"isConsentable\": true, // \"consent\": true // }, // ] // } You can use the above two code snippets to listen to events and get the current consent state of the CMP. For example, if you want to perform some action whenever a user gives/modifies consent, you can use the following code: const getGravitoConsentCookieData = (cname) => { var name = cname + \"=\"; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(\";\"); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == \" \") { c = c.substring(1); } if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); } } return \"\"; }; window.addEventListener('gravito:cmp:light', function (event) { let eventType = event.detail.eventType; let consentUpdateEventsList = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", ]; if (consentUpdateEventsList.includes(eventType)) { // Get the current consent state let consentCookieName = window.gravitoPROCMPConfig.gravitoCMP.core.cookieName; let cookieData = getGravitoConsentCookieData(consentCookieName); let currentState = cookieData && JSON.parse(cookieData); // Do your action here } }); Below is the list of event types dispatched by the Gravito CMP component: Event Name Description layer1:opt-out:all This event is dispatched when a user opts out of all categories in layer 1 (Declaration Tab), i.e., clicked on the Reject All button on layer 1. layer2:opt-out:all This event is dispatched when a user opts out of all categories in layer 2 (Details Tab), i.e., clicked on the Reject All button on layer 2. layer2:opt-in:selected This event is dispatched when a user opts in to selected categories in layer 2 (Details Tab), i.e., clicked on the Accept Selected button. layer1:opt-in:all This event is dispatched when a user opts in to all categories in layer 1 (Declaration Tab), i.e., clicked on the Accept All button. layer2:opt-in:all This event is dispatched when a user opts in to all categories in layer 2 (Details Tab), i.e., clicked on the Accept All button. layer1:settings This event is dispatched when a user clicks the settings button on layer 1. opt-in:previously This event is dispatched when the user has already given consent and a consent cookie is present in the browser. opt-in:previously:outdated This event is dispatched when the user has already given consent but the consent cookie is outdated. cmploaded This event is dispatched when the CMP is loaded and ready to use. ui-shown This event is dispatched when the CMP UI is shown to the user. gcm:default This event is dispatched when the GCM default event is added to the dataLayer. This is specific to GCMv2 integration and will not fire if GCMv2 is not enabled or if using a GTM Template.","title":"Event &amp; Integration"},{"location":"Gravito_Pro_CMP/Components/GravitoCMP/gravito_cmp/#faqs","text":"How to Resurface the CMP UI to All users and Collect Consent Again? How to use your custom font in CMP?","title":"FAQ's"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp/","text":"PRO CMP - TCF CMP Component What is TCF CMP? It is a TCF 2.2 compliant consent management platform component. It is used to collect consent for TCF 2.2 purposes, special features, and vendors. It is a full-fledged CMP that can be used for any website. It can be used for GDPR compliance. This will be port of Gravito TCF 2.2 CMP which is also listed as one of the Google Certified TCF CMP's ( Web and App ) How to use TCF CMP Component in PRO CMP? You can use the TCF CMP component in your PRO CMP while setting up your configuration. In PRO CMP Configurator's components tab, choose the TCF CMP component and then configure it as per your requirement. How to setup TCF CMP Component? TCF CMP setup can be done using Pro CMP Configurator on Gravito\u2019s Admin Portal. Once you have selected the TCF CMP component in the configurator, it will add the TCF CMP tab in the left sidebar of the configurator. Click on it to open the TCF CMP-specific configurator area. In this section, you will find the following tabs: TCF Settings : This tab is used to configure the consent-based settings. Here, you can configure the consentable items mentioned in the TCFv2.2 framework such as TCF vendors, purposes, special purposes, features, special features, enable/disable various integrations such as Google Consent Mode, Microsoft UET, etc., as well as adjust some advanced settings. Note : Details on how to integrate with Google Consent Mode and Microsoft UET are already covered in the Gravito TCF CMP UET and Gravito TCF CMP GCM documentation. Languages : This tab is used to configure the languages for the CMP. You can add multiple languages and configure the text for each language. Appearance : This tab is used to configure the appearance of the CMP. In this tab, you can override the default styles of the CMP and configure the styles (CSS classes) as per your requirement. In the provided code editor on this tab, you can add the CSS classes to override the default styles of the CMP. Additionally, you can also choose the type of consent input controls you want to use in the CMP. You can choose between Checkbox and Toggle . The default value is Checkbox . Note : Whatever CSS classes you add in this tab will be added as a separate stylesheet in the head of the page. So you can basically add any CSS syntax in this editor. Help content for each field is provided in the configurator itself. You can hover over each field to see the help content. Event & Integration TCF CMP Component, when used with PRO CMP, dispatches various events in its lifecycle. All these events are dispatched under the common namespace of gravito:tcfv2:client . You can listen to these events on your website and take the required action. To listen to these events, use the following code: window.addEventListener('gravito:tcfv2:client', function (event) { let eventType = event.detail.eventType; // your code here }); TCF Component exposes a current state of consent in window scope object. You can access the current state of consent using window.gravitoCMP.currentState . This object will have consent values for all the purposes, special features, and vendors used by CMP. let currentState = window.gravitoCMP.currentState // Current state will have the following structure: let currentState = window.gravitoCMP.currentState // Current state will have the following structure: // { // \"whiteListVendors\": { // \"consent\": { // \"2\": true, // \"6\": true, // \"8\": true, // \"11\": true, // \"14\": true, // \"278\": false, // \"511\": true, // \"755\": true // }, // \"legitimateInterests\": { // \"2\": true, // \"6\": true, // \"8\": true, // \"11\": true, // \"14\": true, // \"278\": true, // \"511\": true, // \"755\": true // } // }, // \"purposes\": { // \"consent\": { // \"1\": true, // \"2\": true, // \"3\": true, // \"4\": true, // \"5\": true, // \"6\": true, // \"7\": true, // \"8\": true, // \"9\": true, // \"10\": true, // \"11\": true // }, // \"legitimateInterests\": { // \"1\": false, // \"2\": true, // \"3\": false, // \"4\": false, // \"5\": false, // \"6\": false, // \"7\": true, // \"8\": true, // \"9\": true, // \"10\": true, // \"11\": true // } // }, // \"specialFeatures\": { // \"1\": true, // \"2\": true // }, // \"customPurposes\": { // \"consent\": { // \"1\": true, // \"2\": true // }, // \"legitimateInterests\": { // \"1\": true, // \"2\": false // } // }, // \"nonTCFVendors\": [ // { // \"id\": 1, // \"name\": \"Facebook\", // \"consent\": true // }, // { // \"id\": 2, // \"name\": \"Amazon\", // \"consent\": false // } // ] // } ; Note : The above object is just an example. The actual object will have the values based on the user's consent and your configuration. You can use the above two code snippets to listen to events and get the current consent state of the CMP. For example, if you want to perform some action whenever a user gives/modifies consent, you can use the following code: window.addEventListener('gravito:tcfv2:client', function (event) { let eventType = event.detail.eventType; let consentUpdateEventsList = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", ]; if (consentUpdateEventsList.includes(eventType)) { // Get the current consent state let currentState = window.gravitoCMP.currentState; // Do your action here } }); Below is the list of event types dispatched by the TCF CMP component: Event Name Description layer1:opt-out:all This event is dispatched when a user opts out of all categories in layer 1 (Declaration Tab), i.e., clicked on the Reject All button on layer 1. layer2:opt-out:all This event is dispatched when a user opts out of all categories in layer 2 (Details Tab), i.e., clicked on the Reject All button on layer 2. layer2:opt-in:selected This event is dispatched when a user opts in to selected categories in layer 2 (Details Tab), i.e., clicked on the Accept Selected button. layer1:opt-in:all This event is dispatched when a user opts in to all categories in layer 1 (Declaration Tab), i.e., clicked on the Accept All button. layer2:opt-in:all This event is dispatched when a user opts in to all categories in layer 2 (Details Tab), i.e., clicked on the Accept All button. layer1:settings This event is dispatched when a user clicks the settings button on layer 1. opt-in:previously This event is dispatched when the user has already given consent and a consent cookie is present in the browser. opt-in:previously:outdated This event is dispatched when the user has already given consent but the consent cookie is outdated. cmploaded This event is dispatched when the CMP is loaded and ready to use. ui-shown This event is dispatched when the CMP UI is shown to the user. gcm:default This event is dispatched when the GCM default event is added to the dataLayer. This is specific to GCMv2 integration and will not fire if GCMv2 is not enabled or if using a GTM Template. FAQ's How to Resurface the CMP UI to All users and Collect Consent Again? How to use your custom font in CMP? How to Provide Google with the Required Legititimate Interest's Even on Reject All Action?","title":"PRO CMP - TCF CMP Component"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp/#pro-cmp-tcf-cmp-component","text":"","title":"PRO CMP - TCF CMP Component"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp/#what-is-tcf-cmp","text":"It is a TCF 2.2 compliant consent management platform component. It is used to collect consent for TCF 2.2 purposes, special features, and vendors. It is a full-fledged CMP that can be used for any website. It can be used for GDPR compliance. This will be port of Gravito TCF 2.2 CMP which is also listed as one of the Google Certified TCF CMP's ( Web and App )","title":"What is TCF CMP?"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp/#how-to-use-tcf-cmp-component-in-pro-cmp","text":"You can use the TCF CMP component in your PRO CMP while setting up your configuration. In PRO CMP Configurator's components tab, choose the TCF CMP component and then configure it as per your requirement.","title":"How to use TCF CMP Component in PRO CMP?"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp/#how-to-setup-tcf-cmp-component","text":"TCF CMP setup can be done using Pro CMP Configurator on Gravito\u2019s Admin Portal. Once you have selected the TCF CMP component in the configurator, it will add the TCF CMP tab in the left sidebar of the configurator. Click on it to open the TCF CMP-specific configurator area. In this section, you will find the following tabs: TCF Settings : This tab is used to configure the consent-based settings. Here, you can configure the consentable items mentioned in the TCFv2.2 framework such as TCF vendors, purposes, special purposes, features, special features, enable/disable various integrations such as Google Consent Mode, Microsoft UET, etc., as well as adjust some advanced settings. Note : Details on how to integrate with Google Consent Mode and Microsoft UET are already covered in the Gravito TCF CMP UET and Gravito TCF CMP GCM documentation. Languages : This tab is used to configure the languages for the CMP. You can add multiple languages and configure the text for each language. Appearance : This tab is used to configure the appearance of the CMP. In this tab, you can override the default styles of the CMP and configure the styles (CSS classes) as per your requirement. In the provided code editor on this tab, you can add the CSS classes to override the default styles of the CMP. Additionally, you can also choose the type of consent input controls you want to use in the CMP. You can choose between Checkbox and Toggle . The default value is Checkbox . Note : Whatever CSS classes you add in this tab will be added as a separate stylesheet in the head of the page. So you can basically add any CSS syntax in this editor. Help content for each field is provided in the configurator itself. You can hover over each field to see the help content.","title":"How to setup TCF CMP Component?"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp/#event-integration","text":"TCF CMP Component, when used with PRO CMP, dispatches various events in its lifecycle. All these events are dispatched under the common namespace of gravito:tcfv2:client . You can listen to these events on your website and take the required action. To listen to these events, use the following code: window.addEventListener('gravito:tcfv2:client', function (event) { let eventType = event.detail.eventType; // your code here }); TCF Component exposes a current state of consent in window scope object. You can access the current state of consent using window.gravitoCMP.currentState . This object will have consent values for all the purposes, special features, and vendors used by CMP. let currentState = window.gravitoCMP.currentState // Current state will have the following structure: let currentState = window.gravitoCMP.currentState // Current state will have the following structure: // { // \"whiteListVendors\": { // \"consent\": { // \"2\": true, // \"6\": true, // \"8\": true, // \"11\": true, // \"14\": true, // \"278\": false, // \"511\": true, // \"755\": true // }, // \"legitimateInterests\": { // \"2\": true, // \"6\": true, // \"8\": true, // \"11\": true, // \"14\": true, // \"278\": true, // \"511\": true, // \"755\": true // } // }, // \"purposes\": { // \"consent\": { // \"1\": true, // \"2\": true, // \"3\": true, // \"4\": true, // \"5\": true, // \"6\": true, // \"7\": true, // \"8\": true, // \"9\": true, // \"10\": true, // \"11\": true // }, // \"legitimateInterests\": { // \"1\": false, // \"2\": true, // \"3\": false, // \"4\": false, // \"5\": false, // \"6\": false, // \"7\": true, // \"8\": true, // \"9\": true, // \"10\": true, // \"11\": true // } // }, // \"specialFeatures\": { // \"1\": true, // \"2\": true // }, // \"customPurposes\": { // \"consent\": { // \"1\": true, // \"2\": true // }, // \"legitimateInterests\": { // \"1\": true, // \"2\": false // } // }, // \"nonTCFVendors\": [ // { // \"id\": 1, // \"name\": \"Facebook\", // \"consent\": true // }, // { // \"id\": 2, // \"name\": \"Amazon\", // \"consent\": false // } // ] // } ; Note : The above object is just an example. The actual object will have the values based on the user's consent and your configuration. You can use the above two code snippets to listen to events and get the current consent state of the CMP. For example, if you want to perform some action whenever a user gives/modifies consent, you can use the following code: window.addEventListener('gravito:tcfv2:client', function (event) { let eventType = event.detail.eventType; let consentUpdateEventsList = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", ]; if (consentUpdateEventsList.includes(eventType)) { // Get the current consent state let currentState = window.gravitoCMP.currentState; // Do your action here } }); Below is the list of event types dispatched by the TCF CMP component: Event Name Description layer1:opt-out:all This event is dispatched when a user opts out of all categories in layer 1 (Declaration Tab), i.e., clicked on the Reject All button on layer 1. layer2:opt-out:all This event is dispatched when a user opts out of all categories in layer 2 (Details Tab), i.e., clicked on the Reject All button on layer 2. layer2:opt-in:selected This event is dispatched when a user opts in to selected categories in layer 2 (Details Tab), i.e., clicked on the Accept Selected button. layer1:opt-in:all This event is dispatched when a user opts in to all categories in layer 1 (Declaration Tab), i.e., clicked on the Accept All button. layer2:opt-in:all This event is dispatched when a user opts in to all categories in layer 2 (Details Tab), i.e., clicked on the Accept All button. layer1:settings This event is dispatched when a user clicks the settings button on layer 1. opt-in:previously This event is dispatched when the user has already given consent and a consent cookie is present in the browser. opt-in:previously:outdated This event is dispatched when the user has already given consent but the consent cookie is outdated. cmploaded This event is dispatched when the CMP is loaded and ready to use. ui-shown This event is dispatched when the CMP UI is shown to the user. gcm:default This event is dispatched when the GCM default event is added to the dataLayer. This is specific to GCMv2 integration and will not fire if GCMv2 is not enabled or if using a GTM Template.","title":"Event &amp; Integration"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp/#faqs","text":"How to Resurface the CMP UI to All users and Collect Consent Again? How to use your custom font in CMP? How to Provide Google with the Required Legititimate Interest's Even on Reject All Action?","title":"FAQ's"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_gcmv2/","text":"Google Consent Mode v2 What is Google Consent Mode v2? Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) : Consent Signals: ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Official Google Documentation on Consent Mode v2 Enabling Google Consent Mode v2 in Pro TCF CMP Creating Config in Admin Portal Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito Pro CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP Config. Give config an appropriate name and choose TCF CMP as Framework . After that, click Get Started to proceed. Now navigate to TCF CMP tab and TCF Settings sub-tab for GCMv2 related setup. You can enable GCM by checking the checkbox labeled Google's GCM-V2 . After enabling GCM, some additional fields will appear for configuration. Use GCM Advance Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . All other fields are related to Google consent signal mapping. They are explained below. Note: when the using GCM Basic Mode, the GTM template deployment option will not be available. Google's Consent Signal Mapping: You\u2019ll now see default mapping for the following Google consent signals:: ad_storage analytics_storage ad_user_data ad_personalization These signals are pre-mapped to the TCF purposes based on Google's requirements and should not be changed. you may continue filling out the other CMP configuration steps, or jump directly to the Deployment\" tab for publishing your config. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. below the comment // Insert your GTM script here you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\");","title":"Google Consent Mode v2"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#google-consent-mode-v2","text":"","title":"Google Consent Mode v2"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#what-is-google-consent-mode-v2","text":"Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) :","title":"What is Google Consent Mode v2?"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#consent-signals","text":"ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Official Google Documentation on Consent Mode v2","title":"Consent Signals:"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#enabling-google-consent-mode-v2-in-pro-tcf-cmp","text":"","title":"Enabling Google Consent Mode v2 in Pro TCF CMP"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#creating-config-in-admin-portal","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito Pro CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP Config. Give config an appropriate name and choose TCF CMP as Framework . After that, click Get Started to proceed. Now navigate to TCF CMP tab and TCF Settings sub-tab for GCMv2 related setup. You can enable GCM by checking the checkbox labeled Google's GCM-V2 . After enabling GCM, some additional fields will appear for configuration. Use GCM Advance Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . All other fields are related to Google consent signal mapping. They are explained below. Note: when the using GCM Basic Mode, the GTM template deployment option will not be available.","title":"Creating Config in Admin Portal"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#googles-consent-signal-mapping","text":"You\u2019ll now see default mapping for the following Google consent signals:: ad_storage analytics_storage ad_user_data ad_personalization These signals are pre-mapped to the TCF purposes based on Google's requirements and should not be changed. you may continue filling out the other CMP configuration steps, or jump directly to the Deployment\" tab for publishing your config. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. below the comment // Insert your GTM script here you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\");","title":"Google's Consent Signal Mapping:"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_uet/","text":"Microsoft Consent Mode (UET) Enabling Microsoft Consent Mode in Pro TCF CMP Pro TCF CMP supports two ways to enable Microsoft's Universal Consent Mode: 1. Using Configurator Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito Pro CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Give config an appropriate name and choose TCF CMP as Framework . After that, click Get Started to proceed. Now navigate to TCF CMP tab and TCF Settings sub-tab for UET related setup. You can enable UET by checking the checkbox labeled Microsoft's Universal Event Tracking (UET) . After enabling UET, an additional field will appear for configuration. Microsoft's Consent Signal Mapping: You\u2019ll now see default mapping for the consent signal : ad_storage The signal is pre-mapped to the TCF purposes based on Microsoft's requirements and should not be changed. Note: This mapping for the ad_storage signal is common across both GCMv2 & UET. You may continue filling out the other CMP configuration steps, or jump directly to the Deployment tab for publishing your config. 2. Without Configurator Enable UET Mode : Add the useUET flag under the tcfCMP.core section of your configuration and set its value to true . tcfCMP: { \"core\": { \"useUET\": true, // ... other configurations } // ... other sections } Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the tcfCMP.core section of your config manually. Define adsConsentId Based on CMP Type The adsConsentId should be an Array containing the IDs of TCF Purposes. It's value should be set to [1] Example: gravitoCMP: { \"core\": { \"useUET\": true, \"adsConsentId\": [1] // ... other configurations }, } This example maps the consent value of Purpose 1 (typically used for storing and accessing information) to UET consent. How Pro TCF CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"Microsoft Consent Mode (UET)"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_uet/#microsoft-consent-mode-uet","text":"","title":"Microsoft Consent Mode (UET)"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_uet/#enabling-microsoft-consent-mode-in-pro-tcf-cmp","text":"Pro TCF CMP supports two ways to enable Microsoft's Universal Consent Mode:","title":"Enabling Microsoft Consent Mode in Pro TCF CMP"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_uet/#1-using-configurator","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito Pro CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Give config an appropriate name and choose TCF CMP as Framework . After that, click Get Started to proceed. Now navigate to TCF CMP tab and TCF Settings sub-tab for UET related setup. You can enable UET by checking the checkbox labeled Microsoft's Universal Event Tracking (UET) . After enabling UET, an additional field will appear for configuration.","title":"1. Using Configurator"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_uet/#microsofts-consent-signal-mapping","text":"You\u2019ll now see default mapping for the consent signal : ad_storage The signal is pre-mapped to the TCF purposes based on Microsoft's requirements and should not be changed. Note: This mapping for the ad_storage signal is common across both GCMv2 & UET. You may continue filling out the other CMP configuration steps, or jump directly to the Deployment tab for publishing your config.","title":"Microsoft's Consent Signal Mapping:"},{"location":"Gravito_Pro_CMP/Components/TCFCMP/tcf_cmp_uet/#2-without-configurator","text":"Enable UET Mode : Add the useUET flag under the tcfCMP.core section of your configuration and set its value to true . tcfCMP: { \"core\": { \"useUET\": true, // ... other configurations } // ... other sections } Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the tcfCMP.core section of your config manually. Define adsConsentId Based on CMP Type The adsConsentId should be an Array containing the IDs of TCF Purposes. It's value should be set to [1] Example: gravitoCMP: { \"core\": { \"useUET\": true, \"adsConsentId\": [1] // ... other configurations }, } This example maps the consent value of Purpose 1 (typically used for storing and accessing information) to UET consent. How Pro TCF CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"2. Without Configurator"},{"location":"Gravito_Pro_CMP/FAQ/How_open_CMP_in_given_session/","text":"How to open PRO CMP in given sesssion? To open PRO CMP in a given session, you can use the window.gravitoPROCMP.openPreferences() method. This method will open the CMP in the current session, allowing users to manage their consent preferences. You can call this method in your JavaScript code when you want to open the CMP. For example, you can attach it to a button click event or any other event that you want to use to trigger the CMP. This method will by default open the details/layer 2 of PRO-CMP button you can also specific the layer you want to open by passing the tab Index as an argument. For example, to open layer 1, you can use the following code: window.gravitoPROCMP.openPreferences(0);","title":"How to open PRO CMP in given sesssion?"},{"location":"Gravito_Pro_CMP/FAQ/How_open_CMP_in_given_session/#how-to-open-pro-cmp-in-given-sesssion","text":"To open PRO CMP in a given session, you can use the window.gravitoPROCMP.openPreferences() method. This method will open the CMP in the current session, allowing users to manage their consent preferences. You can call this method in your JavaScript code when you want to open the CMP. For example, you can attach it to a button click event or any other event that you want to use to trigger the CMP. This method will by default open the details/layer 2 of PRO-CMP button you can also specific the layer you want to open by passing the tab Index as an argument. For example, to open layer 1, you can use the following code: window.gravitoPROCMP.openPreferences(0);","title":"How to open PRO CMP in given sesssion?"},{"location":"Gravito_Pro_CMP/FAQ/How_to_addCustomFonts/","text":"How to Add Custom Font in PRO CMP? To add custom fonts in PRO CMP, you can use the customCSS field (Code Editior) in the configurator. You can add any CSS syntax in this field, including @font-face rules to load custom fonts. Here is an example of how to add a custom font using @font-face : @font-face { font-family: 'MyCustomFont'; src: url('https://example.com/fonts/MyCustomFont.woff2') format('woff2'), url('https://example.com/fonts/MyCustomFont.woff') format('woff'); font-weight: normal; font-style: normal; } You can then use this font name to override the default font in the CSS class for the root container of PRO CMP, i.e., the class gravitoPROCMP-tab-container . .gravitoPROCMP-tab-container { font-family: 'MyCustomFont', sans-serif; }","title":"How to Add Custom Font in PRO CMP?"},{"location":"Gravito_Pro_CMP/FAQ/How_to_addCustomFonts/#how-to-add-custom-font-in-pro-cmp","text":"To add custom fonts in PRO CMP, you can use the customCSS field (Code Editior) in the configurator. You can add any CSS syntax in this field, including @font-face rules to load custom fonts. Here is an example of how to add a custom font using @font-face : @font-face { font-family: 'MyCustomFont'; src: url('https://example.com/fonts/MyCustomFont.woff2') format('woff2'), url('https://example.com/fonts/MyCustomFont.woff') format('woff'); font-weight: normal; font-style: normal; } You can then use this font name to override the default font in the CSS class for the root container of PRO CMP, i.e., the class gravitoPROCMP-tab-container . .gravitoPROCMP-tab-container { font-family: 'MyCustomFont', sans-serif; }","title":"How to Add Custom Font in PRO CMP?"},{"location":"Gravito_Pro_CMP/FAQ/How_to_be_google_complaint/","text":"How to Provide Google with the Required Legitimate Interests Even on Reject All Action (Only for TCF Components)? In PRO CMP, there is a provision to provide Google with the required legitimate interests even on the Reject All action. This is done by configuring the necessaryLegitimatePurposes field in the gravitoPROCMPConfig object. Google requires legitimate interests for purposes [2, 7, 9, 10] to be provided even on a Reject All action. You can modify this field in either of the following ways: Using Configurator : Open the CMP configurator in the Admin Portal. Select the config from the list and click on the Copy Configuration icon/button. This will create a new CMP config with the same settings as the original one. Now enter the name on the Basic Settings page and click the Get Started button. In the left-side menu, select the TCF CMP component. Now click on TCF Settings . In the TCF settings, you will see the necessaryLegitimatePurposes field. Change it to use purposes 2, 7, 9, 10 , then click the Save Progress button, and finally click the Publish button to publish the new config. Now, when you use this updated config on your website, it will provide Google with the required legitimate interests even on a Reject All action. Without Configurator : If you are using the TCF CMP component, update the necessaryLegitimatePurposes field at window.gravitoPROCMPConfig.tcfCMP.core.necessaryLegitimatePurposes in the config object. If you are using the Gravito CMP component, update the necessaryLegitimatePurposes field at window.gravitoPROCMPConfig.gravitoCMP.core.necessaryLegitimatePurposes in the config object. Now, when you use this updated config on your website, it will provide Google with the required legitimate interests even on a Reject All action. Note: This is only applicable for the TCF CMP component. The CMP will also additionally provide legitimate interest to Google\u2019s TCF vendor. Its ID is configured in the config at window.gravitoPROCMPConfig.tcfCMP.core.googleTcfId in the config object.","title":"How to Provide Google with the Required Legitimate Interests Even on Reject All Action (Only for TCF Components)?"},{"location":"Gravito_Pro_CMP/FAQ/How_to_be_google_complaint/#how-to-provide-google-with-the-required-legitimate-interests-even-on-reject-all-action-only-for-tcf-components","text":"In PRO CMP, there is a provision to provide Google with the required legitimate interests even on the Reject All action. This is done by configuring the necessaryLegitimatePurposes field in the gravitoPROCMPConfig object. Google requires legitimate interests for purposes [2, 7, 9, 10] to be provided even on a Reject All action. You can modify this field in either of the following ways: Using Configurator : Open the CMP configurator in the Admin Portal. Select the config from the list and click on the Copy Configuration icon/button. This will create a new CMP config with the same settings as the original one. Now enter the name on the Basic Settings page and click the Get Started button. In the left-side menu, select the TCF CMP component. Now click on TCF Settings . In the TCF settings, you will see the necessaryLegitimatePurposes field. Change it to use purposes 2, 7, 9, 10 , then click the Save Progress button, and finally click the Publish button to publish the new config. Now, when you use this updated config on your website, it will provide Google with the required legitimate interests even on a Reject All action. Without Configurator : If you are using the TCF CMP component, update the necessaryLegitimatePurposes field at window.gravitoPROCMPConfig.tcfCMP.core.necessaryLegitimatePurposes in the config object. If you are using the Gravito CMP component, update the necessaryLegitimatePurposes field at window.gravitoPROCMPConfig.gravitoCMP.core.necessaryLegitimatePurposes in the config object. Now, when you use this updated config on your website, it will provide Google with the required legitimate interests even on a Reject All action. Note: This is only applicable for the TCF CMP component. The CMP will also additionally provide legitimate interest to Google\u2019s TCF vendor. Its ID is configured in the config at window.gravitoPROCMPConfig.tcfCMP.core.googleTcfId in the config object.","title":"How to Provide Google with the Required Legitimate Interests Even on Reject All Action (Only for TCF Components)?"},{"location":"Gravito_Pro_CMP/FAQ/How_to_fireGTM_tags_based_on_consents/","text":"How to Fire GTM Tags Based on Consents in CMP? Note: This feature is only available in the PRO CMP \u2013 Gravito CMP Component. In PRO CMP you can fire GTM tags based on the consents given by the user. This is done by configuring the gtmTags field in PRO CMP config. The gtmTags field is an array of objects, where each object represents the Trigger events and its configurations which will be used to fire the GTM tags. You can modify this field in either of the following ways: Using Configurator : Open the CMP configurator in the Admin Portal. Select the config from the list and click on the Copy Configuration icon/button. This will create a new CMP config with the same settings as the original one. Now enter the name on the Basic Settings page and click the Get Started button. In the left-side menu, select the Gravito CMP component. Now click on Consent Categories Tab. In this tab, you will see the gtmTags sections. Click the Add GTM Tags button to add a new GTM tag configuration.It will open a modal containing the following fields: Trigger Name : This is the event name which will be added to the data layer, and In GTM you can create a Custom Trigger using this event. Consents : In this multi-select control you can choose the consent items to which you want to bind these events, i.e., the value of this consent will decide wether to add the above events in the dataLayer object. Fire Once : Check this checkbox if you want to fire the event only once in the session. In most cases you will need to keep this flag checked as you want your tag to fire once to avoid duplicate loading of tags. Once you have added the GTM tag configuration by clicking Save , you can see it in the list of GTM tags. You can add multiple GTM tags by clicking on the Add GTM Tags button again. Click the Save Progress button and then click on the Publish button to publish the new config. Now when you will use this updated config in your website, it will fire GTM tags based on the consents given by the user. Without Configurator : if you are having Gravito CMP component in context then update the gtmTags field at window.gravitoPROCMPConfig.gravitoCMP.core.gtmTags in the config object. below code is an example of how the gtmTags field should look like: gravitoCMP: { core: { gtmTags: [ { triggerName: 'Marketing Consent update', // this is the event name which will be added to the data layer consentIds: [3], // this will be the consent id to which this event will be bound fireOnce: true // this will decide whether to fire the event only once in the session or not }, { triggerName: 'GTM Event Name 2', consentIds: [2], fireOnce: false } ] } } Now when you will use this updated config in your website, it will fire GTM tags based on the consents given by the user. How this works Internally? Whenever you have this field in your config , CMP will check the consent value of the consents ids you have provided in the gtmTags field. If the consent value is true then it will add the event to the dataLayer object. So for example if you have added the gtmTags field as shown above, then CMP will add the following event to the dataLayer object if the consent value of the consent id 3 is true: window.dataLayer.push({ event: 'Marketing Consent update', }); Now in GTM you can create a Custom Trigger using this event. So whenever the user gives consent to the consent id 3, this event will be added to the dataLayer object and you can use this event to fire your GTM tags. How to create a Custom Trigger in GTM? Open your GTM account and select the container where you want to create the trigger. Click on the Triggers tab in the left-side menu. Click on the New button to create a new trigger. In the trigger configuration, select Custom Event as the trigger type. In the Event Name field, enter the event name which you have provided in the gtmTags field in the config. For example, if you have provided Marketing Consent update as the event name, then enter it here. In the This trigger fires on section, select All Custom Events or Some Custom Events based on your requirement. Now click on the Save button to save the trigger. Now you can use this trigger in your GTM tags to fire them based on the consents given by the user.","title":"How to Fire GTM Tags Based on Consents in CMP?"},{"location":"Gravito_Pro_CMP/FAQ/How_to_fireGTM_tags_based_on_consents/#how-to-fire-gtm-tags-based-on-consents-in-cmp","text":"Note: This feature is only available in the PRO CMP \u2013 Gravito CMP Component. In PRO CMP you can fire GTM tags based on the consents given by the user. This is done by configuring the gtmTags field in PRO CMP config. The gtmTags field is an array of objects, where each object represents the Trigger events and its configurations which will be used to fire the GTM tags. You can modify this field in either of the following ways: Using Configurator : Open the CMP configurator in the Admin Portal. Select the config from the list and click on the Copy Configuration icon/button. This will create a new CMP config with the same settings as the original one. Now enter the name on the Basic Settings page and click the Get Started button. In the left-side menu, select the Gravito CMP component. Now click on Consent Categories Tab. In this tab, you will see the gtmTags sections. Click the Add GTM Tags button to add a new GTM tag configuration.It will open a modal containing the following fields: Trigger Name : This is the event name which will be added to the data layer, and In GTM you can create a Custom Trigger using this event. Consents : In this multi-select control you can choose the consent items to which you want to bind these events, i.e., the value of this consent will decide wether to add the above events in the dataLayer object. Fire Once : Check this checkbox if you want to fire the event only once in the session. In most cases you will need to keep this flag checked as you want your tag to fire once to avoid duplicate loading of tags. Once you have added the GTM tag configuration by clicking Save , you can see it in the list of GTM tags. You can add multiple GTM tags by clicking on the Add GTM Tags button again. Click the Save Progress button and then click on the Publish button to publish the new config. Now when you will use this updated config in your website, it will fire GTM tags based on the consents given by the user. Without Configurator : if you are having Gravito CMP component in context then update the gtmTags field at window.gravitoPROCMPConfig.gravitoCMP.core.gtmTags in the config object. below code is an example of how the gtmTags field should look like: gravitoCMP: { core: { gtmTags: [ { triggerName: 'Marketing Consent update', // this is the event name which will be added to the data layer consentIds: [3], // this will be the consent id to which this event will be bound fireOnce: true // this will decide whether to fire the event only once in the session or not }, { triggerName: 'GTM Event Name 2', consentIds: [2], fireOnce: false } ] } } Now when you will use this updated config in your website, it will fire GTM tags based on the consents given by the user.","title":"How to Fire GTM Tags Based on Consents in CMP?"},{"location":"Gravito_Pro_CMP/FAQ/How_to_fireGTM_tags_based_on_consents/#how-this-works-internally","text":"Whenever you have this field in your config , CMP will check the consent value of the consents ids you have provided in the gtmTags field. If the consent value is true then it will add the event to the dataLayer object. So for example if you have added the gtmTags field as shown above, then CMP will add the following event to the dataLayer object if the consent value of the consent id 3 is true: window.dataLayer.push({ event: 'Marketing Consent update', }); Now in GTM you can create a Custom Trigger using this event. So whenever the user gives consent to the consent id 3, this event will be added to the dataLayer object and you can use this event to fire your GTM tags.","title":"How this works Internally?"},{"location":"Gravito_Pro_CMP/FAQ/How_to_fireGTM_tags_based_on_consents/#how-to-create-a-custom-trigger-in-gtm","text":"Open your GTM account and select the container where you want to create the trigger. Click on the Triggers tab in the left-side menu. Click on the New button to create a new trigger. In the trigger configuration, select Custom Event as the trigger type. In the Event Name field, enter the event name which you have provided in the gtmTags field in the config. For example, if you have provided Marketing Consent update as the event name, then enter it here. In the This trigger fires on section, select All Custom Events or Some Custom Events based on your requirement. Now click on the Save button to save the trigger. Now you can use this trigger in your GTM tags to fire them based on the consents given by the user.","title":"How to create a Custom Trigger in GTM?"},{"location":"Gravito_Pro_CMP/FAQ/How_to_resurface_ProCMP/","text":"How to Resurface the CMP UI to All users and Collect Consent Again? Gravito PRO CMP configs maintains version number for each CMP Component.it is in the core section of the cmp config object. CMP will compare this object number with the consent setting in the cookie. If the version number is different, it will show the CMP UI to the user again. You can increement the version number in either of the following ways: Using Configurator : Open the CMP configurator in admin Portal. Select the Confg from the list and click on the copy configuration icon button. This will create a new CMP config with the same settings as the original one. Now enter the name on the basic setting page and click on the Get Started button. Now in the left side menu select the CMP component you want to update this will open CMP specific configuration page. Now click on TCF Settings or Consent Categories depending on the CMP component you are updating. In this tab at the bottom you will the explore Advance setup button. Click on it to open the advanced settings. In the advanced settings you will see the config version. Change it to a new number and click on the Save Progress button. and then click on the Publish button to publish the new config. Now when you will use this updated config in your website, it will show the CMP UI to the user again. Without Configurator : if you are having TCF CMP component in context then update the version number at window.gravitoPROCMPConfig.tcfCMP.core.version in the config object. if you are having Gravito CMP component in context then update the version number at window.gravitoPROCMPConfig.gravitoCMP.core.version in the config object. Now when you will use this updated config in your website, it will show the CMP UI to the user again.","title":"How to Resurface the CMP UI to All users and Collect Consent Again?"},{"location":"Gravito_Pro_CMP/FAQ/How_to_resurface_ProCMP/#how-to-resurface-the-cmp-ui-to-all-users-and-collect-consent-again","text":"Gravito PRO CMP configs maintains version number for each CMP Component.it is in the core section of the cmp config object. CMP will compare this object number with the consent setting in the cookie. If the version number is different, it will show the CMP UI to the user again. You can increement the version number in either of the following ways: Using Configurator : Open the CMP configurator in admin Portal. Select the Confg from the list and click on the copy configuration icon button. This will create a new CMP config with the same settings as the original one. Now enter the name on the basic setting page and click on the Get Started button. Now in the left side menu select the CMP component you want to update this will open CMP specific configuration page. Now click on TCF Settings or Consent Categories depending on the CMP component you are updating. In this tab at the bottom you will the explore Advance setup button. Click on it to open the advanced settings. In the advanced settings you will see the config version. Change it to a new number and click on the Save Progress button. and then click on the Publish button to publish the new config. Now when you will use this updated config in your website, it will show the CMP UI to the user again. Without Configurator : if you are having TCF CMP component in context then update the version number at window.gravitoPROCMPConfig.tcfCMP.core.version in the config object. if you are having Gravito CMP component in context then update the version number at window.gravitoPROCMPConfig.gravitoCMP.core.version in the config object. Now when you will use this updated config in your website, it will show the CMP UI to the user again.","title":"How to Resurface the CMP UI to All users and Collect Consent Again?"},{"location":"Gravito_SDK/Getting_Started/","text":"Getting Started The Gravito SDK ( Latest Version 2) is a tool that allows developers to communicate with the Gravito APIs and deploy both light CMP and TCF CMP. It includes functions for interacting with the Gravito first party backend solution and is used by all major services within the Gravito platform. How to include Gravito SDK to your project? <script> window.gravitoCMPConfig = { settings: { sdkVersion: 2, }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { console.log(\"gravito SDK loaded\"); }; document.body.appendChild(gravitoSDKTag); </script>","title":"Getting Started"},{"location":"Gravito_SDK/Getting_Started/#getting-started","text":"The Gravito SDK ( Latest Version 2) is a tool that allows developers to communicate with the Gravito APIs and deploy both light CMP and TCF CMP. It includes functions for interacting with the Gravito first party backend solution and is used by all major services within the Gravito platform. How to include Gravito SDK to your project? <script> window.gravitoCMPConfig = { settings: { sdkVersion: 2, }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { console.log(\"gravito SDK loaded\"); }; document.body.appendChild(gravitoSDKTag); </script>","title":"Getting Started"},{"location":"Gravito_SDK/Release_Notes/","text":"Release Notes Release Notes 6.0.0 (v600) (10/06/2025) New Features: Added support for Gravito CMP v6 and all its components. This version introduces full compatibility with the latest Gravito CMP v6, enabling seamless integration with all CMP modules. Changed the signature of the gravito.init() This allows for more flexible and dynamic initialization of the Gravito SDK. Changes: Removed unused modules to improve performance and reduce SDK size. Major refactor for v6 compatibility. Breaking Changes: This version is not backward compatible. CMP versions below v6 are no longer supported. Integration: Use the following snippet to include this version of the SDK in your project: <script> // init gravito window.gravito = {}; // add config object to gravito window.gravito.config = { cmp: { settings: { // common settings for all CMP components }, styles: { // common styles for all CMP components }, tcf: { // configuration for TCF CMP }, standard: { // configuration for standard CMP }, }, firstParty: { // configuration for first party CMP } }; // load gravito SDK var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdk/v6/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(); }; document.body.appendChild(gravitoSDKTag); </script> Release Notes 3.0.6 (v306) (06/05/2025) New Features: Added Support for Microsoft Universal Event Tracking (UET) Mode You can now enable Microsoft UET tracking by configuring useUET and adsConsentId in your CMP setup. This allows consent-aware integration with Microsoft's advertising platform. Release Notes (V 2.0.12) (08/02/2024) New Features: SDK now emits separate events when the user has clicked \"reject all\" previously. This enhancement provides more granular insights into user interactions, allowing for better tracking and analysis of user behavior. Added support for GCMV2 for TCF Consent Banners. With this update, Gravito now supports GCMV2. Release Notes (V 2.0.11 ) (31/01/2024) New Features: 1. Additional Consent Mode Support with TCF CMP GravitoSDK now seamlessly supports Google's Additional Consent Mode when integrated with TCF CMP. This enhancement ensures that your application is equipped to handle additional consent requirements in compliance with evolving privacy standards set by Google. Bug Fixes: 1. Crash Fix for Empty First-Party Data In version 2.0.11, we've addressed a bug that caused the SDK to crash when encountering empty first-party data. This bug fix ensures the stability of your website, providing a seamless experience for users even when first-party data is absent. Release Notes ( V 2.0.8 ) ( 04/01/2024 ) New Features Google Consent Mode V2 Integration in Light CMP: Gravito SDK now seamlessly integrates Google Consent Mode V2 functionalities within the Light CMP (Consent Management Platform). This update empowers developers to leverage Google's enhanced consent management features, allowing for more refined control over data tracking and advertising purposes. With this integration, developers can align their applications with evolving privacy regulations and user preferences by managing consent behavior based on user preferences regarding data collection and processing for advertising purposes. Support for Custom Cookie Expiry in TCF CMP 'Reject-All' Action: The Gravito SDK introduces support for customizing cookie expiration specifically for the 'Reject-All' action within the TCF CMP (Transparency and Consent Framework Consent Management Platform). Developers can now set distinct cookie expiry duration for cookies generated when users opt to 'Reject All' within the CMP UI. This feature empowers publishers to manage cookie lifespans, facilitating re-prompting of CMP UI after a lower expiry period for users who have initially rejected all consent. This is available to be set in the TCF CMP configurator on Gravito portal Release Notes ( V2 ) Gravito SDK Version 2 now uses a modular approach to avoid unnecessary imports of files into your website. You can configure which modules you want to use at the time of initialization process. Currently, it supports four modules: LightCMP, TCFCMP, FirstParty, and UserId modules. The SDK is compatible with LightCMP version 4 and above and TCF CMP version 3 and above. This new version of the SDK allows for more flexibility and control over the data collection and processing on your website. We recommend updating to this latest version to take advantage of the new features and improvements. Note If you have any issues or questions, please reach out to our support team for assistance.","title":"Release Notes"},{"location":"Gravito_SDK/Release_Notes/#release-notes","text":"Release Notes 6.0.0 (v600) (10/06/2025) New Features: Added support for Gravito CMP v6 and all its components. This version introduces full compatibility with the latest Gravito CMP v6, enabling seamless integration with all CMP modules. Changed the signature of the gravito.init() This allows for more flexible and dynamic initialization of the Gravito SDK. Changes: Removed unused modules to improve performance and reduce SDK size. Major refactor for v6 compatibility. Breaking Changes: This version is not backward compatible. CMP versions below v6 are no longer supported. Integration: Use the following snippet to include this version of the SDK in your project: <script> // init gravito window.gravito = {}; // add config object to gravito window.gravito.config = { cmp: { settings: { // common settings for all CMP components }, styles: { // common styles for all CMP components }, tcf: { // configuration for TCF CMP }, standard: { // configuration for standard CMP }, }, firstParty: { // configuration for first party CMP } }; // load gravito SDK var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdk/v6/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(); }; document.body.appendChild(gravitoSDKTag); </script> Release Notes 3.0.6 (v306) (06/05/2025) New Features: Added Support for Microsoft Universal Event Tracking (UET) Mode You can now enable Microsoft UET tracking by configuring useUET and adsConsentId in your CMP setup. This allows consent-aware integration with Microsoft's advertising platform. Release Notes (V 2.0.12) (08/02/2024) New Features: SDK now emits separate events when the user has clicked \"reject all\" previously. This enhancement provides more granular insights into user interactions, allowing for better tracking and analysis of user behavior. Added support for GCMV2 for TCF Consent Banners. With this update, Gravito now supports GCMV2. Release Notes (V 2.0.11 ) (31/01/2024) New Features: 1. Additional Consent Mode Support with TCF CMP GravitoSDK now seamlessly supports Google's Additional Consent Mode when integrated with TCF CMP. This enhancement ensures that your application is equipped to handle additional consent requirements in compliance with evolving privacy standards set by Google. Bug Fixes: 1. Crash Fix for Empty First-Party Data In version 2.0.11, we've addressed a bug that caused the SDK to crash when encountering empty first-party data. This bug fix ensures the stability of your website, providing a seamless experience for users even when first-party data is absent. Release Notes ( V 2.0.8 ) ( 04/01/2024 ) New Features Google Consent Mode V2 Integration in Light CMP: Gravito SDK now seamlessly integrates Google Consent Mode V2 functionalities within the Light CMP (Consent Management Platform). This update empowers developers to leverage Google's enhanced consent management features, allowing for more refined control over data tracking and advertising purposes. With this integration, developers can align their applications with evolving privacy regulations and user preferences by managing consent behavior based on user preferences regarding data collection and processing for advertising purposes. Support for Custom Cookie Expiry in TCF CMP 'Reject-All' Action: The Gravito SDK introduces support for customizing cookie expiration specifically for the 'Reject-All' action within the TCF CMP (Transparency and Consent Framework Consent Management Platform). Developers can now set distinct cookie expiry duration for cookies generated when users opt to 'Reject All' within the CMP UI. This feature empowers publishers to manage cookie lifespans, facilitating re-prompting of CMP UI after a lower expiry period for users who have initially rejected all consent. This is available to be set in the TCF CMP configurator on Gravito portal","title":"Release Notes"},{"location":"Gravito_SDK/Release_Notes/#release-notes-v2","text":"Gravito SDK Version 2 now uses a modular approach to avoid unnecessary imports of files into your website. You can configure which modules you want to use at the time of initialization process. Currently, it supports four modules: LightCMP, TCFCMP, FirstParty, and UserId modules. The SDK is compatible with LightCMP version 4 and above and TCF CMP version 3 and above. This new version of the SDK allows for more flexibility and control over the data collection and processing on your website. We recommend updating to this latest version to take advantage of the new features and improvements. Note If you have any issues or questions, please reach out to our support team for assistance.","title":"Release Notes ( V2 )"},{"location":"Gravito_SDK/Version_2_%28Latest%29/","text":"Version 2 (Latest) Using SDK V2 To use Gravito's SDK you should have the Gravito config added to your site. Make sure you also have settings section added inside your config. You can get the config from the Gravito Admin Portal \ud83d\udc49Looking for an older version of Gravito SDK? You can find the older versions here Gravito SDK V1 How it works? Configuration SDK Version can be configured using gravitoCMPConfig object. window.gravitoCMPConfig = { settings: { sdkVersion: 2, }, }; Deployment To Include Gravito SDK Version 2 add following JavaScript to your site. Make sure config loading logic is added above this script. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { console.log(\"gravito SDK loaded\"); }; document.body.appendChild(gravitoSDKTag); Sample Scripts Using SDK to deploy First-Party. To include first-party helper functions of SDK V2 add following JavaScript to your site. Make sure config loading logic is added above this script. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"firstParty\"); }; document.body.appendChild(gravitoSDKTag); To check if the first party has been added to your site or not, please use following script and test it with browser console window. It should return your gravito registered first-party URL gravito.firstParty.getDefaultURL(); Once First-party is added to your website you can use the first-party function to interact with gravito backend. Get Your profile. To get your profile you can call following function function customCb(data) { console.log(\"data\", data); } gravito.firstParty.getProfile(customCb); Have your own First Party Id? Using gravito first-party you can use your own ID and give it more persistence using Gravito First Party API function customCb(data) { console.log(\"data\", data); } var gmId = \"your own id\"; gravito.firstParty.postEvents( { \"gmId-overide\": \"gmid changed to \" + gmId, }, customCb, gmId ); Send a Key value pair of events. You can attach key-value pairs to the profile for eg: pageViews : n function customCb(data) { console.log(\"data\", data); } let key = \"pageViews\"; let value = 2; let model = {}; model[key] = value; gravito.firstParty.postEvents(model, customCb); Send a Keys to the Profile. Attach keys to the profile to get a complete picture of the profile. eg: GA ID. function customCb(data) { console.log(\"data\", data); } let keysInput = [ { i: \"56396541p-0jud-7qawe-lk45ue973723\", K: \"GAID\", v: \"56396541p-0jud-7qawe-lk45ue973723\", }, ]; gravito.firstParty.postKeys(keysInput, customCb); Send a Consent to the Profile. Attach consents to the profile to access it any time. function customCb(data) { console.log(\"data\", data); } let consentInputs = [ { i: \"t\", c: \"consent1\", s: false }, { i: \"m\", c: \"consent2\", s: false }, ]; gravito.firstParty.postConsents(consentInputs, customCb); Bridge in Match On id. Connect with matchOnId ( eg: a deterministic Id) to connect X-domain and X-device. function customCb(data) { console.log(\"data\", data); } let matchOnId = \"your_match_onId\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb); Reset Profile. To reset your firstParty profile use following snippet. function customCb(data) { console.log(\"data\", data); } let matchOnId = \"reset\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb); Delete Profile. To delete your firstParty profile use following snippet function customCb(data) { console.log(\"data\", data); } let matchOnId = \"delete\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb); Using SDK to deploy Light CMP. To know how to deploy light CMP with SDK v2 please click here(Link to Deployment section of Light CMP). Using SDK to deploy TCF CMP. To know how to deploy TCF CMP with SDK v2 please click here(Link to Deployment section of TCF CMP ). Using SDK to Include Gravito's prebid js usermodule. To know how to include Gravito's prebid js usermodule with SDK v2 please click here(Link to Deployment section of prebid js usermodule).","title":"Version 2 (Latest)"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#version-2-latest","text":"","title":"Version 2 (Latest)"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#using-sdk-v2","text":"To use Gravito's SDK you should have the Gravito config added to your site. Make sure you also have settings section added inside your config. You can get the config from the Gravito Admin Portal \ud83d\udc49Looking for an older version of Gravito SDK? You can find the older versions here Gravito SDK V1","title":"Using SDK V2"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#how-it-works","text":"","title":"How it works?"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#configuration","text":"SDK Version can be configured using gravitoCMPConfig object. window.gravitoCMPConfig = { settings: { sdkVersion: 2, }, };","title":"Configuration"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#deployment","text":"To Include Gravito SDK Version 2 add following JavaScript to your site. Make sure config loading logic is added above this script. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { console.log(\"gravito SDK loaded\"); }; document.body.appendChild(gravitoSDKTag);","title":"Deployment"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#sample-scripts","text":"Using SDK to deploy First-Party. To include first-party helper functions of SDK V2 add following JavaScript to your site. Make sure config loading logic is added above this script. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"firstParty\"); }; document.body.appendChild(gravitoSDKTag); To check if the first party has been added to your site or not, please use following script and test it with browser console window. It should return your gravito registered first-party URL gravito.firstParty.getDefaultURL(); Once First-party is added to your website you can use the first-party function to interact with gravito backend.","title":"Sample Scripts"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#get-your-profile","text":"To get your profile you can call following function function customCb(data) { console.log(\"data\", data); } gravito.firstParty.getProfile(customCb);","title":"Get Your profile."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#have-your-own-first-party-id","text":"Using gravito first-party you can use your own ID and give it more persistence using Gravito First Party API function customCb(data) { console.log(\"data\", data); } var gmId = \"your own id\"; gravito.firstParty.postEvents( { \"gmId-overide\": \"gmid changed to \" + gmId, }, customCb, gmId );","title":"Have your own First Party Id?"},{"location":"Gravito_SDK/Version_2_%28Latest%29/#send-a-key-value-pair-of-events","text":"You can attach key-value pairs to the profile for eg: pageViews : n function customCb(data) { console.log(\"data\", data); } let key = \"pageViews\"; let value = 2; let model = {}; model[key] = value; gravito.firstParty.postEvents(model, customCb);","title":"Send a Key value pair of events."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#send-a-keys-to-the-profile","text":"Attach keys to the profile to get a complete picture of the profile. eg: GA ID. function customCb(data) { console.log(\"data\", data); } let keysInput = [ { i: \"56396541p-0jud-7qawe-lk45ue973723\", K: \"GAID\", v: \"56396541p-0jud-7qawe-lk45ue973723\", }, ]; gravito.firstParty.postKeys(keysInput, customCb);","title":"Send a Keys to the Profile."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#send-a-consent-to-the-profile","text":"Attach consents to the profile to access it any time. function customCb(data) { console.log(\"data\", data); } let consentInputs = [ { i: \"t\", c: \"consent1\", s: false }, { i: \"m\", c: \"consent2\", s: false }, ]; gravito.firstParty.postConsents(consentInputs, customCb);","title":"Send a Consent to the Profile."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#bridge-in-match-on-id","text":"Connect with matchOnId ( eg: a deterministic Id) to connect X-domain and X-device. function customCb(data) { console.log(\"data\", data); } let matchOnId = \"your_match_onId\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb);","title":"Bridge in Match On id."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#reset-profile","text":"To reset your firstParty profile use following snippet. function customCb(data) { console.log(\"data\", data); } let matchOnId = \"reset\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb);","title":"Reset Profile."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#delete-profile","text":"To delete your firstParty profile use following snippet function customCb(data) { console.log(\"data\", data); } let matchOnId = \"delete\"; gravito.firstParty.attachMatchOnId(matchOnId, customCb);","title":"Delete Profile."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#using-sdk-to-deploy-light-cmp","text":"To know how to deploy light CMP with SDK v2 please click here(Link to Deployment section of Light CMP).","title":"Using SDK to deploy Light CMP."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#using-sdk-to-deploy-tcf-cmp","text":"To know how to deploy TCF CMP with SDK v2 please click here(Link to Deployment section of TCF CMP ).","title":"Using SDK to deploy TCF CMP."},{"location":"Gravito_SDK/Version_2_%28Latest%29/#using-sdk-to-include-gravitos-prebid-js-usermodule","text":"To know how to include Gravito's prebid js usermodule with SDK v2 please click here(Link to Deployment section of prebid js usermodule).","title":"Using SDK to Include Gravito's prebid js usermodule."},{"location":"Gravito_SDK/advanced/Gravito_sdk_v1/","text":"Gravito SDK V1 Using SDK V1 Version 1.0.10 added support for custom functions to call before initializing CMP and call back when backend data is available. This is useful for any type of integration with backend API that can store the consents (and perhaps other profile information). Example deployment, defining custom backend sync interval (60 secs), default is 1800 secs (30 mins): window.gravitoCMPConfig = gravitoCMPConfig; gravitoCMPConfig.core.syncAfter=60; function getCmpData() { //data fetching logic here var date = new Date(\"06/30/2022\") var domain = window.location.hostname var value = null var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.gravito.net/api/firstparty', true); xhr.withCredentials = true; xhr.onreadystatechange = function (response) { if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P response : \" + response.target.response); var result = JSON.parse(response.target.response) if (result.events) { var gdata = result.events.gravitoData ? JSON.parse(result.events.gravitoData) : null value = gdata ? gdata.TCString : null if (value) { document.cookie = \"TcString\" + \"=\" + value + \"; expires=\" + date.toGMTString() + \"; path=/; domain=\" + domain; } if (gdata) { document.cookie = \"gravitoData\" + \"=\" + JSON.stringify(gdata) + \"; expires=\" + date.toGMTString() + \"; path=/; domain=\" + domain; } } var obj = { senderId: \"gravitoCMPSuperWrapper\", status: \"ready\", }; window.postMessage(obj, \"*\"); } } xhr.send(); } function postCmpData(data) { console.log(\"data\", data) var gravitoData = JSON.stringify(data) var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.gravito.net/api/firstparty?gravitoData=' + gravitoData, true); xhr.withCredentials = true; xhr.onreadystatechange = function (response) { if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P response : \" + response.target.response); } } xhr.send(); } var gravitoSdkTag = document.createElement(\"script\"); gravitoSdkTag.src = \"https://cdn.gravito.net/sdk/gravitoSDK_latest.js\"; gravitoSdkTag.onload = function () { window.gravito.ready(function () { gravito.initTCFCMPWithCustomBackend(getCmpData, function () { gravito.initTCFCMP( \"https://cdn.gravito.net/tcf-v2\", \"https://cdn.gravito.net/cmpbuilds\", \"bundle_latest_2\" ); }, postCmpData) }); }; document.body.appendChild(gravitoSdkTag);","title":"Gravito SDK V1"},{"location":"Gravito_SDK/advanced/Gravito_sdk_v1/#gravito-sdk-v1","text":"","title":"Gravito SDK V1"},{"location":"Gravito_SDK/advanced/Gravito_sdk_v1/#using-sdk-v1","text":"Version 1.0.10 added support for custom functions to call before initializing CMP and call back when backend data is available. This is useful for any type of integration with backend API that can store the consents (and perhaps other profile information). Example deployment, defining custom backend sync interval (60 secs), default is 1800 secs (30 mins): window.gravitoCMPConfig = gravitoCMPConfig; gravitoCMPConfig.core.syncAfter=60; function getCmpData() { //data fetching logic here var date = new Date(\"06/30/2022\") var domain = window.location.hostname var value = null var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.gravito.net/api/firstparty', true); xhr.withCredentials = true; xhr.onreadystatechange = function (response) { if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P response : \" + response.target.response); var result = JSON.parse(response.target.response) if (result.events) { var gdata = result.events.gravitoData ? JSON.parse(result.events.gravitoData) : null value = gdata ? gdata.TCString : null if (value) { document.cookie = \"TcString\" + \"=\" + value + \"; expires=\" + date.toGMTString() + \"; path=/; domain=\" + domain; } if (gdata) { document.cookie = \"gravitoData\" + \"=\" + JSON.stringify(gdata) + \"; expires=\" + date.toGMTString() + \"; path=/; domain=\" + domain; } } var obj = { senderId: \"gravitoCMPSuperWrapper\", status: \"ready\", }; window.postMessage(obj, \"*\"); } } xhr.send(); } function postCmpData(data) { console.log(\"data\", data) var gravitoData = JSON.stringify(data) var xhr = new XMLHttpRequest(); xhr.open(\"POST\", 'https://gto.gravito.net/api/firstparty?gravitoData=' + gravitoData, true); xhr.withCredentials = true; xhr.onreadystatechange = function (response) { if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) { console.log(\"1P response : \" + response.target.response); } } xhr.send(); } var gravitoSdkTag = document.createElement(\"script\"); gravitoSdkTag.src = \"https://cdn.gravito.net/sdk/gravitoSDK_latest.js\"; gravitoSdkTag.onload = function () { window.gravito.ready(function () { gravito.initTCFCMPWithCustomBackend(getCmpData, function () { gravito.initTCFCMP( \"https://cdn.gravito.net/tcf-v2\", \"https://cdn.gravito.net/cmpbuilds\", \"bundle_latest_2\" ); }, postCmpData) }); }; document.body.appendChild(gravitoSdkTag);","title":"Using SDK V1"},{"location":"Gravito_TCF_2.2_CMP/Advanced_features/","text":"Advanced features Here are few of the advanced features of Gravito TCF 2.2 CMP Migration How to migrate from other CMP providers to Gravito TCF 2.2 CMP? New Integration How to integrate with events emitted by Gravito TCF 2.2 CMP? Gravito CMP Integration with Google Advertising Products Gravito CMP Integration with Google additional consent mode Gravito CMP Integration with Google consent mode V2 Gravito CMP Integration with Microsoft consent mode Customization Latest Gravito TCF 2.2 CMP Configuraton example (json) Want to customize your TCF 2.2 CMP ? Here is how Resurfacing your CMP Important updates Gravito TCF 2.2 CMP update for keeping TCStrings latest","title":"Advanced features"},{"location":"Gravito_TCF_2.2_CMP/Advanced_features/#advanced-features","text":"Here are few of the advanced features of Gravito TCF 2.2 CMP","title":"Advanced features"},{"location":"Gravito_TCF_2.2_CMP/Advanced_features/#migration","text":"How to migrate from other CMP providers to Gravito TCF 2.2 CMP? New","title":"Migration"},{"location":"Gravito_TCF_2.2_CMP/Advanced_features/#integration","text":"How to integrate with events emitted by Gravito TCF 2.2 CMP? Gravito CMP Integration with Google Advertising Products Gravito CMP Integration with Google additional consent mode Gravito CMP Integration with Google consent mode V2 Gravito CMP Integration with Microsoft consent mode","title":"Integration"},{"location":"Gravito_TCF_2.2_CMP/Advanced_features/#customization","text":"Latest Gravito TCF 2.2 CMP Configuraton example (json) Want to customize your TCF 2.2 CMP ? Here is how Resurfacing your CMP","title":"Customization"},{"location":"Gravito_TCF_2.2_CMP/Advanced_features/#important-updates","text":"Gravito TCF 2.2 CMP update for keeping TCStrings latest","title":"Important updates"},{"location":"Gravito_TCF_2.2_CMP/Getting_Started/","text":"Gravito CMP provides a TCF 2.2 compliant consent management platform. With Gravito you can customize the look and feel of your CMP so that it blends good with your website. Gravito TCF 2.2 CMP is also listed as one of the Google Certified TCF CMP's ( Web and App ) What's new? Looking for Google Consent Mode V2 ? Click here Gravito allows you to customize your TCF banner according to your branding needs: Know more To get started you can design your CMP Banner with your branding recommendations using our intuitive TCF CMP 2.2 Configurator.","title":"Getting Started"},{"location":"Gravito_TCF_2.2_CMP/Getting_Started/#whats-new","text":"Looking for Google Consent Mode V2 ? Click here Gravito allows you to customize your TCF banner according to your branding needs: Know more To get started you can design your CMP Banner with your branding recommendations using our intuitive TCF CMP 2.2 Configurator.","title":"What's new?"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/","text":"TCF CMP implementation on mobile apps can take two different strategies: You have TCF CMP already configured and set up for your website or you are planning to have such AND your application is made with webviews (= content is displayed on webviews and 3rd party vendor scripts and tags are loaded on those as would on ordinary browser) Your app runs natively (without webviews) and TCF CMP needs to be implemented natively AND/OR your application is using SDKs for mar/adtech. There can be hybrids of above so mixing features is still possible. Option 1 : Same TCF CMP setup for website and mobile app(s) Assuming that you have TCF CMP already setup for your website(s). Easiest way to deploy the same for your mobile application is to include it on the app via webview. You can host a blank page containing CMP on your site or CDN. Include CMP scripts and configuration on it and load the URL inside the app. The core requirement is that all content comes from same second level domain, ie. same CMP cookie is accessible on all webviews. Option 2 : Native apps, CMP embedded via webview Native app integration requires a bit different approach per application architecture: React Native (example project : https://github.com/GravitoLtd/react-native-webview-sample ) Android Native ( https://github.com/GravitoLtd/android-webview-sample ) iOS Native ( https://github.com/GravitoLtd/ios-webview-sample ) Flutter ( https://github.com/GravitoLtd/flutter-webview-sample ) Integration To Integrate TCF Complaint CMP into Mobile Apps you can use Gravito's WebView-based CMP. It uses WebView to render and Manage CMP consents, and stores the consents in SharedPreferences so that they can be accessed by vendors. Gravito Supports the Integration of three major platforms Android(Native), IOS(Native), and React-Native. Integration varies from platform to platform. Assumptions The document assumes that the reader\u202f Knows how to use a web-view component with the current native setup. Knows how to read and update data into the shared preferences in android and into the default storage in IOS. Knows how to pass data to and from WebView. Has access to the code base of demo Apps Is aware of TCFv2 terms such as TC string, CMP, etc. React-Native Flow Diagram The following diagram shows the flow of data for the React Native Implementation. React Native initializes the Web-view by passing the URL to our hosted CMP. This is done by passing URL as a prop to the Web-view component. Web-view then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to react-native through the \"ReactNativeWebView\" window object. This message is then received by React Native using the onMessage attribute of React Native's WebView component. React Native then sends the TC string from shared preference to the Web-view using inject javascript function of the WebView component. This function is used to fire on message events which are then listened to by CMP inside Web-view. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs a save action, a modified TC string is sent back to React Native and is then stored in shared preferences. Sending Data From React-Native App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of React-Native. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"CMP-loaded\" post-message event from CMP this can be done in onMessage hook of WebView as done in sample app for react-native. <WebView ref={webView => (this.webView = webView)} source={{ uri: 'https://yourcdnurl/index.html?platform=reactnative', }} style={{marginTop: 0, backgroundColor: 'orange'}} scalesPageToFit={true} onLoadStart={() => this.setState({loading: true})} onLoad={() => { // use this hook to send data to CMP when html is loaded }} onMessage={event => { const { tcstring, type, currentstate, configversion, tcstringversion, } = JSON.parse(event.nativeEvent.data); console.log('type', type); switch (type) { case 'CMP-loaded': // here you know that CMP has been loaded in Webiview and is waiting for Data to be send by webiview case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected break; case 'load': //here you will get load event in which you will have config version and tcversion break; case 'close': //here you can handle modal close event console.log('close event occured'); break; default: break; } }} /> There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"CMP-loaded\". case 'CMP-loaded': // here you know that CMP has been loaded in WebView and is waiting for Data to be send from WebView let dataToSend = { type: 'cookieData', tcstring: tcstring, // recived from save event when user opted previously should be empty when user come for first time, nontcfdata: nontcfdata, // recived from save event when user opted previously should be empty when user come for first time }; const clientResponseCode = ` window.postMessage(${JSON.stringify( dataToSend, )}, \"*\"); true; `; if (this.webView) { this.webView.injectJavaScript(clientResponseCode); } break; Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside onMessage handler of WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"CMP-loaded\" event. case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected // event Data will have following json object structure // data = { // type: 'save', // tcstring: 'string', // currentstate: 'Object', // nontcfdata: 'Object', // configversion: 'number', // tcstringversion: 'number', // inAppTCData: 'Object', // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the onMessage handler of WebView. case 'close': //here you can handle modal close event console.log('close event occured'); break; Native IOS Flow Diagram The following diagram shows the flow of data for the IOS Implementation. IOS initializes the WKWebView by passing the URL to our hosted CMP. This is done by using the \"loadTheUrl\" function of the \"ViewController\" class. WKWebView then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to IOS through \"webkit.messageHandlers.jsHandler\" window object. This message is then handled by the \"userContentController\" function of ViewController class. IOS then sends the TC string from UserDefaults to the WKWebView using the \"evaluateJavaScript\" function of WebView. This function is used to fire on message events which are then listened by CMP inside WebView. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs save action, a modified TC string is sent back to IOS and is then stored to UserDefaults Sending Data From IOS App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of React-Native. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"start\" post-message event from CMP this can be done in WebView as done in sample app for IOS class ViewController: UIViewController ,UIWebViewDelegate,WKScriptMessageHandler,UITextFieldDelegate{ @IBOutlet weak var TOKEN: UITextField! @IBOutlet weak var webview: WKWebView! @IBOutlet weak var showToken: WKWebView! override func viewDidLoad() { super.viewDidLoad() self.webview.uiDelegate = self as? WKUIDelegate TOKEN.delegate = self as UITextFieldDelegate self.loadTheUrl() } //----- FUNCTION TO LOAD HTML func loadTheUrl(){ webview.configuration.userContentController.add(self, name: \"jsHandler\") webview.load(NSURLRequest(url: NSURL(string: \"https://yourcdnurl/index.html?platform=ios\")! as URL) as URLRequest) } func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) { if message.name == \"jsHandler\" { print(message.body) let json = message.body as? NSDictionary let event = json?[\"event\"] as? String print(event) switch event { case \"start\": // here you know that CMP has been loaded in Webiview and is waiting for Data to be send by webiview case \"close\": // here you can do clean up action on close event case \"save\": // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected default: break } } } } There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"start\". case \"start\": //here we are sending data to CMP through post message,data to be send must have following structure { tcstring: tcstring, // recived from save event when user opted previously should be empty when user come for first time, nontcfdata: nontcfdata, // recived from save event when user opted previously should be empty when user come for first time }; guard let tcstring=UserDefaults.standard.object(forKey:\"tcstring\") else { let tcstring=\"\" let startjs = \"window.postMessage('\\(tcstring)', \\\"*\\\");true;\" webview.evaluateJavaScript(startjs, completionHandler: nil) return } print(tcstring) var error: NSError? let data = try?JSONSerialization.data(withJSONObject: tcstring, options: JSONSerialization.WritingOptions.prettyPrinted) if let data = data { let json = NSString(data: data, encoding: NSUTF8StringEncoding) if let json = json { print(json) let startjs = \"window.postMessage(\\(json), \\\"*\\\");true;\" webview.evaluateJavaScript(startjs, completionHandler: nil) } } Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"start\" event. case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected // event Data will have following json object structure // data = { // type: 'save', // tcstring: 'string', // currentstate: 'Object', // nontcfdata: 'Object', // configversion: 'number', // tcstringversion: 'number', // inAppTCData: 'Object', // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the WebView. case 'close': //here you can handle modal close event console.log('close event occured'); Native Android Flow Diagram The following diagram shows the flow of data for the Android Implementation. Android initializes the WebView by passing the URL to our hosted CMP. This is done by using the \"loadUrl\" function of WebView. Along with this it also exposes the object which has functionalities to get data and send data from android. This object is available as a window.Android object in WebView. Android uses \"addJavascriptInterface\" function of WebView to achieve this. WebView then fetches the required content from the host and loads the HTML page. JavaScript then gets the TC string from the android code using the functions exposed by the Window.Android object. This TC string is then used by CMP to render the current state of consents. When the user performs save action, modified TC string is then sent back and stored in shared preference using function exposed by the Android window object. Sending Data From Android App to CMP In Android communication between Native side and CMP happens through function which are exposed by Android WebView. WebView exposes certain functions which can be called from CMP.So CMP uses this function to send data across. Following code explains how to handle different action that user performs on CMP UI public class WebViewAdapter { Context mContext; WebViewCallback webViewCallback = null; /** Instantiate the interface and set the context */ WebViewAdapter(Context c,WebViewCallback webViewCallback) { mContext = c; this.webViewCallback = webViewCallback; } @JavascriptInterface public void getValueFromWebView(String value) { // This function will called by CMP code to send data accross to Android APP // It Will pass different JSON object Strings for difference cases // FOR SAVE // so when user performs any save action on CMP UI such as Accept All, Reject All, or Accept Selected, // CMP will call this function with json string of below object // { // type: \"save\", // tcstring: 'string', // currentstate: 'object', // nontcfdata: 'object', // configversion: 'string, // tcstringversion: 'string, // inAppTCData: 'object',, // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details FOR CLOSE // When user click close button on second layer JSON object string of following object will pass to this function // { // type: \"close\", // data: \"cmp ui closed\", // } } @JavascriptInterface public String getValueFromStorage(){ // This function will be called when CMP want to received data from WebView, This function should return the stringified JSON of following type // { // tcstring:\"string\" // previoulsy stored string received in getValueFromWebView // nontcfdata:\"object\" //previoulsy stored value received in getValueFromWebView // } } } Flutter Flow Diagram The following diagram shows the flow of data for the Flutter Implementation. Flutter initializes the Web-view by passing the URL to our hosted CMP. This is done by creating WebView Controller and assigning it to the WebView Widget. Web-view then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to WebView through the \"FlutterAppWebView\" window object. (Note please keep the JavaScript Channel name as \"FlutterAppWebView\") This message is then received by WebView's JavaScript channel using the onMessageReceived parameter. Flutter then sends the TC string from shared preference to the Web-view using runJavaScriptfunction of the WebView controller. This function is used to fire on message events which are then listened to by CMP inside Web-view. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs a save action, a modified TC string is sent back to Flutter and is then stored in shared preferences. Sending Data From Flutter App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of Flutter. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"CMP-loaded\" post-message event from CMP this can be done in onMessageReceived hook of WebView as done in sample app for Flutter. First create a WebView Controller and JavaScript Channel, make sure you name this channel as \"FlutterAppWebView\" only. controller = WebViewController() ..setJavaScriptMode(JavaScriptMode.unrestricted) ..setBackgroundColor(const Color(0x00000000)) ..setNavigationDelegate( NavigationDelegate( onProgress: (int progress) { // Update loading bar. }, onPageStarted: (String url) {}, onPageFinished: (String url) {}, onWebResourceError: (WebResourceError error) { print(\"err\"); }, onNavigationRequest: (NavigationRequest request) { if (request.url.startsWith('https://www.youtube.com/')) { return NavigationDecision.prevent; } return NavigationDecision.navigate; }, ), ) ..addJavaScriptChannel( 'FlutterAppWebView', onMessageReceived:(){}) Add listeners to various events emitted by JavaScript using javaScript channels onMessageRecievd method.and specify the CMP url to load inside the webview. ..addJavaScriptChannel( 'FlutterAppWebView', onMessageReceived: (JavaScriptMessage message) async { var messageData = jsonDecode(message.message); // Obtain shared preferences. final SharedPreferences prefs = await SharedPreferences.getInstance(); String messageType = messageData[\"type\"]; switch (messageType) { }, ) ..loadRequest(Uri.parse( 'https://gravitocdn.blob.core.windows.net/webview/index.2.3.html?platform=flutter')); There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"CMP-loaded\". case \"CMP-loaded\": // this message will be fired when cmp will be loaded now app has to check it has previously stored consent // in native storage if yes then we need to send it to CMP else we need to send empty data final String? resultString = prefs.getString('cookieData'); var storedData = resultString != null ? jsonDecode(resultString) : null; var message = { \"type\": \"cookieData\", \"tcstring\": storedData != null ? storedData[\"tcstring\"] : null, \"nontcfdata\": storedData != null ? storedData[\"nontcfdata\"] : null }; String jsonMessage = jsonEncode(message); controller.runJavaScript(' window.postMessage($jsonMessage)'); break; Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside onRecivedMessage handler of WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"CMP-loaded\" event. case \"save\": // messagedata will have following strucutre // let onSaveMessageFlutter = { // type: \"save\", // tcstring: encodedString, // currentstate: getCoreConfigDetails(), // nontcfdata: nonTCFModel.Model, // configversion: config.core.version, // tcstringversion: tcModel.cmpVersion, // inAppTCData: getInAppTCData(), // }; // this message will be fired when there is save action perfomed on CMP ui inside webView, // data with this message should be stored in native storage // this is only for sample app, In production you will have to store keys in format specified here //https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details var d = { \"tcstring\": messageData[\"tcstring\"], \"nontcfdata\": messageData[\"nontcfdata\"], }; await prefs.setString(\"cookieData\", jsonEncode(d)); break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the onRecivedMessage handler of WebView. case \"close\": setState(() { print(\"close\"); _showWebView = false; }); break;","title":"Mobile apps"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#option-1-same-tcf-cmp-setup-for-website-and-mobile-apps","text":"Assuming that you have TCF CMP already setup for your website(s). Easiest way to deploy the same for your mobile application is to include it on the app via webview. You can host a blank page containing CMP on your site or CDN. Include CMP scripts and configuration on it and load the URL inside the app. The core requirement is that all content comes from same second level domain, ie. same CMP cookie is accessible on all webviews.","title":"Option 1 : Same TCF CMP setup for website and mobile app(s)"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#option-2-native-apps-cmp-embedded-via-webview","text":"Native app integration requires a bit different approach per application architecture: React Native (example project : https://github.com/GravitoLtd/react-native-webview-sample ) Android Native ( https://github.com/GravitoLtd/android-webview-sample ) iOS Native ( https://github.com/GravitoLtd/ios-webview-sample ) Flutter ( https://github.com/GravitoLtd/flutter-webview-sample )","title":"Option 2 : Native apps, CMP embedded via webview"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#integration","text":"To Integrate TCF Complaint CMP into Mobile Apps you can use Gravito's WebView-based CMP. It uses WebView to render and Manage CMP consents, and stores the consents in SharedPreferences so that they can be accessed by vendors. Gravito Supports the Integration of three major platforms Android(Native), IOS(Native), and React-Native. Integration varies from platform to platform.","title":"Integration"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#assumptions","text":"The document assumes that the reader\u202f Knows how to use a web-view component with the current native setup. Knows how to read and update data into the shared preferences in android and into the default storage in IOS. Knows how to pass data to and from WebView. Has access to the code base of demo Apps Is aware of TCFv2 terms such as TC string, CMP, etc.","title":"Assumptions"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#react-native","text":"Flow Diagram The following diagram shows the flow of data for the React Native Implementation. React Native initializes the Web-view by passing the URL to our hosted CMP. This is done by passing URL as a prop to the Web-view component. Web-view then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to react-native through the \"ReactNativeWebView\" window object. This message is then received by React Native using the onMessage attribute of React Native's WebView component. React Native then sends the TC string from shared preference to the Web-view using inject javascript function of the WebView component. This function is used to fire on message events which are then listened to by CMP inside Web-view. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs a save action, a modified TC string is sent back to React Native and is then stored in shared preferences. Sending Data From React-Native App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of React-Native. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"CMP-loaded\" post-message event from CMP this can be done in onMessage hook of WebView as done in sample app for react-native. <WebView ref={webView => (this.webView = webView)} source={{ uri: 'https://yourcdnurl/index.html?platform=reactnative', }} style={{marginTop: 0, backgroundColor: 'orange'}} scalesPageToFit={true} onLoadStart={() => this.setState({loading: true})} onLoad={() => { // use this hook to send data to CMP when html is loaded }} onMessage={event => { const { tcstring, type, currentstate, configversion, tcstringversion, } = JSON.parse(event.nativeEvent.data); console.log('type', type); switch (type) { case 'CMP-loaded': // here you know that CMP has been loaded in Webiview and is waiting for Data to be send by webiview case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected break; case 'load': //here you will get load event in which you will have config version and tcversion break; case 'close': //here you can handle modal close event console.log('close event occured'); break; default: break; } }} /> There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"CMP-loaded\". case 'CMP-loaded': // here you know that CMP has been loaded in WebView and is waiting for Data to be send from WebView let dataToSend = { type: 'cookieData', tcstring: tcstring, // recived from save event when user opted previously should be empty when user come for first time, nontcfdata: nontcfdata, // recived from save event when user opted previously should be empty when user come for first time }; const clientResponseCode = ` window.postMessage(${JSON.stringify( dataToSend, )}, \"*\"); true; `; if (this.webView) { this.webView.injectJavaScript(clientResponseCode); } break; Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside onMessage handler of WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"CMP-loaded\" event. case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected // event Data will have following json object structure // data = { // type: 'save', // tcstring: 'string', // currentstate: 'Object', // nontcfdata: 'Object', // configversion: 'number', // tcstringversion: 'number', // inAppTCData: 'Object', // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the onMessage handler of WebView. case 'close': //here you can handle modal close event console.log('close event occured'); break;","title":"React-Native"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#native-ios","text":"Flow Diagram The following diagram shows the flow of data for the IOS Implementation. IOS initializes the WKWebView by passing the URL to our hosted CMP. This is done by using the \"loadTheUrl\" function of the \"ViewController\" class. WKWebView then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to IOS through \"webkit.messageHandlers.jsHandler\" window object. This message is then handled by the \"userContentController\" function of ViewController class. IOS then sends the TC string from UserDefaults to the WKWebView using the \"evaluateJavaScript\" function of WebView. This function is used to fire on message events which are then listened by CMP inside WebView. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs save action, a modified TC string is sent back to IOS and is then stored to UserDefaults Sending Data From IOS App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of React-Native. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"start\" post-message event from CMP this can be done in WebView as done in sample app for IOS class ViewController: UIViewController ,UIWebViewDelegate,WKScriptMessageHandler,UITextFieldDelegate{ @IBOutlet weak var TOKEN: UITextField! @IBOutlet weak var webview: WKWebView! @IBOutlet weak var showToken: WKWebView! override func viewDidLoad() { super.viewDidLoad() self.webview.uiDelegate = self as? WKUIDelegate TOKEN.delegate = self as UITextFieldDelegate self.loadTheUrl() } //----- FUNCTION TO LOAD HTML func loadTheUrl(){ webview.configuration.userContentController.add(self, name: \"jsHandler\") webview.load(NSURLRequest(url: NSURL(string: \"https://yourcdnurl/index.html?platform=ios\")! as URL) as URLRequest) } func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) { if message.name == \"jsHandler\" { print(message.body) let json = message.body as? NSDictionary let event = json?[\"event\"] as? String print(event) switch event { case \"start\": // here you know that CMP has been loaded in Webiview and is waiting for Data to be send by webiview case \"close\": // here you can do clean up action on close event case \"save\": // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected default: break } } } } There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"start\". case \"start\": //here we are sending data to CMP through post message,data to be send must have following structure { tcstring: tcstring, // recived from save event when user opted previously should be empty when user come for first time, nontcfdata: nontcfdata, // recived from save event when user opted previously should be empty when user come for first time }; guard let tcstring=UserDefaults.standard.object(forKey:\"tcstring\") else { let tcstring=\"\" let startjs = \"window.postMessage('\\(tcstring)', \\\"*\\\");true;\" webview.evaluateJavaScript(startjs, completionHandler: nil) return } print(tcstring) var error: NSError? let data = try?JSONSerialization.data(withJSONObject: tcstring, options: JSONSerialization.WritingOptions.prettyPrinted) if let data = data { let json = NSString(data: data, encoding: NSUTF8StringEncoding) if let json = json { print(json) let startjs = \"window.postMessage(\\(json), \\\"*\\\");true;\" webview.evaluateJavaScript(startjs, completionHandler: nil) } } Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"start\" event. case 'save': // This event will be sent when user saves the consent on CMP UI, for eg Accept All,Reject All, or Accept Selected // event Data will have following json object structure // data = { // type: 'save', // tcstring: 'string', // currentstate: 'Object', // nontcfdata: 'Object', // configversion: 'number', // tcstringversion: 'number', // inAppTCData: 'Object', // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the WebView. case 'close': //here you can handle modal close event console.log('close event occured');","title":"Native IOS"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#native-android","text":"Flow Diagram The following diagram shows the flow of data for the Android Implementation. Android initializes the WebView by passing the URL to our hosted CMP. This is done by using the \"loadUrl\" function of WebView. Along with this it also exposes the object which has functionalities to get data and send data from android. This object is available as a window.Android object in WebView. Android uses \"addJavascriptInterface\" function of WebView to achieve this. WebView then fetches the required content from the host and loads the HTML page. JavaScript then gets the TC string from the android code using the functions exposed by the Window.Android object. This TC string is then used by CMP to render the current state of consents. When the user performs save action, modified TC string is then sent back and stored in shared preference using function exposed by the Android window object. Sending Data From Android App to CMP In Android communication between Native side and CMP happens through function which are exposed by Android WebView. WebView exposes certain functions which can be called from CMP.So CMP uses this function to send data across. Following code explains how to handle different action that user performs on CMP UI public class WebViewAdapter { Context mContext; WebViewCallback webViewCallback = null; /** Instantiate the interface and set the context */ WebViewAdapter(Context c,WebViewCallback webViewCallback) { mContext = c; this.webViewCallback = webViewCallback; } @JavascriptInterface public void getValueFromWebView(String value) { // This function will called by CMP code to send data accross to Android APP // It Will pass different JSON object Strings for difference cases // FOR SAVE // so when user performs any save action on CMP UI such as Accept All, Reject All, or Accept Selected, // CMP will call this function with json string of below object // { // type: \"save\", // tcstring: 'string', // currentstate: 'object', // nontcfdata: 'object', // configversion: 'string, // tcstringversion: 'string, // inAppTCData: 'object',, // }; // this data should be stored in Shared preferences in format describe here https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details FOR CLOSE // When user click close button on second layer JSON object string of following object will pass to this function // { // type: \"close\", // data: \"cmp ui closed\", // } } @JavascriptInterface public String getValueFromStorage(){ // This function will be called when CMP want to received data from WebView, This function should return the stringified JSON of following type // { // tcstring:\"string\" // previoulsy stored string received in getValueFromWebView // nontcfdata:\"object\" //previoulsy stored value received in getValueFromWebView // } } }","title":"Native Android"},{"location":"Gravito_TCF_2.2_CMP/Mobile_apps/#flutter","text":"Flow Diagram The following diagram shows the flow of data for the Flutter Implementation. Flutter initializes the Web-view by passing the URL to our hosted CMP. This is done by creating WebView Controller and assigning it to the WebView Widget. Web-view then fetches the required content from the host and loads the HTML page. On Successful loading of the page, JavaScript sends the onStart message to WebView through the \"FlutterAppWebView\" window object. (Note please keep the JavaScript Channel name as \"FlutterAppWebView\") This message is then received by WebView's JavaScript channel using the onMessageReceived parameter. Flutter then sends the TC string from shared preference to the Web-view using runJavaScriptfunction of the WebView controller. This function is used to fire on message events which are then listened to by CMP inside Web-view. CMP then use this TC string to render the current state of consent and user can change their preferences using the checkbox controls. Whenever a user performs a save action, a modified TC string is sent back to Flutter and is then stored in shared preferences. Sending Data From Flutter App to CMP WebView-based CMP communicates with the native side through WebView and post-message in the case of Flutter. WebView should send the data to CMP when the CMP code is fully loaded inside WebView. This can be insured by listening to the \"CMP-loaded\" post-message event from CMP this can be done in onMessageReceived hook of WebView as done in sample app for Flutter. First create a WebView Controller and JavaScript Channel, make sure you name this channel as \"FlutterAppWebView\" only. controller = WebViewController() ..setJavaScriptMode(JavaScriptMode.unrestricted) ..setBackgroundColor(const Color(0x00000000)) ..setNavigationDelegate( NavigationDelegate( onProgress: (int progress) { // Update loading bar. }, onPageStarted: (String url) {}, onPageFinished: (String url) {}, onWebResourceError: (WebResourceError error) { print(\"err\"); }, onNavigationRequest: (NavigationRequest request) { if (request.url.startsWith('https://www.youtube.com/')) { return NavigationDecision.prevent; } return NavigationDecision.navigate; }, ), ) ..addJavaScriptChannel( 'FlutterAppWebView', onMessageReceived:(){}) Add listeners to various events emitted by JavaScript using javaScript channels onMessageRecievd method.and specify the CMP url to load inside the webview. ..addJavaScriptChannel( 'FlutterAppWebView', onMessageReceived: (JavaScriptMessage message) async { var messageData = jsonDecode(message.message); // Obtain shared preferences. final SharedPreferences prefs = await SharedPreferences.getInstance(); String messageType = messageData[\"type\"]; switch (messageType) { }, ) ..loadRequest(Uri.parse( 'https://gravitocdn.blob.core.windows.net/webview/index.2.3.html?platform=flutter')); There are two possible cases in which App needs to send Data to CMP. When the user opens app for the first time.\\ When the user opens the app for the first time he has not given any consent and needs to show the first-layer consent window where he can accept all consents, reject all, or can go to the second-layer to manage the consents more granularly.\\ In this case, App Should pass an empty string to CMP through a post-message. CMP will then listen to this event as there is no data sent from the app CMP will show the first layer of UI. When the user has previously consented and want to manage/change his consents.\\ When a user comes to manage the consent, the App should Initialize the WebView and send previously stored consent data in response to \"CMP-loaded\". case \"CMP-loaded\": // this message will be fired when cmp will be loaded now app has to check it has previously stored consent // in native storage if yes then we need to send it to CMP else we need to send empty data final String? resultString = prefs.getString('cookieData'); var storedData = resultString != null ? jsonDecode(resultString) : null; var message = { \"type\": \"cookieData\", \"tcstring\": storedData != null ? storedData[\"tcstring\"] : null, \"nontcfdata\": storedData != null ? storedData[\"nontcfdata\"] : null }; String jsonMessage = jsonEncode(message); controller.runJavaScript(' window.postMessage($jsonMessage)'); break; Catching save actions on CMP UI When user performs any save action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside onRecivedMessage handler of WebView. In our Sample Apps we save the received data as is and is provided to CMP in \"CMP-loaded\" event. case \"save\": // messagedata will have following strucutre // let onSaveMessageFlutter = { // type: \"save\", // tcstring: encodedString, // currentstate: getCoreConfigDetails(), // nontcfdata: nonTCFModel.Model, // configversion: config.core.version, // tcstringversion: tcModel.cmpVersion, // inAppTCData: getInAppTCData(), // }; // this message will be fired when there is save action perfomed on CMP ui inside webView, // data with this message should be stored in native storage // this is only for sample app, In production you will have to store keys in format specified here //https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#in-app-details var d = { \"tcstring\": messageData[\"tcstring\"], \"nontcfdata\": messageData[\"nontcfdata\"], }; await prefs.setString(\"cookieData\", jsonEncode(d)); break; Catching close action on CMP UI When a user performs close action on CMP UI, CMP will dispatch a post-message to WebView which can be handled inside the onRecivedMessage handler of WebView. case \"close\": setState(() { print(\"close\"); _showWebView = false; }); break;","title":"Flutter"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/","text":"Release Notes Version 5.0.10 Release date 01/04/2025 CMP Import Assistant Added a feature to allow users to import their previous CMP configurations into the new Gravito TCF CMP. This feature simplifies the migration process for users transitioning from other CMPs to Gravito. Users can paste their previous CMP's TcString and AcString into the configurator, and the system will automatically extract relevant settings such as Publisher Country Code, Purpose One Treatment, Vendors, Special Features, Purposes, Publisher Restrictions, ACM (Additional Consent Mode), and Google Vendors. Click here for more details. Version 5.0.9 Release date 19/02/2025 New Features & Enhancements Configurable Legitimate Interest for Vendors on \u2018Reject All\u2019 Added a feature to allow configuration of vendors who will receive legitimate interest even when users select \u2018Reject All\u2019. This provides more flexibility in aligning with regulatory requirements and business needs. Expanded Publisher Transparency & Control Added publisherPurposesConsents and publisherLegitimateInterests to publisherTC. This is for supporting Prebid Version 9 Accessibility Improvements Various UI and accessibility enhancements to improve user experience and compliance with accessibility standards. Version 5.0.7 Release date 11/02/2025 New Features & Enhancements Granular Consents for Purposes Nested Inside Stacks Implemented granular consent support for purposes nested inside stacks, in compliance with IAB guidelines. This feature enhances transparency and user control, allowing users to grant or deny consent for individual purposes within a stack. Enabled by default, as recommended by IAB, ensuring seamless compliance with the latest industry standards. Impact & Considerations Publishers and vendors do not need additional configuration, as this update is automatically applied. Improves alignment with IAB TCF policies, ensuring a better user experience and regulatory compliance. For further details, please refer to the official documentation or reach out to our support team. Version 5.0.2 Release date 28/11/2024 TCF 2.2 was introduced about a year ago, and the IAB limits the validity of TC Strings to 13 months. This release includes an enhancement to our CMP core module with an additional check to ensure that invalid consents, if any, are promptly handled. (Similar updates on named version 5 as well as older version 4) Key Update in 5.0.2: Automatic detection of expired TC Strings: When a TC String becomes invalid, the CMP will now resurface automatically and prompt users to provide their consent again. This update ensures that all consents remain up-to-date and compliant with TCF 2.2 standards. This change minimizes the risk of invalid consents and enhances the reliability of your consent management process. More details here Version 4.0.12 Release date 28/11/2024 TCF 2.2 was introduced about a year ago, and the IAB limits the validity of TC Strings to 13 months. This release includes an enhancement to our CMP core module with an additional check to ensure that invalid consents, if any, are promptly handled. (Similar updates on named version 5 as well as older version 4) Key Update in 4.0.12: Automatic detection of expired TC Strings: When a TC String becomes invalid, the CMP will now resurface automatically and prompt users to provide their consent again. This update ensures that all consents remain up-to-date and compliant with TCF 2.2 standards. This change minimizes the risk of invalid consents and enhances the reliability of your consent management process. More details here Version 5.0.1 Release Date: 13/08/2024 TCF CMP version 5.0.1, a major update that introduces key enhancements and new features to improve accessibility and functionality. Key Changes and Features: Enhanced Accessibility: This update includes important accessibility improvements across the TCF CMP platform, ensuring a more inclusive and user-friendly experience. Non-TCF Vendors Accordion - Cookie Declarations: A new feature has been added that allows cookie declarations to be shown within the non-TCF vendors accordion. This provides better transparency and control over cookie data associated with non-TCF vendors. Configurator Enhancement: You can now easily add cookie declarations for non-TCF vendors directly through the configurator under each vendor's card. This makes managing and displaying cookie information more straightforward and integrated within your existing setup. Version 4.0.9 Release date 08/02/2024 New Features: Added support for GCMV2: Gravito TCF CMP now includes support for GCMV2. Read more Bug Fixes: Fixed an issue with the IAB CMP validator: A bug has been resolved where the CMP was not being correctly validated before giving consents on a page with IAB validator. Version 4.0.8 Release date 31/01/2024 1. Google's Additional Consent Mode Support Gravito TCF CMP now fully supports Google's Additional Consent Mode. This integration enhances your ability to manage user consents and ensures compliance with the latest privacy standards set by Google. Here is a step by step guide on how to implement 2. Binding Non-TCF Vendors to TCF Purposes and Legitimate Interest In version 4.0.8, Gravito TCF CMP introduces a groundbreaking feature that allows you to bind non-TCF vendors to specific TCF purposes and legitimate interests. Now, you can display purposes and legitimate interests under non-TCF vendors, providing users with the same transparency and information as with TCF vendors. Display Purposes and Legitimate Interest under Non-TCF Vendors:Users can now view TCF purposes and legitimate interests directly under the non-TCF vendors' descriptions. This enhancement ensures transparency and empowers users to make informed decisions about their consents, regardless of the vendor type. Version 4.0.7 Release date 04/01/2024 Multiple Language Support in Single Configuration: Gravito TCF CMP now empowers publishers with enhanced user accessibility through multi-language support within a single configuration. Within the CMP UI, a language selection dropdown is introduced, enabling users to translate the CMP UI into their preferred language. The translations available are controlled by publishers within their configurations, allowing them to provide a seamless experience by catering to diverse language preferences. Custom Cookie Expiry for 'Reject-All' Action: Gravito TCF CMP introduces the ability for publishers to set distinct cookie expirations based on user actions. Specifically, when a user clicks on 'Reject All' within the CMP UI, a cookie with a lower expiry duration is generated. This feature provides publishers with more control, allowing them to determine the lifespan of the cookie generated by the 'Reject All' action. Moreover, it enables publishers to resurface the CMP UI to users after the lower expiry period, facilitating a reconsideration of consent preferences. Version 4.0.5 Release date: 04/12/2023 New features to our admin portal Gravito TCF CMP now, supports saving configuration in draft status. Customers can revisit their TCF draft configurations and can make changes to it till they decide to publish it. Gravito TCF CMP provides standard Tag management based deployment. Under the listing you can now filter the CMP configurations based on the published/draft status ## Version 4.0.0\\ New Major Release : Compatible with Gravito's TCF 2.2 CMP Enhancements: Disclosure Details Toggle: We've upgraded the functionality of the \"Disclosure Details\" button under each vendor. It now serves as a toggle button, allowing you to easily show or hide content as per your preference. Support for Purpose Stacks: Gravito's TCF 2.2 CMP now seamlessly supports purpose stacks. You can now view the number of vendors utilizing specific purposes for both consent and legitimate interest under their respective accordion descriptions. Improvements in 3-Tabs Layout: For users of the 3-tabs layout, we are displaying vendor consent counts and vendor legitimate interest counts in their respective tabs. This provides a clearer organization and presentation of data. Vendor Section Enhancements: We've enriched the vendor section with new details. Data retention information is now prominently displayed in front of each purpose. In cases where data retention is not specified, the standard retention period is shown. If neither is available, this section remains blank. Additionally, a Legitimate Claim URL has been included in the vendor details section for your convenience. Purpose Descriptions: In the first layer below each declared consentable item, we've added descriptive information. This enables you to view item descriptions without navigating to the second layer, facilitating a better understanding of the purposes associated with each vendor and aiding in your decision-making process. Accessibility Improvements: Gravito's TCF 2.2 CMP is now more accessible than ever. It can be operated using the tab key and is compatible with screen readers, ensuring a more inclusive user experience for all. Version 3.0.0 SDK v2 compatibility. Feature to capture CMP events such as Accept-All, and Reject-All, and have a report generated on the Admin portal. Prebid.js user Id support with TCF CMP. Features to configure necessary consents for Non-targeting Ads. (Please contact Gravito to Implement) Feature to have a custom first layer. (Please contact Gravito to Implement) Version 2.0.7 Added option to enable \"Reject all\" button to first layer of the CMP. Enable this by adding third label for first layer actions: firstlayer: { actions: [\"Settings\", \"Accept all\", \"Reject all\"]... } Version 2.0.6 Bug fixes, purposes overlapping with stacks caused the accordions to show data incorrectly. Version 2.0.5 Bug fix release, updates the gravitoCMP.currentState behavior and reflects the stacks acceptance to purposes. Version 2.0.4 Bug fix release, fixed a corner case bug which was showing \"undefined\" for vendors which did not request consent nor legitimate interest use. Version 2.0.3 New configurable feature to enable special icon on 2nd layer to allow consumer to copy TCstring containing current CMP consent setting. This is to help with validation of CMP functions, copied TCstring can be validated and analyzed at http://iabtcf.com/#/decode independently. style.showCopyTcStringButton=true; Version also contains bug fixes to some translations being missing on vendor details listing. Version 2.0.2 Removed usage of global scope cookie in TCF CMP(Now the customer cannot write cookie in global scope). Removed usage of OOB in TCF CMP (now the customer cannot use OOB). Fixed the issue with the vendor list. Previously if the vendor was removed from GVL and is present in the config file then CMP was throwing an error. Now CMP will only render the vendor if is present in config. TCF policy changes to UI. CMP will now render additional flags for vendors such as (Uses Cookies, Uses non-cookie access, Cookie refresh). New translation terms are now added for these fields as fallback to avoid yet another major release and need to re-deploy, translations can be overridden by the customer by configuring the following terms (under commonTerms inside config): cookieMaxAge: \"Cookie max age\", disclouserDetails: \"Details\", disclouserFetchingError: \"Unable to get Json data\", disclouserHeaderIdentifier: \"Identifier\", disclouserHeaderDomain: \"Domain\", disclouserHeaderDomain: \"Domain\", disclouserHeaderType: \"Type\", disclosureHeaderMaxAge: \"Max Age(s)\", disclosureHeaderPurpose: \"Purposes\", cookieRefresh: \"Cookie refresh\", usesCookies: \"Uses cookies\", usesNonCookieAccess: \"Uses non cookie access\", yes: \"Yes\", no: \"No\", seconds: \"seconds\", days: \"days\" Version 2.0.1 Added configuration option to enable/disable scrollbar for 2nd layer of CMP and the width of the scrollbar: style.showScrollBars:true, style.scrollBarWidth:10px Version 2.0.0 New UI elements TCF 2.1 policy enables under vendor view (not all vendors are providing the details) New major release to include TCF 2.1 changes. Since the new version of TCF policy covers few UI changes there is need to add few translation items to CMP deployment code (under commonTerm precisely): cookieMaxAge: \"Cookie max age (seconds)\", disclouserDetails: \"Details\", disclouserFetchingError: \"Unable to get Json data\", disclouserHeaderIdentifier: \"Identifier\", disclouserHeaderDomain: \"Domain\", disclouserHeaderType: \"Type\", disclosureHeaderMaxAge: \"Max Age(s)\", disclosureHeaderPurpose: \"Purposes\", Finnish version of the same: cookieMaxAge: \"Ev\u00e4steen enimm\u00e4isik\u00e4 (sekuntia)\", disclouserDetails: \"Yksityiskohdat\", disclouserFetchingError: \"Virhe toimittajan lis\u00e4tietojen noutamisessa\", disclouserHeaderIdentifier: \"Tunniste\", disclouserHeaderDomain: \"Verkkotunnus\", disclouserHeaderType: \"Tyyppi\", disclosureHeaderMaxAge: \"Korkein ik\u00e4 (s)\", disclosureHeaderPurpose: \"Tarkoitukset\", And Swedish: cookieMaxAge: \"Cookie max \u00e5lder (sekunder)\", disclouserDetails: \"Detaljer\", disclouserFetchingError: \"Json data inte tillg\u00e4nglig\", disclouserHeaderIdentifier: \"Identifierare\", disclouserHeaderDomain: \"Dom\u00e4n\", disclouserHeaderType: \"Typ\", disclosureHeaderMaxAge: \"Max \u00c5lder(s)\", disclosureHeaderPurpose: \"Meningar\" As this is \"breaking change\" the deployment will require user action. If you are loading _latest builds with your deployment, you need to change the configuration as follows: var ui_path= componentUrl + \"/uibundle_latest_2.js\" var cmp_path=componentUrl + \"/bundle_latest_2.js\" Alternatively if you are to stick to particular version you need to adjust the lines: var ui_path= componentUrl + \"/uibundle-2.0.0.js\" var cmp_path=componentUrl + \"/uibundle-2.0.0.js\" We strongly suggest on hooking to _latest pipeline to load always up-to-date core libraries. Breaking changes are branched as separate major releases as all CMP customers are experiencing here. Version 1.0.10 Fix to allow logo to be left blank. Version 1.0.9 Default font was changed, to make use of it the font configuration needs to be changed on configurations or wrapper files to following: fonts: [ { url:\"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", unicodeRange:\"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\" }, { url:\"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", unicodeRange:\"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\" }, ], Version 1.0.8 Another bugfix release, fixed issue with special characters not working on gravitoData cookie with Safari browsers. Additionally superwrapper was refactored to support IE11. Version 1.0.7 Bugfix release, fixed mainly CSS bugs. Version 1.0.6 Enables CMP connectivity with backend systems to store the consent string to CDP or similar. The configuration is made by default to support Gravito CDP but can be customized to support any other backend that has API endpoint(s) exposed for the CMP to GET/POST. Version 1.0.5 Bug fix release, no new configuration options. The release fixes few localization defects. Version 1.0.4 Publishers can remove the custom purposes, if they are not needed. CMP need to be resurfaced in order affect this change for existing deployments with custom purposes. Leave customPurposes as attribute to configuration even there would not be any under it. CMP dialog can be resurfaced using an helper function gravitoCMP.openPreferences() Version 1.0.3 We have enabled few UI options, those can be enabled by adding following configuration items: consentInputType:\"toggle\", useAccordionForPurpose:true, layoutType:\"3-tabs\", disableConfirmationModal:true, googleTcfId:755 Load the version from your config: var ui_path= componentUrl + \"/uibundle-1.0.3.js\"var cmp_path=componentUrl + \"/bundle-1.0.3.js\" Version 1.0.2 Added configuration option for cookie domain, allowing to configure if the CMP cookie is set on the current hostname domain the CMP operates on (e.g. subdomain.domain.xx) or to top level allowing the subdomains to share the CMP preferences (cookie is set to .domain.xx). useTopDomain:false Load the version from your config: var ui_path= componentUrl + \"/uibundle-1.0.2.js\"var cmp_path=componentUrl + \"/bundle-1.0.2.js\" Version 1.0.1 Core libraries updated, publisher country code added to configuration. var ui_path= componentUrl + \"/uibundle-1.0.1.js\" var cmp_path=componentUrl + \"/bundle-1.0.1.js\" New configuration items related to this release: languageCode:\"fi\", purposeOneTreatment:false, publisherCountryCode:\"FI\", See deployment page for more details for using these. Version 1.0.0 IAB TCF 2.0 support, validated as vendor id 302 Fully responsive, mobile optimized UI Presentation, TCF core logic and configuration are separated to allow maximum customization flexibility and deployment strategies Service or global scope Non-TCF vendors consent management capability Event-driven, user activity (consents, rejections etc.) emits events that can trigger ad/martech tags, data to analytics etc. Localization through configuration file Standard, tested deployment with tag management systems like Google Tag Manager, Tealium iQ and Ensighten Webview support for React Native, Android and iOS Latest You can always load the latest version, no need to touch your setup when there are upgrades but you trust 100% on our QA and testing: var ui_path= componentUrl + \"/uibundle_latest.js\" var cmp_path=componentUrl + \"/bundle_latest.js\" Direct links to files: https://cdn.gravito.net/cmp/wrapper-fi-latest.js https://cdn.gravito.net/cmp/bundle_latest.js https://cdn.gravito.net/cmp/uibundle_latest.js","title":"Release Notes"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#release-notes","text":"","title":"Release Notes"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-5010","text":"Release date 01/04/2025 CMP Import Assistant Added a feature to allow users to import their previous CMP configurations into the new Gravito TCF CMP. This feature simplifies the migration process for users transitioning from other CMPs to Gravito. Users can paste their previous CMP's TcString and AcString into the configurator, and the system will automatically extract relevant settings such as Publisher Country Code, Purpose One Treatment, Vendors, Special Features, Purposes, Publisher Restrictions, ACM (Additional Consent Mode), and Google Vendors. Click here for more details.","title":"Version 5.0.10"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-509","text":"Release date 19/02/2025 New Features & Enhancements Configurable Legitimate Interest for Vendors on \u2018Reject All\u2019 Added a feature to allow configuration of vendors who will receive legitimate interest even when users select \u2018Reject All\u2019. This provides more flexibility in aligning with regulatory requirements and business needs. Expanded Publisher Transparency & Control Added publisherPurposesConsents and publisherLegitimateInterests to publisherTC. This is for supporting Prebid Version 9 Accessibility Improvements Various UI and accessibility enhancements to improve user experience and compliance with accessibility standards.","title":"Version 5.0.9"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-507","text":"Release date 11/02/2025 New Features & Enhancements Granular Consents for Purposes Nested Inside Stacks Implemented granular consent support for purposes nested inside stacks, in compliance with IAB guidelines. This feature enhances transparency and user control, allowing users to grant or deny consent for individual purposes within a stack. Enabled by default, as recommended by IAB, ensuring seamless compliance with the latest industry standards. Impact & Considerations Publishers and vendors do not need additional configuration, as this update is automatically applied. Improves alignment with IAB TCF policies, ensuring a better user experience and regulatory compliance. For further details, please refer to the official documentation or reach out to our support team.","title":"Version 5.0.7"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-502","text":"Release date 28/11/2024 TCF 2.2 was introduced about a year ago, and the IAB limits the validity of TC Strings to 13 months. This release includes an enhancement to our CMP core module with an additional check to ensure that invalid consents, if any, are promptly handled. (Similar updates on named version 5 as well as older version 4) Key Update in 5.0.2: Automatic detection of expired TC Strings: When a TC String becomes invalid, the CMP will now resurface automatically and prompt users to provide their consent again. This update ensures that all consents remain up-to-date and compliant with TCF 2.2 standards. This change minimizes the risk of invalid consents and enhances the reliability of your consent management process. More details here","title":"Version 5.0.2"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-4012","text":"Release date 28/11/2024 TCF 2.2 was introduced about a year ago, and the IAB limits the validity of TC Strings to 13 months. This release includes an enhancement to our CMP core module with an additional check to ensure that invalid consents, if any, are promptly handled. (Similar updates on named version 5 as well as older version 4) Key Update in 4.0.12: Automatic detection of expired TC Strings: When a TC String becomes invalid, the CMP will now resurface automatically and prompt users to provide their consent again. This update ensures that all consents remain up-to-date and compliant with TCF 2.2 standards. This change minimizes the risk of invalid consents and enhances the reliability of your consent management process. More details here","title":"Version 4.0.12"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-501","text":"Release Date: 13/08/2024 TCF CMP version 5.0.1, a major update that introduces key enhancements and new features to improve accessibility and functionality.","title":"Version 5.0.1"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#key-changes-and-features","text":"","title":"Key Changes and Features:"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#enhanced-accessibility","text":"This update includes important accessibility improvements across the TCF CMP platform, ensuring a more inclusive and user-friendly experience.","title":"Enhanced Accessibility:"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#non-tcf-vendors-accordion-cookie-declarations","text":"A new feature has been added that allows cookie declarations to be shown within the non-TCF vendors accordion. This provides better transparency and control over cookie data associated with non-TCF vendors.","title":"Non-TCF Vendors Accordion - Cookie Declarations:"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#configurator-enhancement","text":"You can now easily add cookie declarations for non-TCF vendors directly through the configurator under each vendor's card. This makes managing and displaying cookie information more straightforward and integrated within your existing setup.","title":"Configurator Enhancement:"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-409","text":"Release date 08/02/2024 New Features: Added support for GCMV2: Gravito TCF CMP now includes support for GCMV2. Read more Bug Fixes: Fixed an issue with the IAB CMP validator: A bug has been resolved where the CMP was not being correctly validated before giving consents on a page with IAB validator.","title":"Version 4.0.9"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-408","text":"Release date 31/01/2024 1. Google's Additional Consent Mode Support Gravito TCF CMP now fully supports Google's Additional Consent Mode. This integration enhances your ability to manage user consents and ensures compliance with the latest privacy standards set by Google. Here is a step by step guide on how to implement 2. Binding Non-TCF Vendors to TCF Purposes and Legitimate Interest In version 4.0.8, Gravito TCF CMP introduces a groundbreaking feature that allows you to bind non-TCF vendors to specific TCF purposes and legitimate interests. Now, you can display purposes and legitimate interests under non-TCF vendors, providing users with the same transparency and information as with TCF vendors. Display Purposes and Legitimate Interest under Non-TCF Vendors:Users can now view TCF purposes and legitimate interests directly under the non-TCF vendors' descriptions. This enhancement ensures transparency and empowers users to make informed decisions about their consents, regardless of the vendor type.","title":"Version 4.0.8"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-407","text":"Release date 04/01/2024 Multiple Language Support in Single Configuration: Gravito TCF CMP now empowers publishers with enhanced user accessibility through multi-language support within a single configuration. Within the CMP UI, a language selection dropdown is introduced, enabling users to translate the CMP UI into their preferred language. The translations available are controlled by publishers within their configurations, allowing them to provide a seamless experience by catering to diverse language preferences. Custom Cookie Expiry for 'Reject-All' Action: Gravito TCF CMP introduces the ability for publishers to set distinct cookie expirations based on user actions. Specifically, when a user clicks on 'Reject All' within the CMP UI, a cookie with a lower expiry duration is generated. This feature provides publishers with more control, allowing them to determine the lifespan of the cookie generated by the 'Reject All' action. Moreover, it enables publishers to resurface the CMP UI to users after the lower expiry period, facilitating a reconsideration of consent preferences.","title":"Version 4.0.7"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-405","text":"Release date: 04/12/2023 New features to our admin portal Gravito TCF CMP now, supports saving configuration in draft status. Customers can revisit their TCF draft configurations and can make changes to it till they decide to publish it. Gravito TCF CMP provides standard Tag management based deployment. Under the listing you can now filter the CMP configurations based on the published/draft status ## Version 4.0.0\\ New Major Release : Compatible with Gravito's TCF 2.2 CMP Enhancements: Disclosure Details Toggle: We've upgraded the functionality of the \"Disclosure Details\" button under each vendor. It now serves as a toggle button, allowing you to easily show or hide content as per your preference. Support for Purpose Stacks: Gravito's TCF 2.2 CMP now seamlessly supports purpose stacks. You can now view the number of vendors utilizing specific purposes for both consent and legitimate interest under their respective accordion descriptions. Improvements in 3-Tabs Layout: For users of the 3-tabs layout, we are displaying vendor consent counts and vendor legitimate interest counts in their respective tabs. This provides a clearer organization and presentation of data. Vendor Section Enhancements: We've enriched the vendor section with new details. Data retention information is now prominently displayed in front of each purpose. In cases where data retention is not specified, the standard retention period is shown. If neither is available, this section remains blank. Additionally, a Legitimate Claim URL has been included in the vendor details section for your convenience. Purpose Descriptions: In the first layer below each declared consentable item, we've added descriptive information. This enables you to view item descriptions without navigating to the second layer, facilitating a better understanding of the purposes associated with each vendor and aiding in your decision-making process. Accessibility Improvements: Gravito's TCF 2.2 CMP is now more accessible than ever. It can be operated using the tab key and is compatible with screen readers, ensuring a more inclusive user experience for all.","title":"Version 4.0.5"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-300","text":"SDK v2 compatibility. Feature to capture CMP events such as Accept-All, and Reject-All, and have a report generated on the Admin portal. Prebid.js user Id support with TCF CMP. Features to configure necessary consents for Non-targeting Ads. (Please contact Gravito to Implement) Feature to have a custom first layer. (Please contact Gravito to Implement)","title":"Version 3.0.0"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-207","text":"Added option to enable \"Reject all\" button to first layer of the CMP. Enable this by adding third label for first layer actions: firstlayer: { actions: [\"Settings\", \"Accept all\", \"Reject all\"]... }","title":"Version 2.0.7"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-206","text":"Bug fixes, purposes overlapping with stacks caused the accordions to show data incorrectly.","title":"Version 2.0.6"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-205","text":"Bug fix release, updates the gravitoCMP.currentState behavior and reflects the stacks acceptance to purposes.","title":"Version 2.0.5"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-204","text":"Bug fix release, fixed a corner case bug which was showing \"undefined\" for vendors which did not request consent nor legitimate interest use.","title":"Version 2.0.4"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-203","text":"New configurable feature to enable special icon on 2nd layer to allow consumer to copy TCstring containing current CMP consent setting. This is to help with validation of CMP functions, copied TCstring can be validated and analyzed at http://iabtcf.com/#/decode independently. style.showCopyTcStringButton=true; Version also contains bug fixes to some translations being missing on vendor details listing.","title":"Version 2.0.3"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-202","text":"Removed usage of global scope cookie in TCF CMP(Now the customer cannot write cookie in global scope). Removed usage of OOB in TCF CMP (now the customer cannot use OOB). Fixed the issue with the vendor list. Previously if the vendor was removed from GVL and is present in the config file then CMP was throwing an error. Now CMP will only render the vendor if is present in config. TCF policy changes to UI. CMP will now render additional flags for vendors such as (Uses Cookies, Uses non-cookie access, Cookie refresh). New translation terms are now added for these fields as fallback to avoid yet another major release and need to re-deploy, translations can be overridden by the customer by configuring the following terms (under commonTerms inside config): cookieMaxAge: \"Cookie max age\", disclouserDetails: \"Details\", disclouserFetchingError: \"Unable to get Json data\", disclouserHeaderIdentifier: \"Identifier\", disclouserHeaderDomain: \"Domain\", disclouserHeaderDomain: \"Domain\", disclouserHeaderType: \"Type\", disclosureHeaderMaxAge: \"Max Age(s)\", disclosureHeaderPurpose: \"Purposes\", cookieRefresh: \"Cookie refresh\", usesCookies: \"Uses cookies\", usesNonCookieAccess: \"Uses non cookie access\", yes: \"Yes\", no: \"No\", seconds: \"seconds\", days: \"days\"","title":"Version 2.0.2"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-201","text":"Added configuration option to enable/disable scrollbar for 2nd layer of CMP and the width of the scrollbar: style.showScrollBars:true, style.scrollBarWidth:10px","title":"Version 2.0.1"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-200","text":"New UI elements TCF 2.1 policy enables under vendor view (not all vendors are providing the details) New major release to include TCF 2.1 changes. Since the new version of TCF policy covers few UI changes there is need to add few translation items to CMP deployment code (under commonTerm precisely): cookieMaxAge: \"Cookie max age (seconds)\", disclouserDetails: \"Details\", disclouserFetchingError: \"Unable to get Json data\", disclouserHeaderIdentifier: \"Identifier\", disclouserHeaderDomain: \"Domain\", disclouserHeaderType: \"Type\", disclosureHeaderMaxAge: \"Max Age(s)\", disclosureHeaderPurpose: \"Purposes\", Finnish version of the same: cookieMaxAge: \"Ev\u00e4steen enimm\u00e4isik\u00e4 (sekuntia)\", disclouserDetails: \"Yksityiskohdat\", disclouserFetchingError: \"Virhe toimittajan lis\u00e4tietojen noutamisessa\", disclouserHeaderIdentifier: \"Tunniste\", disclouserHeaderDomain: \"Verkkotunnus\", disclouserHeaderType: \"Tyyppi\", disclosureHeaderMaxAge: \"Korkein ik\u00e4 (s)\", disclosureHeaderPurpose: \"Tarkoitukset\", And Swedish: cookieMaxAge: \"Cookie max \u00e5lder (sekunder)\", disclouserDetails: \"Detaljer\", disclouserFetchingError: \"Json data inte tillg\u00e4nglig\", disclouserHeaderIdentifier: \"Identifierare\", disclouserHeaderDomain: \"Dom\u00e4n\", disclouserHeaderType: \"Typ\", disclosureHeaderMaxAge: \"Max \u00c5lder(s)\", disclosureHeaderPurpose: \"Meningar\" As this is \"breaking change\" the deployment will require user action. If you are loading _latest builds with your deployment, you need to change the configuration as follows: var ui_path= componentUrl + \"/uibundle_latest_2.js\" var cmp_path=componentUrl + \"/bundle_latest_2.js\" Alternatively if you are to stick to particular version you need to adjust the lines: var ui_path= componentUrl + \"/uibundle-2.0.0.js\" var cmp_path=componentUrl + \"/uibundle-2.0.0.js\" We strongly suggest on hooking to _latest pipeline to load always up-to-date core libraries. Breaking changes are branched as separate major releases as all CMP customers are experiencing here.","title":"Version 2.0.0"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-1010","text":"Fix to allow logo to be left blank.","title":"Version 1.0.10"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-109","text":"Default font was changed, to make use of it the font configuration needs to be changed on configurations or wrapper files to following: fonts: [ { url:\"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", unicodeRange:\"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\" }, { url:\"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", unicodeRange:\"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\" }, ],","title":"Version 1.0.9"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-108","text":"Another bugfix release, fixed issue with special characters not working on gravitoData cookie with Safari browsers. Additionally superwrapper was refactored to support IE11.","title":"Version 1.0.8"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-107","text":"Bugfix release, fixed mainly CSS bugs.","title":"Version 1.0.7"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-106","text":"Enables CMP connectivity with backend systems to store the consent string to CDP or similar. The configuration is made by default to support Gravito CDP but can be customized to support any other backend that has API endpoint(s) exposed for the CMP to GET/POST.","title":"Version 1.0.6"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-105","text":"Bug fix release, no new configuration options. The release fixes few localization defects.","title":"Version 1.0.5"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-104","text":"Publishers can remove the custom purposes, if they are not needed. CMP need to be resurfaced in order affect this change for existing deployments with custom purposes. Leave customPurposes as attribute to configuration even there would not be any under it. CMP dialog can be resurfaced using an helper function gravitoCMP.openPreferences()","title":"Version 1.0.4"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-103","text":"We have enabled few UI options, those can be enabled by adding following configuration items: consentInputType:\"toggle\", useAccordionForPurpose:true, layoutType:\"3-tabs\", disableConfirmationModal:true, googleTcfId:755 Load the version from your config: var ui_path= componentUrl + \"/uibundle-1.0.3.js\"var cmp_path=componentUrl + \"/bundle-1.0.3.js\"","title":"Version 1.0.3"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-102","text":"Added configuration option for cookie domain, allowing to configure if the CMP cookie is set on the current hostname domain the CMP operates on (e.g. subdomain.domain.xx) or to top level allowing the subdomains to share the CMP preferences (cookie is set to .domain.xx). useTopDomain:false Load the version from your config: var ui_path= componentUrl + \"/uibundle-1.0.2.js\"var cmp_path=componentUrl + \"/bundle-1.0.2.js\"","title":"Version 1.0.2"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-101","text":"Core libraries updated, publisher country code added to configuration. var ui_path= componentUrl + \"/uibundle-1.0.1.js\" var cmp_path=componentUrl + \"/bundle-1.0.1.js\" New configuration items related to this release: languageCode:\"fi\", purposeOneTreatment:false, publisherCountryCode:\"FI\", See deployment page for more details for using these.","title":"Version 1.0.1"},{"location":"Gravito_TCF_2.2_CMP/Release_Notes/#version-100","text":"IAB TCF 2.0 support, validated as vendor id 302 Fully responsive, mobile optimized UI Presentation, TCF core logic and configuration are separated to allow maximum customization flexibility and deployment strategies Service or global scope Non-TCF vendors consent management capability Event-driven, user activity (consents, rejections etc.) emits events that can trigger ad/martech tags, data to analytics etc. Localization through configuration file Standard, tested deployment with tag management systems like Google Tag Manager, Tealium iQ and Ensighten Webview support for React Native, Android and iOS Latest You can always load the latest version, no need to touch your setup when there are upgrades but you trust 100% on our QA and testing: var ui_path= componentUrl + \"/uibundle_latest.js\" var cmp_path=componentUrl + \"/bundle_latest.js\" Direct links to files: https://cdn.gravito.net/cmp/wrapper-fi-latest.js https://cdn.gravito.net/cmp/bundle_latest.js https://cdn.gravito.net/cmp/uibundle_latest.js","title":"Version 1.0.0"},{"location":"Gravito_TCF_2.2_CMP/Setup_and_Design/","text":"Gravito TCF 2.2 CMP Setup can be done using TCF CMP Configurator on Gravito\u2019s Admin Portal. Go to CMP>>TCF configurator.","title":"Setup and Design"},{"location":"Gravito_TCF_2.2_CMP/advanced/Microsoft_consent_mode/","text":"Microsoft Consent Mode Enabling Microsoft Consent Mode in Gravito TCF CMP Gravito CMP supports two ways to enable Universal Consent Mode: 1. Using Configurator Login to the Gravito Admin Portal. Click on the CMP tab. Select the TCF 2.2 CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Fill in the basic information , then click Next at the bottom-left corner. On the TCF Settings page: Tick the checkbox labeled \"Microsoft's Universal Event Tracking (UET)\" . This will open a section for Microsoft UET Setup . Consent Mapping: You\u2019ll now see dropdowns to map category for : ad_storage Note: The ad_storage signal mapping is predefined according to Microsoft's requirements and is common across both GCMv2 & UET. You may continue filling out the other CMP configuration steps, or jump directly to the \"Deploy\" tab. 2. Without Configurator Enable UET Mode : Add the useUET flag under the settings section of your configuration and set its value to true . \"settings\": { \"useUET\": true // ... other settings } Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the core section of your config manually. Define adsConsentId The adsConsentId should be an array of TCF Purpose IDs that will be mapped to advertising consent. Example: \"core\": { \"adsConsentId\": [1] } This example maps the consent value of Purpose 1 (typically used for storing and accessing information) to UET consent. How Gravito CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"Microsoft Consent Mode"},{"location":"Gravito_TCF_2.2_CMP/advanced/Microsoft_consent_mode/#microsoft-consent-mode","text":"","title":"Microsoft Consent Mode"},{"location":"Gravito_TCF_2.2_CMP/advanced/Microsoft_consent_mode/#enabling-microsoft-consent-mode-in-gravito-tcf-cmp","text":"Gravito CMP supports two ways to enable Universal Consent Mode:","title":"Enabling Microsoft Consent Mode in Gravito TCF CMP"},{"location":"Gravito_TCF_2.2_CMP/advanced/Microsoft_consent_mode/#1-using-configurator","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the TCF 2.2 CMP Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Fill in the basic information , then click Next at the bottom-left corner. On the TCF Settings page: Tick the checkbox labeled \"Microsoft's Universal Event Tracking (UET)\" . This will open a section for Microsoft UET Setup .","title":"1. Using Configurator"},{"location":"Gravito_TCF_2.2_CMP/advanced/Microsoft_consent_mode/#consent-mapping","text":"You\u2019ll now see dropdowns to map category for : ad_storage Note: The ad_storage signal mapping is predefined according to Microsoft's requirements and is common across both GCMv2 & UET. You may continue filling out the other CMP configuration steps, or jump directly to the \"Deploy\" tab.","title":"Consent Mapping:"},{"location":"Gravito_TCF_2.2_CMP/advanced/Microsoft_consent_mode/#2-without-configurator","text":"Enable UET Mode : Add the useUET flag under the settings section of your configuration and set its value to true . \"settings\": { \"useUET\": true // ... other settings } Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the core section of your config manually. Define adsConsentId The adsConsentId should be an array of TCF Purpose IDs that will be mapped to advertising consent. Example: \"core\": { \"adsConsentId\": [1] } This example maps the consent value of Purpose 1 (typically used for storing and accessing information) to UET consent. How Gravito CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"2. Without Configurator"},{"location":"Gravito_TCF_2.2_CMP/advanced/Migration_To_TCF/","text":"TCF CMP Migration Guide Introduction This guide provides a step-by-step explanation of the new feature in our CMP configurator tool that simplifies the migration process from other CMP providers to ours. Users can now import their existing configurations by pasting the TcString and/or AcString generated from their previous CMP after clicking on the \"Accept All\" action. By doing so, the configurator can extract and pre-fill relevant details such as: Publisher Country Code Purpose One Treatment Vendors Special Features Purposes Publisher Restrictions ACM (Additional Consent Mode) Google Vendors This feature minimizes the manual effort required to set up a new CMP configuration, ensuring a seamless transition. Step-by-Step Guide Step 1: Obtain TcString and AcString from Your Previous CMP Go to your website where the existing CMP is live. Click on the \"Accept All\" button of CMP. Retrieve the generated TcString and/or AcString from the browser's cookies section in the developer tools. Step 2: Paste the Strings in the Configurator Tool Open the Gravito's TCF CMP configurator and navigate to TCF setting section. Find and click on the \"Import Data\" button on top-right corner of the configurator. You will see fields labeled TcString and AcString. Paste the TcString into the corresponding field. (Optional) If available, paste the AcString into its respective field. Step 3: Upload and Extract Configuration Click on the \"Upload\" button. The system will process the provided TcString and AcString. Upon successful extraction, relevant settings will be automatically populated in the configurator. Review the extracted configuration and make necessary adjustments if required. Popular CMP Providers The following table lists some popular CMP providers and details of their TcString & AcString. This information can be useful for users who want to identify the strings set by their previous CMP. CMP Provider TcString Name AcString Name Location OneTrust eupubconsent-v2 `` Cookies Sourcepoint euconsent-v2 `` Cookies Cookie Bot cookiebotTcfConsentString cookiebotGacmConsentString Local Storage","title":"TCF CMP Migration Guide"},{"location":"Gravito_TCF_2.2_CMP/advanced/Migration_To_TCF/#tcf-cmp-migration-guide","text":"","title":"TCF CMP Migration Guide"},{"location":"Gravito_TCF_2.2_CMP/advanced/Migration_To_TCF/#introduction","text":"This guide provides a step-by-step explanation of the new feature in our CMP configurator tool that simplifies the migration process from other CMP providers to ours. Users can now import their existing configurations by pasting the TcString and/or AcString generated from their previous CMP after clicking on the \"Accept All\" action. By doing so, the configurator can extract and pre-fill relevant details such as: Publisher Country Code Purpose One Treatment Vendors Special Features Purposes Publisher Restrictions ACM (Additional Consent Mode) Google Vendors This feature minimizes the manual effort required to set up a new CMP configuration, ensuring a seamless transition.","title":"Introduction"},{"location":"Gravito_TCF_2.2_CMP/advanced/Migration_To_TCF/#step-by-step-guide","text":"","title":"Step-by-Step Guide"},{"location":"Gravito_TCF_2.2_CMP/advanced/Migration_To_TCF/#step-1-obtain-tcstring-and-acstring-from-your-previous-cmp","text":"Go to your website where the existing CMP is live. Click on the \"Accept All\" button of CMP. Retrieve the generated TcString and/or AcString from the browser's cookies section in the developer tools.","title":"Step 1: Obtain TcString and AcString from Your Previous CMP"},{"location":"Gravito_TCF_2.2_CMP/advanced/Migration_To_TCF/#step-2-paste-the-strings-in-the-configurator-tool","text":"Open the Gravito's TCF CMP configurator and navigate to TCF setting section. Find and click on the \"Import Data\" button on top-right corner of the configurator. You will see fields labeled TcString and AcString. Paste the TcString into the corresponding field. (Optional) If available, paste the AcString into its respective field.","title":"Step 2: Paste the Strings in the Configurator Tool"},{"location":"Gravito_TCF_2.2_CMP/advanced/Migration_To_TCF/#step-3-upload-and-extract-configuration","text":"Click on the \"Upload\" button. The system will process the provided TcString and AcString. Upon successful extraction, relevant settings will be automatically populated in the configurator. Review the extracted configuration and make necessary adjustments if required.","title":"Step 3: Upload and Extract Configuration"},{"location":"Gravito_TCF_2.2_CMP/advanced/Migration_To_TCF/#popular-cmp-providers","text":"The following table lists some popular CMP providers and details of their TcString & AcString. This information can be useful for users who want to identify the strings set by their previous CMP. CMP Provider TcString Name AcString Name Location OneTrust eupubconsent-v2 `` Cookies Sourcepoint euconsent-v2 `` Cookies Cookie Bot cookiebotTcfConsentString cookiebotGacmConsentString Local Storage","title":"Popular CMP Providers"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/","text":"CMP resurfacing scenarios and Core module updates Manual Resurfacing Manual resurfacing of Gravito CMP can be done using the method gravitoCMP.openPreferences() . Once the CMP is loaded and the consents given, manually resurfacing of the CMP can be under a \"Cookie Settings\" link or button for eg. Sample Script <script> // Function to be called when the link is clicked function buttonClicked() { window.gravitoCMP.openPreferences(); } function main() { // Create a new anchor element var link = document.createElement('a'); // Set the link text link.innerHTML = 'Cookie Settings'; // Set the link's href attribute to '#' link.href = '#'; // Set the link's onclick event to call the buttonClicked function link.onclick = function(event) { event.preventDefault(); // Prevent the default link behavior buttonClicked(); }; // Apply CSS styles to center the link link.style.display = 'block'; link.style.textAlign = 'center'; link.style.margin = '0 auto'; // Find the div with id 'footer-3' var targetDiv = document.getElementById('footer-wrapper'); if (targetDiv) { // Append the link to the target div targetDiv.appendChild(link); // Apply CSS styles to center the content of the target div targetDiv.style.display = 'flex'; targetDiv.style.justifyContent = 'center'; targetDiv.style.alignItems = 'center'; } else { console.error('Div with id \"footer-3\" not found'); } } main(); </script> Automatic Resurfacing Overview As you are aware, the Transparency and Consent Framework (TCF) 2.2 was introduced about November 2023. The Interactive Advertising Bureau (IAB) limits the validity of Transparency and Consent Strings (TC Strings) to 13 months . Many TC Strings are now nearing their expiration date. While invalid consents are unlikely if the Consent Management Platform (CMP) has resurfaced in the past, it's important to ensure ongoing compliance. Update We have rolling out an update to our CMP core module that includes an extra check for the validity of TC Strings. This fix ensures that any obsolete or invalid consents are identified, and new consents are obtained automatically. As a result, users may be prompted again (resurfacing) to provide their consent. Key Details of the update Rollout Date : 28/11/2024 Who is Affected : Everyone running TCF 2.2 Version Action Required : No action is required from the publisher's end . If the consent strings of users are invalid, the CMP will automatically resurface to obtain re-consent. Example: Impact on Google Ad Manager Outdated or invalid consent strings can lead to issues with advertising platforms like Google Ad Manager . Specifically, if the consent strings are expired or invalid, Google Ad Manager may throw 3.3 errors , indicating consent-related problems that can hinder ad serving. What is a 3.3 Error? A 3.3 error in Google Ad Manager signifies that there's an issue with the consent string provided in the ad request: Missing or Invalid Consent : The ad request lacks a valid TC String, or the string is outdated. Ad Delivery Impact : Ads may not be served properly, leading to decreased fill rates and potential revenue loss. How the Update Addresses This Issue With this CMP update: Automatic Resurfacing : The CMP will prompt users to renew their consent when the TC String becomes obsolete. Error Prevention : Ensuring valid consent strings are in place will prevent 3.3 errors in Google Ad Manager. Next Steps Publishers : No action is required on your part. The CMP will handle the resurfacing process automatically. Users : May experience a prompt to provide consent again, which is a standard procedure to maintain compliance.","title":"CMP resurfacing scenarios and Core module updates"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/#cmp-resurfacing-scenarios-and-core-module-updates","text":"","title":"CMP resurfacing scenarios and Core module updates"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/#manual-resurfacing","text":"Manual resurfacing of Gravito CMP can be done using the method gravitoCMP.openPreferences() . Once the CMP is loaded and the consents given, manually resurfacing of the CMP can be under a \"Cookie Settings\" link or button for eg.","title":"Manual Resurfacing"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/#sample-script","text":"<script> // Function to be called when the link is clicked function buttonClicked() { window.gravitoCMP.openPreferences(); } function main() { // Create a new anchor element var link = document.createElement('a'); // Set the link text link.innerHTML = 'Cookie Settings'; // Set the link's href attribute to '#' link.href = '#'; // Set the link's onclick event to call the buttonClicked function link.onclick = function(event) { event.preventDefault(); // Prevent the default link behavior buttonClicked(); }; // Apply CSS styles to center the link link.style.display = 'block'; link.style.textAlign = 'center'; link.style.margin = '0 auto'; // Find the div with id 'footer-3' var targetDiv = document.getElementById('footer-wrapper'); if (targetDiv) { // Append the link to the target div targetDiv.appendChild(link); // Apply CSS styles to center the content of the target div targetDiv.style.display = 'flex'; targetDiv.style.justifyContent = 'center'; targetDiv.style.alignItems = 'center'; } else { console.error('Div with id \"footer-3\" not found'); } } main(); </script>","title":"Sample Script"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/#automatic-resurfacing","text":"","title":"Automatic Resurfacing"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/#overview","text":"As you are aware, the Transparency and Consent Framework (TCF) 2.2 was introduced about November 2023. The Interactive Advertising Bureau (IAB) limits the validity of Transparency and Consent Strings (TC Strings) to 13 months . Many TC Strings are now nearing their expiration date. While invalid consents are unlikely if the Consent Management Platform (CMP) has resurfaced in the past, it's important to ensure ongoing compliance.","title":"Overview"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/#update","text":"We have rolling out an update to our CMP core module that includes an extra check for the validity of TC Strings. This fix ensures that any obsolete or invalid consents are identified, and new consents are obtained automatically. As a result, users may be prompted again (resurfacing) to provide their consent.","title":"Update"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/#key-details-of-the-update","text":"Rollout Date : 28/11/2024 Who is Affected : Everyone running TCF 2.2 Version Action Required : No action is required from the publisher's end . If the consent strings of users are invalid, the CMP will automatically resurface to obtain re-consent.","title":"Key Details of the update"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/#example-impact-on-google-ad-manager","text":"Outdated or invalid consent strings can lead to issues with advertising platforms like Google Ad Manager . Specifically, if the consent strings are expired or invalid, Google Ad Manager may throw 3.3 errors , indicating consent-related problems that can hinder ad serving.","title":"Example: Impact on Google Ad Manager"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/#what-is-a-33-error","text":"A 3.3 error in Google Ad Manager signifies that there's an issue with the consent string provided in the ad request: Missing or Invalid Consent : The ad request lacks a valid TC String, or the string is outdated. Ad Delivery Impact : Ads may not be served properly, leading to decreased fill rates and potential revenue loss.","title":"What is a 3.3 Error?"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/#how-the-update-addresses-this-issue","text":"With this CMP update: Automatic Resurfacing : The CMP will prompt users to renew their consent when the TC String becomes obsolete. Error Prevention : Ensuring valid consent strings are in place will prevent 3.3 errors in Google Ad Manager.","title":"How the Update Addresses This Issue"},{"location":"Gravito_TCF_2.2_CMP/advanced/Resurfacing/#next-steps","text":"Publishers : No action is required on your part. The CMP will handle the resurfacing process automatically. Users : May experience a prompt to provide consent again, which is a standard procedure to maintain compliance.","title":"Next Steps"},{"location":"Gravito_TCF_2.2_CMP/advanced/customization/","text":"TCF-CMP customizations Introduction This document provides information on how to customize the TCF-CMP UI using the CMP config. The config is a JSON object that contains the configurations for the CMP. The config consist of 5 major section(settings, core, text, language, style) each of which handles different aspects of the CMP. Configurations The following are the configurations that can be done in CMP config to achieve the desired customization. Property Name Purpose Datatype Example core > highlightedTextForPurpose1 to highlight first purpose Boolean text > secondLayer > highlightedTextForPurpose1 Text to be displayed inside highlighted purpose String style > highlightColor color code for highlighting pupose 1 Color HEX style > highlightBgColor color code to be used as background of highlighted purpose Color HEX style > buttonsOnTop to display action buttons above tabs in 2nd layer Boolean style > layoutType to choose between 2 tab layout or 3 tab layout select style > consentInputType to choose between toogle or checkbox input for consents select style > disableConfirmationModal to enable/disable the confirmation modal Boolean style > useAccordionForPurpose to enable/disable the confirmation modal Boolean CSS Customization CSS customization can be done by adding the custom CSS in the style section of the CMP config. The following are the CSS classes that can be used to customize the CMP. Class Name Purpose .gravitoCMP-modal--layer1 to customize the CMP layer-1 container .gravitoCMP-header-logo-div to customize the CMP header logo .gravitoCMP-content--layer1 to customize the CMP layer-1 content & order .gravitoCMP-footer to customize the CMP layer-1 footer .gravitoCMP-layer-heading to customize the CMP layer heading .gravitoCMP-paragraph to customize the discritpion text .gravitoCMP-privacy to customize the privacy policy link .gravitoCMP-button to customize the CMP buttons \u00d7","title":"TCF-CMP customizations"},{"location":"Gravito_TCF_2.2_CMP/advanced/customization/#tcf-cmp-customizations","text":"","title":"TCF-CMP customizations"},{"location":"Gravito_TCF_2.2_CMP/advanced/customization/#introduction","text":"This document provides information on how to customize the TCF-CMP UI using the CMP config. The config is a JSON object that contains the configurations for the CMP. The config consist of 5 major section(settings, core, text, language, style) each of which handles different aspects of the CMP.","title":"Introduction"},{"location":"Gravito_TCF_2.2_CMP/advanced/customization/#configurations","text":"The following are the configurations that can be done in CMP config to achieve the desired customization. Property Name Purpose Datatype Example core > highlightedTextForPurpose1 to highlight first purpose Boolean text > secondLayer > highlightedTextForPurpose1 Text to be displayed inside highlighted purpose String style > highlightColor color code for highlighting pupose 1 Color HEX style > highlightBgColor color code to be used as background of highlighted purpose Color HEX style > buttonsOnTop to display action buttons above tabs in 2nd layer Boolean style > layoutType to choose between 2 tab layout or 3 tab layout select style > consentInputType to choose between toogle or checkbox input for consents select style > disableConfirmationModal to enable/disable the confirmation modal Boolean style > useAccordionForPurpose to enable/disable the confirmation modal Boolean","title":"Configurations"},{"location":"Gravito_TCF_2.2_CMP/advanced/customization/#css-customization","text":"CSS customization can be done by adding the custom CSS in the style section of the CMP config. The following are the CSS classes that can be used to customize the CMP. Class Name Purpose .gravitoCMP-modal--layer1 to customize the CMP layer-1 container .gravitoCMP-header-logo-div to customize the CMP header logo .gravitoCMP-content--layer1 to customize the CMP layer-1 content & order .gravitoCMP-footer to customize the CMP layer-1 footer .gravitoCMP-layer-heading to customize the CMP layer heading .gravitoCMP-paragraph to customize the discritpion text .gravitoCMP-privacy to customize the privacy policy link .gravitoCMP-button to customize the CMP buttons \u00d7","title":"CSS Customization"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleacm/","text":"Google Additional Consent Mode Introduction This documentation provides a step-by-step guide on enabling Additional Consent Mode (ACM) support in Gravito TCF CMP. ACM is a feature that allows your CMP to handle additional consents required by Google. You can find the Google technical specification about ACM here . What is Additional Consent Mode (ACM)? Additional Consent Mode (ACM) is a feature introduced by Google to manage additional user consents for third-party vendors, particularly for scenarios like ad personalization. Enabling ACM Support Login to Admin Portal Open your web browser and navigate to the Gravito TCF CMP Admin Portal. Log in with your credentials. Configure a New CMP Basic Tab In the Admin Portal, select the \"CMP\" option from the navbar. Choose \"TCF 2.2 Configurator\" from the available options. For a new configuration, click on the \"New Configuration\" button. Fill in the required details on the Basic tab and click \"Next\" to move to the Settings tab. Settings Tab On the Settings tab, fill in the required fields as per your configuration requirements. Click on the \"Use ACM Mode\" checkbox to enable ACM support. Click \"Next\" to proceed to the Core tab. Core Tab In the Core tab, find the \"Google Vendors\" multi-select field. Select the Google vendors you want to use. Configure other fields based on your requirements. Click on the \"Preview\" button. Preview CMP In the preview's second layer, navigate to the \"Vendors\" tab. You will see the selected Google vendors listed under vendors. Add ACM Support to Existing Config Follow the steps to reach the configuration list in the Admin Portal. Click on the \"Copy Config\" button for the existing configuration you want to update. Follow the steps outlined above for configuring a new CMP, starting from the Basic tab. This completes the process of enabling Additional Consent Mode (ACM) support in Gravito TCF CMP. If you encounter any issues or have questions, please reach out to our support team.","title":"Google Additional Consent Mode"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleacm/#google-additional-consent-mode","text":"Introduction This documentation provides a step-by-step guide on enabling Additional Consent Mode (ACM) support in Gravito TCF CMP. ACM is a feature that allows your CMP to handle additional consents required by Google. You can find the Google technical specification about ACM here .","title":"Google Additional Consent Mode"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleacm/#what-is-additional-consent-mode-acm","text":"Additional Consent Mode (ACM) is a feature introduced by Google to manage additional user consents for third-party vendors, particularly for scenarios like ad personalization.","title":"What is Additional Consent Mode (ACM)?"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleacm/#enabling-acm-support","text":"Login to Admin Portal Open your web browser and navigate to the Gravito TCF CMP Admin Portal. Log in with your credentials. Configure a New CMP Basic Tab In the Admin Portal, select the \"CMP\" option from the navbar. Choose \"TCF 2.2 Configurator\" from the available options. For a new configuration, click on the \"New Configuration\" button. Fill in the required details on the Basic tab and click \"Next\" to move to the Settings tab. Settings Tab On the Settings tab, fill in the required fields as per your configuration requirements. Click on the \"Use ACM Mode\" checkbox to enable ACM support. Click \"Next\" to proceed to the Core tab. Core Tab In the Core tab, find the \"Google Vendors\" multi-select field. Select the Google vendors you want to use. Configure other fields based on your requirements. Click on the \"Preview\" button. Preview CMP In the preview's second layer, navigate to the \"Vendors\" tab. You will see the selected Google vendors listed under vendors. Add ACM Support to Existing Config Follow the steps to reach the configuration list in the Admin Portal. Click on the \"Copy Config\" button for the existing configuration you want to update. Follow the steps outlined above for configuring a new CMP, starting from the Basic tab. This completes the process of enabling Additional Consent Mode (ACM) support in Gravito TCF CMP. If you encounter any issues or have questions, please reach out to our support team.","title":"Enabling ACM Support"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/","text":"Gravito CMP Integration with Google Advertising Products \u200b Gravito CMP Integration with Google Advertising Products: TCFv2.0 Compliance Guide Introduction This guide details the steps and best practices for integrating Gravito's Consent Management Platform (CMP) with Google Advertising Products, ensuring compliance with the IAB Transparency & Consent Framework version 2.0 (TCFv2.0). Our aim is to facilitate a smooth setup and address common integration challenges to optimize compliance and performance. Ensuring CMP Configuration and Vendor Setup To integrate Gravito's CMP with Google Advertising Products, it is crucial to ensure that the CMP is correctly configured: Vendor Configuration: Include Google (Vendor ID 755) in your list of vendors through the Gravito admin panel. Enable TCF settings for Google and verify that all necessary advertising products (Google Ad Manager, AdSense, AdMob) are correctly listed under Google's vendor configuration. Consent String Verification: The Gravito CMP automatically generates and appends the TCFv2.0 compliant TC string to ad requests. Regularly verify the integrity and accuracy of the TC string using the IaB provided decoding tool to ensure it reflects user consent preferences accurately. Common Integration Issues and Their Resolutions Issue 1: TC String Not Recognized Problem: Google services may reject the TC string due to formatting errors or incomplete data. Solution: Use the IAB's decode tool at https://iabtcf.com/#/decode to validate the TC string. Ensure that the string adheres to the latest specifications set by the IAB. Issue 2: Incomplete or Incorrect Vendor Configuration Problem: Google Advertising Products might not operate correctly if not configured properly in the CMP's vendor list. Solution: Double-check the vendor settings in Gravito's CMP. Make sure that Google and its services are enabled with appropriate consent features activated. Troubleshooting of Google Ad Manager (GAM) Errors When integrating Gravito's CMP with Google Advertising Products, understanding and resolving errors reported by Google Ad Manager is crucial for maintaining both compliance and ad performance. This section expands on how to address common issues using insights adapted from Google's own resources. Common GAM Errors and Troubleshooting Steps Error Code: 1.x (Consent-related Errors) Description: This series of errors typically indicates that consent for one or more ad technology providers, including Google, has not been granted. Troubleshooting: Verify that the CMP is active and correctly integrated on all pages of your website. Check that the TC string is being passed correctly in ad requests and that it accurately reflects the consent status of all users. Use the \"Test Suite\" available in Google Ad Manager to simulate ad requests and identify consent-related discrepancies. Error Code: 2.x (Ad Tag Errors) Description: These errors often occur when there are issues in the ad request itself, such as incorrect tagging or problems with ad unit configurations. Troubleshooting: Ensure that all ad tags are implemented correctly and are calling the correct ad units and parameters. Review ad unit settings in Google Ad Manager to confirm they are configured to handle consented ad requests appropriately. Check for any syntax errors in the ad tags that might be preventing the ad from being served. Error Code: 413 (Payload Too Large) Description: This error happens when the URL of an ad request exceeds the maximum allowed length, often due to an overly long consent string. Troubleshooting: Minimize the number of optional purposes and features included in the consent string. Aim to simplify the data included without sacrificing compliance. Check if the consent string can be compressed or if certain parameters can be omitted without affecting compliance. Review the configuration of your ad tags to ensure they are not redundantly appending extra parameters that inflate the request size. Using Google Ad Manager's Diagnostic Tools To further aid in troubleshooting, Google Ad Manager offers a range of diagnostic tools that can provide deeper insights into issues: Creative Preview Tool: Use this tool to test individual creatives in a live environment to see how they behave when an ad request is made. This can help pinpoint issues specific to certain ad formats or configurations. Delivery Tools: These tools allow you to simulate ad requests in real-time to verify how ads are being served under various conditions, including different user consent states. Event-Level Troubleshooting Reports: These reports give detailed breakdowns of ad behavior at the event level, allowing you to trace the path of a request and see where failures occur. By utilizing these methods and tools, publishers can better diagnose and resolve issues related to Google Ad Manager and ensure that ads are delivered in compliance with user consent preferences set through Gravito's CMP. For additional information and more specific guidance on using Google Ad Manager's features for troubleshooting, refer to the official Google support page . This resource is invaluable for understanding the intricate details of GAM's error messages and troubleshooting processes. Best Practices for Ongoing Compliance and Performance Regular CMP Updates: Keep your CMP implementation up-to-date with the latest TCF standards and Google requirements. Gravito frequently updates its CMP to align with regulatory changes and technical specifications. Enhance User Interface for Better Consent Rates: Optimize the user consent interface to make it as clear and user-friendly as possible, which can help in increasing consent rates and ensuring better compliance. Detailed Logging and Monitoring: Utilize Gravito's comprehensive logging features to keep an audit trail of consent strings and decisions, which is crucial for compliance and troubleshooting. Conclusion By following this guide, publishers can effectively integrate Gravito's CMP with Google Advertising Products under TCFv2.0, ensuring both compliance with privacy regulations and optimal operational performance. For further assistance, our technical support team is available to help you resolve any specific issues or to provide additional guidance on best practices for using Gravito's CMP solutions.","title":"Gravito CMP Integration with Google Advertising Products"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#gravito-cmp-integration-with-google-advertising-products","text":"","title":"Gravito CMP Integration with Google Advertising Products"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#gravito-cmp-integration-with-google-advertising-products-tcfv20-compliance-guide","text":"","title":"\u200b Gravito CMP Integration with Google Advertising Products: TCFv2.0 Compliance Guide"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#introduction","text":"This guide details the steps and best practices for integrating Gravito's Consent Management Platform (CMP) with Google Advertising Products, ensuring compliance with the IAB Transparency & Consent Framework version 2.0 (TCFv2.0). Our aim is to facilitate a smooth setup and address common integration challenges to optimize compliance and performance.","title":"Introduction"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#ensuring-cmp-configuration-and-vendor-setup","text":"To integrate Gravito's CMP with Google Advertising Products, it is crucial to ensure that the CMP is correctly configured:","title":"Ensuring CMP Configuration and Vendor Setup"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#vendor-configuration","text":"Include Google (Vendor ID 755) in your list of vendors through the Gravito admin panel. Enable TCF settings for Google and verify that all necessary advertising products (Google Ad Manager, AdSense, AdMob) are correctly listed under Google's vendor configuration.","title":"Vendor Configuration:"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#consent-string-verification","text":"The Gravito CMP automatically generates and appends the TCFv2.0 compliant TC string to ad requests. Regularly verify the integrity and accuracy of the TC string using the IaB provided decoding tool to ensure it reflects user consent preferences accurately.","title":"Consent String Verification:"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#common-integration-issues-and-their-resolutions","text":"","title":"Common Integration Issues and Their Resolutions"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#issue-1-tc-string-not-recognized","text":"Problem: Google services may reject the TC string due to formatting errors or incomplete data. Solution: Use the IAB's decode tool at https://iabtcf.com/#/decode to validate the TC string. Ensure that the string adheres to the latest specifications set by the IAB.","title":"Issue 1: TC String Not Recognized"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#issue-2-incomplete-or-incorrect-vendor-configuration","text":"Problem: Google Advertising Products might not operate correctly if not configured properly in the CMP's vendor list. Solution: Double-check the vendor settings in Gravito's CMP. Make sure that Google and its services are enabled with appropriate consent features activated.","title":"Issue 2: Incomplete or Incorrect Vendor Configuration"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#troubleshooting-of-google-ad-manager-gam-errors","text":"When integrating Gravito's CMP with Google Advertising Products, understanding and resolving errors reported by Google Ad Manager is crucial for maintaining both compliance and ad performance. This section expands on how to address common issues using insights adapted from Google's own resources.","title":"Troubleshooting of Google Ad Manager (GAM) Errors"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#common-gam-errors-and-troubleshooting-steps","text":"","title":"Common GAM Errors and Troubleshooting Steps"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#error-code-1x-consent-related-errors","text":"Description: This series of errors typically indicates that consent for one or more ad technology providers, including Google, has not been granted.","title":"Error Code: 1.x (Consent-related Errors)"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#troubleshooting","text":"Verify that the CMP is active and correctly integrated on all pages of your website. Check that the TC string is being passed correctly in ad requests and that it accurately reflects the consent status of all users. Use the \"Test Suite\" available in Google Ad Manager to simulate ad requests and identify consent-related discrepancies.","title":"Troubleshooting:"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#error-code-2x-ad-tag-errors","text":"Description: These errors often occur when there are issues in the ad request itself, such as incorrect tagging or problems with ad unit configurations.","title":"Error Code: 2.x (Ad Tag Errors)"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#troubleshooting_1","text":"Ensure that all ad tags are implemented correctly and are calling the correct ad units and parameters. Review ad unit settings in Google Ad Manager to confirm they are configured to handle consented ad requests appropriately. Check for any syntax errors in the ad tags that might be preventing the ad from being served.","title":"Troubleshooting:"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#error-code-413-payload-too-large","text":"Description: This error happens when the URL of an ad request exceeds the maximum allowed length, often due to an overly long consent string. Troubleshooting: Minimize the number of optional purposes and features included in the consent string. Aim to simplify the data included without sacrificing compliance. Check if the consent string can be compressed or if certain parameters can be omitted without affecting compliance. Review the configuration of your ad tags to ensure they are not redundantly appending extra parameters that inflate the request size.","title":"Error Code: 413 (Payload Too Large)"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#using-google-ad-managers-diagnostic-tools","text":"To further aid in troubleshooting, Google Ad Manager offers a range of diagnostic tools that can provide deeper insights into issues: Creative Preview Tool: Use this tool to test individual creatives in a live environment to see how they behave when an ad request is made. This can help pinpoint issues specific to certain ad formats or configurations. Delivery Tools: These tools allow you to simulate ad requests in real-time to verify how ads are being served under various conditions, including different user consent states. Event-Level Troubleshooting Reports: These reports give detailed breakdowns of ad behavior at the event level, allowing you to trace the path of a request and see where failures occur. By utilizing these methods and tools, publishers can better diagnose and resolve issues related to Google Ad Manager and ensure that ads are delivered in compliance with user consent preferences set through Gravito's CMP. For additional information and more specific guidance on using Google Ad Manager's features for troubleshooting, refer to the official Google support page . This resource is invaluable for understanding the intricate details of GAM's error messages and troubleshooting processes.","title":"Using Google Ad Manager's Diagnostic Tools"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#best-practices-for-ongoing-compliance-and-performance","text":"Regular CMP Updates: Keep your CMP implementation up-to-date with the latest TCF standards and Google requirements. Gravito frequently updates its CMP to align with regulatory changes and technical specifications. Enhance User Interface for Better Consent Rates: Optimize the user consent interface to make it as clear and user-friendly as possible, which can help in increasing consent rates and ensuring better compliance. Detailed Logging and Monitoring: Utilize Gravito's comprehensive logging features to keep an audit trail of consent strings and decisions, which is crucial for compliance and troubleshooting.","title":"Best Practices for Ongoing Compliance and Performance"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleadproducts/#conclusion","text":"By following this guide, publishers can effectively integrate Gravito's CMP with Google Advertising Products under TCFv2.0, ensuring both compliance with privacy regulations and optimal operational performance. For further assistance, our technical support team is available to help you resolve any specific issues or to provide additional guidance on best practices for using Gravito's CMP solutions.","title":"Conclusion"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/","text":"Google Consent Mode v2 What is Google Consent Mode v2? Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) : \u2705 Consent Signals: ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Official Google Documentation on Consent Mode v2 Enabling Google Consent Mode v2 in Gravito CMP Creating Config in Admin Portal Login to the Gravito Admin Portal. Click on the CMP tab. Select the TCF 2.2 CMP Configurator from the option. On the CMP Config listing page, click the \"New Configuration\" button to create a new CMP Config. Fill in the basic information , then click Next at the bottom-left corner. On the TCF Settings Tab: Tick the checkbox labeled Use GCM . This will enable the GCMv2 for your CMP config Use GCM Advance Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . Note: when the using GCM Basic Mode, the GTM template deployment option will not be available. Consent Mapping: You\u2019ll now see default mapping for the following Google consent signals: - ad_storage - analytics_storage - ad_user_data - ad_personalization You may continue filling out the other CMP configuration steps, or jump directly to the \"Deploy\" tab. Gravito TCF 2.2 CMP supports two ways to enable Consent Mode v2: 1. With GTM Template In the Deploy tab, you\u2019ll see multiple deployment options. Click on the \"GTM Template\" option. Click \"Publish\" . Note: When you click Publish , the system will validate all required fields. If anything is missing, it will display an error. Once the config is published, you\u2019ll be provided with a button labeled \"Copy GTM Token\" . Clicking this will copy the GTM token to your clipboard. We will use this token in the GTM template. Login to your Google Tag Manager account and click on a new Tag . Tag Configuration: Choose the Gravito Consent Management template from the list. Fill the fields: Field Description Gravito Token Paste the CMP token copied from Gravito portal Gravito CMP type Select Gravito TCF CMP \u2705 Enable Google Consent Mode Enable this to activate GCM support Google Consent Mode Settings Option Description Wait for update Time to wait (in ms) for consent before proceeding (default: 2000 ) Enable URL passthrough Optional: Enable if you need to forward consent state via query params Redact ads data Set to Dynamic (based on ad_storage) for flexible ad personalization Default Consent State (Optional) Configure regional preferences if needed. You can leave it blank to apply globally. Add Trigger and Save Add a Page View or All Pages trigger to fire this tag on every page load. Click Save . Publish the GTM Container Submit and Publish the container. CMP will now load and handle consent dynamically on your site. 2. Without GTM Template Deployment (Without Template): In the Deploy tab, you'll see multiple deployment options. Since we\u2019re not using the GTM template, click on \"Deployment Script\" . Click \"Publish\" . Note: When you click Publish , the system will validate all required fields. If anything is missing, it will display an error. Once the config is published, you\u2019ll be provided with a deployment script , which you can embed directly in your webpage to activate Consent Mode v2. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. below the comment // Insert your GTM script here you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\");","title":"Google Consent Mode v2"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#google-consent-mode-v2","text":"","title":"Google Consent Mode v2"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#what-is-google-consent-mode-v2","text":"Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) :","title":"What is Google Consent Mode v2?"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#consent-signals","text":"ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Official Google Documentation on Consent Mode v2","title":"\u2705 Consent Signals:"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#enabling-google-consent-mode-v2-in-gravito-cmp","text":"","title":"Enabling Google Consent Mode v2 in Gravito CMP"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#creating-config-in-admin-portal","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the TCF 2.2 CMP Configurator from the option. On the CMP Config listing page, click the \"New Configuration\" button to create a new CMP Config. Fill in the basic information , then click Next at the bottom-left corner. On the TCF Settings Tab: Tick the checkbox labeled Use GCM . This will enable the GCMv2 for your CMP config Use GCM Advance Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . Note: when the using GCM Basic Mode, the GTM template deployment option will not be available.","title":"Creating Config in Admin Portal"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#consent-mapping","text":"You\u2019ll now see default mapping for the following Google consent signals: - ad_storage - analytics_storage - ad_user_data - ad_personalization You may continue filling out the other CMP configuration steps, or jump directly to the \"Deploy\" tab. Gravito TCF 2.2 CMP supports two ways to enable Consent Mode v2:","title":"Consent Mapping:"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#1-with-gtm-template","text":"In the Deploy tab, you\u2019ll see multiple deployment options. Click on the \"GTM Template\" option. Click \"Publish\" . Note: When you click Publish , the system will validate all required fields. If anything is missing, it will display an error. Once the config is published, you\u2019ll be provided with a button labeled \"Copy GTM Token\" . Clicking this will copy the GTM token to your clipboard. We will use this token in the GTM template. Login to your Google Tag Manager account and click on a new Tag .","title":"1. With GTM Template"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#tag-configuration","text":"Choose the Gravito Consent Management template from the list.","title":"Tag Configuration:"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#fill-the-fields","text":"Field Description Gravito Token Paste the CMP token copied from Gravito portal Gravito CMP type Select Gravito TCF CMP \u2705 Enable Google Consent Mode Enable this to activate GCM support","title":"Fill the fields:"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#google-consent-mode-settings","text":"Option Description Wait for update Time to wait (in ms) for consent before proceeding (default: 2000 ) Enable URL passthrough Optional: Enable if you need to forward consent state via query params Redact ads data Set to Dynamic (based on ad_storage) for flexible ad personalization","title":"Google Consent Mode Settings"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#default-consent-state-optional","text":"Configure regional preferences if needed. You can leave it blank to apply globally.","title":"Default Consent State (Optional)"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#add-trigger-and-save","text":"Add a Page View or All Pages trigger to fire this tag on every page load. Click Save .","title":"Add Trigger and Save"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#publish-the-gtm-container","text":"Submit and Publish the container. CMP will now load and handle consent dynamically on your site.","title":"Publish the GTM Container"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#2-without-gtm-template","text":"","title":"2. Without GTM Template"},{"location":"Gravito_TCF_2.2_CMP/advanced/googleconsentmode/#deployment-without-template","text":"In the Deploy tab, you'll see multiple deployment options. Since we\u2019re not using the GTM template, click on \"Deployment Script\" . Click \"Publish\" . Note: When you click Publish , the system will validate all required fields. If anything is missing, it will display an error. Once the config is published, you\u2019ll be provided with a deployment script , which you can embed directly in your webpage to activate Consent Mode v2. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. below the comment // Insert your GTM script here you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\");","title":"Deployment (Without Template):"},{"location":"Gravito_TCF_2.2_CMP/advanced/integration/","text":"Integration Gravito TCF CMP emits \u201cgravito:tcfv2:client\u201d events. Events indicate the UI actions and points when the user has given or denied the consents and rest of the tags can either trigger or not. Events can be listened to by the addEventListener method: document.addEventListener('gravito:tcfv2:client', function(event) { var eventType = e.detail.eventType; // you can also get consent state of Gravito TCF CMP var consentState =window.gravitoCMP.currentState ; console.log(eventType); console.log(consentState); // depending upon event types you can perform necessary actions }); Event Types: Sr.No Event Type Trigger 1 cmploaded This event is emitted when the CMP is loaded in browser window. 2 layer1:opt-in:all This event is emitted when user click on accept all button on layer 1. 3 layer1:opt-out:all This event is emitted when user click on reject all. 4 layer1:show-settings This event is emitted when user click on settings button on layer 1. 5 layer2:opt-in:all This event is emitted when user click on accept all button on layer 2. 6 layer2:opt-out:all This event is emitted when user click on reject all button on layer 2. 7 layer2:opt-in:selected This event is emitted when user click on accept selected button on layer 2. 8 consent-not-set This event is emitted when user does not have consent cookies 9 opt-in:previously This event is emitted when user has consent cookies 10 opt-in:previously:outdated This event is emitted when user has consent cookies but are outdated","title":"Integration"},{"location":"Gravito_TCF_2.2_CMP/advanced/integration/#integration","text":"Gravito TCF CMP emits \u201cgravito:tcfv2:client\u201d events. Events indicate the UI actions and points when the user has given or denied the consents and rest of the tags can either trigger or not.","title":"Integration"},{"location":"Gravito_TCF_2.2_CMP/advanced/integration/#events-can-be-listened-to-by-the-addeventlistener-method","text":"document.addEventListener('gravito:tcfv2:client', function(event) { var eventType = e.detail.eventType; // you can also get consent state of Gravito TCF CMP var consentState =window.gravitoCMP.currentState ; console.log(eventType); console.log(consentState); // depending upon event types you can perform necessary actions });","title":"Events can be listened to by the addEventListener method:"},{"location":"Gravito_TCF_2.2_CMP/advanced/integration/#event-types","text":"Sr.No Event Type Trigger 1 cmploaded This event is emitted when the CMP is loaded in browser window. 2 layer1:opt-in:all This event is emitted when user click on accept all button on layer 1. 3 layer1:opt-out:all This event is emitted when user click on reject all. 4 layer1:show-settings This event is emitted when user click on settings button on layer 1. 5 layer2:opt-in:all This event is emitted when user click on accept all button on layer 2. 6 layer2:opt-out:all This event is emitted when user click on reject all button on layer 2. 7 layer2:opt-in:selected This event is emitted when user click on accept selected button on layer 2. 8 consent-not-set This event is emitted when user does not have consent cookies 9 opt-in:previously This event is emitted when user has consent cookies 10 opt-in:previously:outdated This event is emitted when user has consent cookies but are outdated","title":"Event Types:"},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/","text":"Version 3(Internal) (Latest) Note: Version 3 does not correspond to TCF Version 3 but it is Internal Version 3 for gravito CMP, and is TCF version 2 complaint. How it works? Configuration TCF CMP can be configure and customize as per your need with the help of configuration object.You can generate this configuration object using our Admin Portal or you can create your own from scratch. Note : {VendorsCount} is a placeholder which you can insert anywhere in the text. It will display the total number of vendors in your config. Following is the example of config object for TCF CMP. window.gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: true, catchCMPEvents: true, sdkVersion: 2, userIdModule: false, backendUrl: \"\", version: \"bundle_latest_3\", }, core: { cookieName: \"TcString\", cookieExpiry: 2, useTopDomain: false, syncAfter: 1800, settingBtnClassname: \"manageSettings\", version: 2, purposeOneTreatment: true, publisherCountryCode: \"EN\", googleTcfId: 755, purposes: [ { type: \"purposes\", id: 1, }, { type: \"stacks\", id: 26, }, { type: \"purposes\", id: 10, }, ], specialFeatures: [1, 2], specialPurposes: [1, 2], features: [1, 2, 3], vendors: [2, 6, 8, 511, 11, 14, 278, 755], nonTCFVendors: [ { type: \"nonTCFVendors\", id: 2, name: \"Amazon\", description: \"description for amazon\", isConsentable: false, }, ], customPurposes: [ { type: \"customPurpose\", id: 1, name: \"Data Collection\", description: \"Gravito can collect data and can use it for better experience of its customers\", descriptionLegal: \"Gravito can collect data and can use it for better experience of its customers\", isLegitimate: true, }, { type: \"customPurpose\", id: 2, name: \"Targeting\", description: \"Gravito can use data for targeting its customers\", descriptionLegal: \"Gravito can use data for targeting its customers\", isLegitimate: false, }, ], publisherRestrictions: [ { purposeID: 1, restrictionType: \"REQUIRE_CONSENT\", vendors: [6, 12], }, { purposeID: 1, restrictionType: \"REQUIRE_CONSENT\", vendors: [8], }, { purposeID: 2, restrictionType: \"REQUIRE_CONSENT\", vendors: [8], }, ], }, text: { firstLayer: { title: \"We need your consent to provide personalized experience\", introductionText: \"Gravito and its <span id='partners-link'> {VendorsCount} third-party vendors</span> collect personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", consentableItemDescription: \"Gravito and its partners require consent for following:\", legalFooter: 'By accepting, you are allowing data processing within the service, rejection can affect the user experience. Some third-party vendors might use their legitimate interest to operate, you can object that or change other settings at any time by selecting \"Settings\" at the bottom of the page.', privacyPolicyUrl: \"https://www.gravito.net/#privacy-policy\", privacyLabel: \"Privacy Policy\", actions: [\"Settings\", \"Accept All\"], }, secondLayer: { title: \"Gravito Setting title changed\", introductionText: \"Please select from the following list of purposes to help us serve you better.\", tabLabels: [\"Purposes and Characteristics\", \"Vendors\"], copyTCstringTooltip: \"Click here to copy TC string to clipboard\", checkBoxLabels: { consent: \"Consent\", legitimateInterest: \"Legitimate interest\", }, actions: [\"Accept All\", \"Accept Selected\", \"Reject All\"], }, thirdLayer: { confirmationForUncheck: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\", ], }, confirmationForAcceptSelected: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\", ], }, actions: [\"Cancel\", \"Yes\"], }, cookieReportLayer: { buttonTitle: \"Cookie Report\", heading: \"Cookie Reports layer header\", introductionText: \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", beforeAcceptHeader: \"Before Accepting\", afterAcceptHeader: \"After Accepting\", nameHeader: \"Name\", domainHeader: \"Domain\", descriptionHeader: \"Description\", cookieTypeHeader: \"Cookie Type\", expiryHeader: \"Expiry in days\", httpOnlyHeader: \"Http Only\", noCookieDataMessage: \"No scan results available\", noCookieDataBeforeAcceptingMsg: \"No cookies were found before Accepting the consents on this domain.\", noCookieDataAfterAcceptingMsg: \"No cookies were found after Accepting the consents on this domain \", }, commonTerms: { purposes: \"Purposes\", consent: \"Consent\", legitimateInterest: \"Legitimate interest\", specialPurposes: \"Special Purposes\", specialFeatures: \"Special Features\", features: \"Features\", policyURl: \"Policy Url\", nonTCFVendors: \"Non TCF Vendors\", vendors: \"Vendor\", customPurposes: \"Custom Purposes\", cookieMaxAge: \"Cookie max age (seconds)\", disclouserDetails: \"Details\", disclouserFetchingError: \"Unable to get Json data\", disclouserHeaderIdentifier: \"Identifier\", disclouserHeaderDomain: \"Domain\", disclouserHeaderType: \"Type\", disclosureHeaderMaxAge: \"Max Age(s)\", disclosureHeaderPurpose: \"Purposes\", cookieRefresh: \"Cookie refresh\", usesCookies: \"Uses cookies\", usesNonCookieAccess: \"Uses non cookie access\", yes: \"Yes\", no: \"No\", seconds: \"seconds\", days: \"days\", alertMessageForCopiedTcString: \"CMP Settings Copied\", }, }, style: { logoUrl: \"https://cdn.gravito.net/logos/gravito_logo_white_background.png\", primaryColor: \"orange\", secondaryColor: \"#666\", fonts: [ { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], customCSS: \"\", consentInputType: \"checkbox\", useAccordionForPurpose: true, layoutType: \"2-tabs\", disableConfirmationModal: true, showCopyTcStringButton: true, }, }; Deployment TCF CMP's can be deployed with the help of SDK V2. Add your config object to window.gravitoCMPConifg variable. window.gravitoCMPConfig = gravitoCMPConfig; Standalone TCF CMP. To add Standalone TCF CMP add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\"); }; document.body.appendChild(gravitoSDKTag); TCF CMP with backend. To add TCF CMP with backend add following values to settings section of your config object window.gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_3\", sdkVersion: 2, }, //other sections }; And add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\", \"firstParty\"); }; document.body.appendChild(gravitoSDKTag); Migrating to TCF CMP Version 3 Add settings section your config Object with following properties. var gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: false, // Set this flag to true if you want to use gravito backend with TCF CMP backendUrl: \"\", // This will be the URL of your gravito firstparty domain for backend support EX: https://gto.yourdomain.net. if left empty it will be evaluated from your hosted domain. version: \"bundle_latest_3\", // This will be the version of your TCFCMP. bundle_latest_3 is recommended sdkVersion: 2, // Don;t change this value , catchCMPEvents: false, // Set this value to true if you want to capture CMP events and generate report on https://admin.gravito.net dashborad. }, // other properties }; TCF CMP Version 3 should be deployed with gravito SDK version 2.Change your deployment script as follows. window.gravitoCMPConfig = gravitoCMPConfig; // Replace this with your config object;var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\"); // For Standalone TCF CMP // window.gravito.init(\"tcfCMP\",firstParty); // For TCF CMP with backend }; document.body.appendChild(gravitoSDKTag); TCF CMP Version 3 adds some special feature such as providing your custom html for first layer of UI, Configuring necessary consents. To use any of them please contact gravito support. Test your implementation of TCF CMP Version 3 thoroughly to ensure that all features are working as expected and that there are no issues with backend integration. Once you have confirmed that everything is working as expected, you can proceed with deploying TCF CMP Version 3 on your production website. Note Please note that this is a general guide and your specific implementation may require additional steps. It is always recommended to test your implementation thoroughly before deploying it to production. If you have any questions or issues during the migration process, please reach out to Gravito support for assistance.","title":"Version 3(Internal) (Latest)"},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#version-3internal-latest","text":"Note: Version 3 does not correspond to TCF Version 3 but it is Internal Version 3 for gravito CMP, and is TCF version 2 complaint.","title":"Version 3(Internal) (Latest)"},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#how-it-works","text":"Configuration TCF CMP can be configure and customize as per your need with the help of configuration object.You can generate this configuration object using our Admin Portal or you can create your own from scratch. Note : {VendorsCount} is a placeholder which you can insert anywhere in the text. It will display the total number of vendors in your config. Following is the example of config object for TCF CMP. window.gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: true, catchCMPEvents: true, sdkVersion: 2, userIdModule: false, backendUrl: \"\", version: \"bundle_latest_3\", }, core: { cookieName: \"TcString\", cookieExpiry: 2, useTopDomain: false, syncAfter: 1800, settingBtnClassname: \"manageSettings\", version: 2, purposeOneTreatment: true, publisherCountryCode: \"EN\", googleTcfId: 755, purposes: [ { type: \"purposes\", id: 1, }, { type: \"stacks\", id: 26, }, { type: \"purposes\", id: 10, }, ], specialFeatures: [1, 2], specialPurposes: [1, 2], features: [1, 2, 3], vendors: [2, 6, 8, 511, 11, 14, 278, 755], nonTCFVendors: [ { type: \"nonTCFVendors\", id: 2, name: \"Amazon\", description: \"description for amazon\", isConsentable: false, }, ], customPurposes: [ { type: \"customPurpose\", id: 1, name: \"Data Collection\", description: \"Gravito can collect data and can use it for better experience of its customers\", descriptionLegal: \"Gravito can collect data and can use it for better experience of its customers\", isLegitimate: true, }, { type: \"customPurpose\", id: 2, name: \"Targeting\", description: \"Gravito can use data for targeting its customers\", descriptionLegal: \"Gravito can use data for targeting its customers\", isLegitimate: false, }, ], publisherRestrictions: [ { purposeID: 1, restrictionType: \"REQUIRE_CONSENT\", vendors: [6, 12], }, { purposeID: 1, restrictionType: \"REQUIRE_CONSENT\", vendors: [8], }, { purposeID: 2, restrictionType: \"REQUIRE_CONSENT\", vendors: [8], }, ], }, text: { firstLayer: { title: \"We need your consent to provide personalized experience\", introductionText: \"Gravito and its <span id='partners-link'> {VendorsCount} third-party vendors</span> collect personal data (e.g. IP address, device identifier) through the use of cookies and other technical methods which are storing and accessing data on your device to provide the best user experience and show targetted content and advertising.\", consentableItemDescription: \"Gravito and its partners require consent for following:\", legalFooter: 'By accepting, you are allowing data processing within the service, rejection can affect the user experience. Some third-party vendors might use their legitimate interest to operate, you can object that or change other settings at any time by selecting \"Settings\" at the bottom of the page.', privacyPolicyUrl: \"https://www.gravito.net/#privacy-policy\", privacyLabel: \"Privacy Policy\", actions: [\"Settings\", \"Accept All\"], }, secondLayer: { title: \"Gravito Setting title changed\", introductionText: \"Please select from the following list of purposes to help us serve you better.\", tabLabels: [\"Purposes and Characteristics\", \"Vendors\"], copyTCstringTooltip: \"Click here to copy TC string to clipboard\", checkBoxLabels: { consent: \"Consent\", legitimateInterest: \"Legitimate interest\", }, actions: [\"Accept All\", \"Accept Selected\", \"Reject All\"], }, thirdLayer: { confirmationForUncheck: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"These cookies or other technical methods are important so that we can provide you with a better and more personal user experience.\", ], }, confirmationForAcceptSelected: { heading: \"Are you sure you want to disable?\", paragraphs: [ \"Cookies and other technical methods are important so that we can provide you with a better and more personal user experience.\", \"Without cookies or other technical methods, our ability to develop our services based on your preferences becomes more difficult, some features may be blocked, and your user experience may deteriorate.\", ], }, actions: [\"Cancel\", \"Yes\"], }, cookieReportLayer: { buttonTitle: \"Cookie Report\", heading: \"Cookie Reports layer header\", introductionText: \"Cookies are small text files that websites can use to make the user experience more efficient. We use cookies on the website. We use cookies on this website to improve the visitor experience and to better serve you. Based on our scan, this is how the cookies that will be used based on the preference set by you.\", beforeAcceptHeader: \"Before Accepting\", afterAcceptHeader: \"After Accepting\", nameHeader: \"Name\", domainHeader: \"Domain\", descriptionHeader: \"Description\", cookieTypeHeader: \"Cookie Type\", expiryHeader: \"Expiry in days\", httpOnlyHeader: \"Http Only\", noCookieDataMessage: \"No scan results available\", noCookieDataBeforeAcceptingMsg: \"No cookies were found before Accepting the consents on this domain.\", noCookieDataAfterAcceptingMsg: \"No cookies were found after Accepting the consents on this domain \", }, commonTerms: { purposes: \"Purposes\", consent: \"Consent\", legitimateInterest: \"Legitimate interest\", specialPurposes: \"Special Purposes\", specialFeatures: \"Special Features\", features: \"Features\", policyURl: \"Policy Url\", nonTCFVendors: \"Non TCF Vendors\", vendors: \"Vendor\", customPurposes: \"Custom Purposes\", cookieMaxAge: \"Cookie max age (seconds)\", disclouserDetails: \"Details\", disclouserFetchingError: \"Unable to get Json data\", disclouserHeaderIdentifier: \"Identifier\", disclouserHeaderDomain: \"Domain\", disclouserHeaderType: \"Type\", disclosureHeaderMaxAge: \"Max Age(s)\", disclosureHeaderPurpose: \"Purposes\", cookieRefresh: \"Cookie refresh\", usesCookies: \"Uses cookies\", usesNonCookieAccess: \"Uses non cookie access\", yes: \"Yes\", no: \"No\", seconds: \"seconds\", days: \"days\", alertMessageForCopiedTcString: \"CMP Settings Copied\", }, }, style: { logoUrl: \"https://cdn.gravito.net/logos/gravito_logo_white_background.png\", primaryColor: \"orange\", secondaryColor: \"#666\", fonts: [ { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2\", unicodeRange: \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\", }, { url: \"https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2\", unicodeRange: \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\", }, ], customCSS: \"\", consentInputType: \"checkbox\", useAccordionForPurpose: true, layoutType: \"2-tabs\", disableConfirmationModal: true, showCopyTcStringButton: true, }, };","title":"How it works?"},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#deployment","text":"TCF CMP's can be deployed with the help of SDK V2. Add your config object to window.gravitoCMPConifg variable. window.gravitoCMPConfig = gravitoCMPConfig;","title":"Deployment"},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#standalone-tcf-cmp","text":"To add Standalone TCF CMP add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\"); }; document.body.appendChild(gravitoSDKTag);","title":"Standalone TCF CMP."},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#tcf-cmp-with-backend","text":"To add TCF CMP with backend add following values to settings section of your config object window.gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: true, backendUrl: \"https://gto.yourDomainName\", // if left empty url will be generated from hostname version: \"bundle_latest_3\", sdkVersion: 2, }, //other sections }; And add following script in your website below your gravitoCMPConfig object. var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\", \"firstParty\"); }; document.body.appendChild(gravitoSDKTag);","title":"TCF CMP with backend."},{"location":"Gravito_TCF_2.2_CMP/advanced/version3/#migrating-to-tcf-cmp-version-3","text":"Add settings section your config Object with following properties. var gravitoCMPConfig = { settings: { type: \"TCF\", useGravitoBackend: false, // Set this flag to true if you want to use gravito backend with TCF CMP backendUrl: \"\", // This will be the URL of your gravito firstparty domain for backend support EX: https://gto.yourdomain.net. if left empty it will be evaluated from your hosted domain. version: \"bundle_latest_3\", // This will be the version of your TCFCMP. bundle_latest_3 is recommended sdkVersion: 2, // Don;t change this value , catchCMPEvents: false, // Set this value to true if you want to capture CMP events and generate report on https://admin.gravito.net dashborad. }, // other properties }; TCF CMP Version 3 should be deployed with gravito SDK version 2.Change your deployment script as follows. window.gravitoCMPConfig = gravitoCMPConfig; // Replace this with your config object;var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(\"tcfCMP\"); // For Standalone TCF CMP // window.gravito.init(\"tcfCMP\",firstParty); // For TCF CMP with backend }; document.body.appendChild(gravitoSDKTag); TCF CMP Version 3 adds some special feature such as providing your custom html for first layer of UI, Configuring necessary consents. To use any of them please contact gravito support. Test your implementation of TCF CMP Version 3 thoroughly to ensure that all features are working as expected and that there are no issues with backend integration. Once you have confirmed that everything is working as expected, you can proceed with deploying TCF CMP Version 3 on your production website. Note Please note that this is a general guide and your specific implementation may require additional steps. It is always recommended to test your implementation thoroughly before deploying it to production. If you have any questions or issues during the migration process, please reach out to Gravito support for assistance.","title":"Migrating to TCF CMP Version 3"},{"location":"Gravito_V6_CMP/Components/","text":"Gravito CMP (New) Components Gravito CMP (New) can be used to deploy various CMP components such as the Standard CMP and TCF CMP. You can choose either based on your compliance requirements. - Standard CMP Gravito\u2019s own non-TCF CMP. It is a lightweight solution suitable for any website. Standard CMP Documentation Know more about Microsoft UET Google Consent Mode - TCF 2.2 CMP A TCF-certified CMP designed for GDPR compliance. It is a full-featured CMP suitable for any website. TCF 2.2 CMP Documentation Know more about Microsoft UET Google Consent Mode - Custom Tabs Gravito CMP (New) allows you to create custom tabs for your CMP. This feature is useful for adding additional information or functionality to your CMP. Custom Tabs Documentation","title":"Components"},{"location":"Gravito_V6_CMP/Components/#gravito-cmp-new-components","text":"Gravito CMP (New) can be used to deploy various CMP components such as the Standard CMP and TCF CMP. You can choose either based on your compliance requirements.","title":"Gravito CMP (New) Components"},{"location":"Gravito_V6_CMP/Components/#-standard-cmp","text":"Gravito\u2019s own non-TCF CMP. It is a lightweight solution suitable for any website. Standard CMP Documentation Know more about Microsoft UET Google Consent Mode","title":"- Standard CMP"},{"location":"Gravito_V6_CMP/Components/#-tcf-22-cmp","text":"A TCF-certified CMP designed for GDPR compliance. It is a full-featured CMP suitable for any website. TCF 2.2 CMP Documentation Know more about Microsoft UET Google Consent Mode","title":"- TCF 2.2 CMP"},{"location":"Gravito_V6_CMP/Components/#-custom-tabs","text":"Gravito CMP (New) allows you to create custom tabs for your CMP. This feature is useful for adding additional information or functionality to your CMP. Custom Tabs Documentation","title":"- Custom Tabs"},{"location":"Gravito_V6_CMP/Customization/","text":"Customizations in Gravito CMP (New) Gravito CMP (New) is a highly customizable solution that allows you to tailor the user experience to meet your specific needs. These customizations can be made through the Styles tab in Gravito CMP (New) configurator. Styles Tab Fields The Styles tab allows you to configure the appearance of your CMP. Below are the fields available for customization: 1. Logo URL Description : URL of the logo to be displayed in the CMP. Example : https://gravitocdn.blob.core.windows.net/logos/Website_DEMO_logo.png Note : It is recommended to use a logo that aligns with your brand identity. 2. Logo Alternate Text Description : Alternate text for the logo, used for accessibility. Example : Website Logo Note : This text will be displayed if the logo cannot be loaded. 3. Primary Color Code Description : The primary color used in the CMP interface. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Choose a color that matches your brand's primary theme. 4. Secondary Color Code Description : The secondary color used in the CMP interface. Input Format : Hexadecimal color code (e.g., #a3a3a3 ). Note : This color is typically used for less prominent elements. 5. Header Color Code Description : The color used for the header section of the CMP. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Ensure this color contrasts well with the text for readability. 6. Footer Color Code Description : The color used for the footer section of the CMP. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Similar to the header, ensure good contrast for readability. 7. Fonts Description : Add custom fonts to be used in the CMP. Fields : Font URL : URL pointing to the font file (e.g., https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2 ). Font Unicode Range : Unicode range for the font (e.g., U+0100-024F, U+0259, U+1E00-1EFF ). Actions : Add Font : Add a new font configuration by clicking the + Add Font button after which a modal will appear where you can add new font. Reset to Default : Revert to the default font settings. Note : Ensure the font URL is accessible and the Unicode range covers the required characters. Additional Customizations Apart from the styles tab, you can also customize the look and feel of the CMP by adding custom CSS. This allows for more granular control over the appearance of various elements within the CMP. You can add your CSS code in the Custom CSS editor field in the Appearance sub-tab of the selected framework.","title":"Customization"},{"location":"Gravito_V6_CMP/Customization/#customizations-in-gravito-cmp-new","text":"Gravito CMP (New) is a highly customizable solution that allows you to tailor the user experience to meet your specific needs. These customizations can be made through the Styles tab in Gravito CMP (New) configurator.","title":"Customizations in Gravito CMP (New)"},{"location":"Gravito_V6_CMP/Customization/#styles-tab-fields","text":"The Styles tab allows you to configure the appearance of your CMP. Below are the fields available for customization:","title":"Styles Tab Fields"},{"location":"Gravito_V6_CMP/Customization/#1-logo-url","text":"Description : URL of the logo to be displayed in the CMP. Example : https://gravitocdn.blob.core.windows.net/logos/Website_DEMO_logo.png Note : It is recommended to use a logo that aligns with your brand identity.","title":"1. Logo URL"},{"location":"Gravito_V6_CMP/Customization/#2-logo-alternate-text","text":"Description : Alternate text for the logo, used for accessibility. Example : Website Logo Note : This text will be displayed if the logo cannot be loaded.","title":"2. Logo Alternate Text"},{"location":"Gravito_V6_CMP/Customization/#3-primary-color-code","text":"Description : The primary color used in the CMP interface. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Choose a color that matches your brand's primary theme.","title":"3. Primary Color Code"},{"location":"Gravito_V6_CMP/Customization/#4-secondary-color-code","text":"Description : The secondary color used in the CMP interface. Input Format : Hexadecimal color code (e.g., #a3a3a3 ). Note : This color is typically used for less prominent elements.","title":"4. Secondary Color Code"},{"location":"Gravito_V6_CMP/Customization/#5-header-color-code","text":"Description : The color used for the header section of the CMP. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Ensure this color contrasts well with the text for readability.","title":"5. Header Color Code"},{"location":"Gravito_V6_CMP/Customization/#6-footer-color-code","text":"Description : The color used for the footer section of the CMP. Input Format : Hexadecimal color code (e.g., #f07e26 ). Note : Similar to the header, ensure good contrast for readability.","title":"6. Footer Color Code"},{"location":"Gravito_V6_CMP/Customization/#7-fonts","text":"Description : Add custom fonts to be used in the CMP. Fields : Font URL : URL pointing to the font file (e.g., https://cdn.gravito.net/fonts/lato-v22-latin-700.woff2 ). Font Unicode Range : Unicode range for the font (e.g., U+0100-024F, U+0259, U+1E00-1EFF ). Actions : Add Font : Add a new font configuration by clicking the + Add Font button after which a modal will appear where you can add new font. Reset to Default : Revert to the default font settings. Note : Ensure the font URL is accessible and the Unicode range covers the required characters.","title":"7. Fonts"},{"location":"Gravito_V6_CMP/Customization/#additional-customizations","text":"Apart from the styles tab, you can also customize the look and feel of the CMP by adding custom CSS. This allows for more granular control over the appearance of various elements within the CMP. You can add your CSS code in the Custom CSS editor field in the Appearance sub-tab of the selected framework.","title":"Additional Customizations"},{"location":"Gravito_V6_CMP/Deployment/","text":"Deployment for Gravito CMP (New) Configuration Gravito CMP can be deployed in the following ways. GTM (Google Tag Manager) Template WordPress Plugin Deployment Script Webview for Mobile implementations (TCF CMP) All deployment related actions for Gravito CMP (New) are handled through Deployment tab in the Gravito CMP (New) Configurator. This tab is available as the last tab in the sidebar of the configurator. Gravito CMP (New) supports multiple deployment options to suit different environments and use cases. Below are the available deployment methods: 1. GTM (Google Tag Manager) Template This option allows you to quickly integrate Gravito's CMP with your website using Google Tag Manager. Please follow the steps below to deploy using GTM: Select the GTM Template option from the provided Deployment Method and click Validate & Publish button. if the validation and publishing is successful, you will get an option to copy GTM Token by clicking on the Copy GTM Token button. Login to your Google Tag Manager account and click on a new Tag . Tag Configuration: Choose the Gravito Consent Management template from the list. Fill the fields: Field Description Gravito Token Paste the CMP token copied from Gravito portal Gravito CMP type Select Gravito CMP (New) \u2705 Enable Google Consent Mode Enable this to activate GCM support Google Consent Mode Settings Option Description Wait for update Time to wait (in ms) for consent before proceeding (default: 2000 ) Enable URL passthrough Optional: Enable if you need to forward consent state via query params Redact ads data Set to Dynamic (based on ad_storage) for flexible ad personalization Default Consent State (Optional) Configure regional preferences if needed. You can leave it blank to apply globally. Add Trigger and Save Add a Page View or All Pages trigger to fire this tag on every page load. Click Save . Publish the GTM Container Submit and Publish the container. CMP will now load and handle consent dynamically on your site. 2. WordPress Plugin Seamlessly integrate Gravito's CMP into your WordPress website using our dedicated plugin. Please follow the steps below to deploy using the WordPress plugin: Select the WordPress Plugin option from the provided Deployment Method and click Validate & Publish button. if the validation and publishing is successful, you will get an option to copy WordPress Token by clicking on the Copy WordPress Token button. Use this token in the WordPress plugin to integrate Gravito's CMP into your website. 3. Deployment Script: Utilize the deployment script to efficiently incorporate Gravito's CMP into your website's codebase. Please follow the steps below to deploy using the deployment script: Select the Deployment Script option from the provided Deployment Method and click Validate & Publish button. if the validation and publishing is successful, you will get an option to Generate Deployment Script and Download Config . Click on the Generate Deployment Script button to generate the deployment script. This will open a modal with the generated script as shown in below image. You can paste this script in your website's <body> tag.","title":"Deployment"},{"location":"Gravito_V6_CMP/Deployment/#deployment-for-gravito-cmp-new-configuration","text":"Gravito CMP can be deployed in the following ways. GTM (Google Tag Manager) Template WordPress Plugin Deployment Script Webview for Mobile implementations (TCF CMP) All deployment related actions for Gravito CMP (New) are handled through Deployment tab in the Gravito CMP (New) Configurator. This tab is available as the last tab in the sidebar of the configurator. Gravito CMP (New) supports multiple deployment options to suit different environments and use cases. Below are the available deployment methods:","title":"Deployment for Gravito CMP (New) Configuration"},{"location":"Gravito_V6_CMP/Deployment/#1-gtm-google-tag-manager-template","text":"This option allows you to quickly integrate Gravito's CMP with your website using Google Tag Manager. Please follow the steps below to deploy using GTM: Select the GTM Template option from the provided Deployment Method and click Validate & Publish button. if the validation and publishing is successful, you will get an option to copy GTM Token by clicking on the Copy GTM Token button. Login to your Google Tag Manager account and click on a new Tag .","title":"1. GTM (Google Tag Manager) Template"},{"location":"Gravito_V6_CMP/Deployment/#tag-configuration","text":"Choose the Gravito Consent Management template from the list.","title":"Tag Configuration:"},{"location":"Gravito_V6_CMP/Deployment/#fill-the-fields","text":"Field Description Gravito Token Paste the CMP token copied from Gravito portal Gravito CMP type Select Gravito CMP (New) \u2705 Enable Google Consent Mode Enable this to activate GCM support","title":"Fill the fields:"},{"location":"Gravito_V6_CMP/Deployment/#google-consent-mode-settings","text":"Option Description Wait for update Time to wait (in ms) for consent before proceeding (default: 2000 ) Enable URL passthrough Optional: Enable if you need to forward consent state via query params Redact ads data Set to Dynamic (based on ad_storage) for flexible ad personalization","title":"Google Consent Mode Settings"},{"location":"Gravito_V6_CMP/Deployment/#default-consent-state-optional","text":"Configure regional preferences if needed. You can leave it blank to apply globally.","title":"Default Consent State (Optional)"},{"location":"Gravito_V6_CMP/Deployment/#add-trigger-and-save","text":"Add a Page View or All Pages trigger to fire this tag on every page load. Click Save .","title":"Add Trigger and Save"},{"location":"Gravito_V6_CMP/Deployment/#publish-the-gtm-container","text":"Submit and Publish the container. CMP will now load and handle consent dynamically on your site.","title":"Publish the GTM Container"},{"location":"Gravito_V6_CMP/Deployment/#2-wordpress-plugin","text":"Seamlessly integrate Gravito's CMP into your WordPress website using our dedicated plugin. Please follow the steps below to deploy using the WordPress plugin: Select the WordPress Plugin option from the provided Deployment Method and click Validate & Publish button. if the validation and publishing is successful, you will get an option to copy WordPress Token by clicking on the Copy WordPress Token button. Use this token in the WordPress plugin to integrate Gravito's CMP into your website.","title":"2. WordPress Plugin"},{"location":"Gravito_V6_CMP/Deployment/#3-deployment-script","text":"Utilize the deployment script to efficiently incorporate Gravito's CMP into your website's codebase. Please follow the steps below to deploy using the deployment script: Select the Deployment Script option from the provided Deployment Method and click Validate & Publish button. if the validation and publishing is successful, you will get an option to Generate Deployment Script and Download Config . Click on the Generate Deployment Script button to generate the deployment script. This will open a modal with the generated script as shown in below image. You can paste this script in your website's <body> tag.","title":"3. Deployment Script:"},{"location":"Gravito_V6_CMP/FAQ/","text":"Frequently Asked Questions - Gravito CMP (New) How to use your custom font in CMP? How to Resurface the CMP UI to All users and Collect Consent Again? How to open CMP in given session? How to Provide Google with the Required Legitimate Interest's Even on Reject All Action? How to fire GTM tags based on consents in CMP?(Only for Standard CMP Component) How to use Consent Based Rendering?","title":"FAQ's"},{"location":"Gravito_V6_CMP/FAQ/#frequently-asked-questions-gravito-cmp-new","text":"How to use your custom font in CMP? How to Resurface the CMP UI to All users and Collect Consent Again? How to open CMP in given session? How to Provide Google with the Required Legitimate Interest's Even on Reject All Action? How to fire GTM tags based on consents in CMP?(Only for Standard CMP Component) How to use Consent Based Rendering?","title":"Frequently Asked Questions - Gravito CMP (New)"},{"location":"Gravito_V6_CMP/Getting_Started/","text":"Gravito CMP (New)! Gravito CMP (New) is the latest version of Gravito and is a powerful, new tool from Gravito designed for ultimate customizability and flexibility. It provides a single, consistent setup-to-deployment process for all CMP frameworks, making consent management smoother than ever! Are you looking for the documentation of Gravito TCF 2.2 CMP, Intelligent CMP or the PRO CMP?. The links you had earlier will work and the documentation is still valid. If you cannot find a specific documentation please email us at support(@)gravito.net and we will help you with the same. Quick Reminder: Have you registered with Gravito yet? \ud83d\udc49 Get Registered Here . Gravito CMP (New) Modular Configurator: Use our intuitive configurator to create a consent banner tailored to your selected framework and specific needs. Customize it and make your website truly yours! Easy Integration: To include Gravito CMP (New) in your website, simply copy and paste the following script into your site\u2019s code: Note Replace gravitoConfig with your config object. // init gravito window.gravito = {}; // add config object to gravito window.gravito.config=gravitoConfig // load gravito SDK var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdk/v6/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(); }; document.head.appendChild(gravitoSDKTag);; Resurfacing To open the CMP again, we have a window-scoped function which can be used: window.gravito.cmp.openPreferences() \u2014 this will open the second layer (Details tab). To open the first layer (Declaration tab): window.gravito.cmp.openPreferences(0) \u2014 this will open the first layer (Declaration).","title":"Getting Started"},{"location":"Gravito_V6_CMP/Getting_Started/#gravito-cmp-new","text":"Gravito CMP (New) is the latest version of Gravito and is a powerful, new tool from Gravito designed for ultimate customizability and flexibility. It provides a single, consistent setup-to-deployment process for all CMP frameworks, making consent management smoother than ever! Are you looking for the documentation of Gravito TCF 2.2 CMP, Intelligent CMP or the PRO CMP?. The links you had earlier will work and the documentation is still valid. If you cannot find a specific documentation please email us at support(@)gravito.net and we will help you with the same.","title":"Gravito CMP (New)!"},{"location":"Gravito_V6_CMP/Getting_Started/#quick-reminder","text":"Have you registered with Gravito yet? \ud83d\udc49 Get Registered Here .","title":"Quick Reminder:"},{"location":"Gravito_V6_CMP/Getting_Started/#gravito-cmp-new-modular-configurator","text":"Use our intuitive configurator to create a consent banner tailored to your selected framework and specific needs. Customize it and make your website truly yours!","title":"Gravito CMP (New) Modular Configurator:"},{"location":"Gravito_V6_CMP/Getting_Started/#easy-integration","text":"To include Gravito CMP (New) in your website, simply copy and paste the following script into your site\u2019s code: Note Replace gravitoConfig with your config object. // init gravito window.gravito = {}; // add config object to gravito window.gravito.config=gravitoConfig // load gravito SDK var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdk/v6/latest/sdk.js\"; gravitoSDKTag.onload = function () { window.gravito.init(); }; document.head.appendChild(gravitoSDKTag);;","title":"Easy Integration:"},{"location":"Gravito_V6_CMP/Getting_Started/#resurfacing","text":"To open the CMP again, we have a window-scoped function which can be used: window.gravito.cmp.openPreferences() \u2014 this will open the second layer (Details tab). To open the first layer (Declaration tab): window.gravito.cmp.openPreferences(0) \u2014 this will open the first layer (Declaration).","title":"Resurfacing"},{"location":"Gravito_V6_CMP/Release_Notes/","text":"Release Notes Release Notes 6.1.0 (01/07/2025) New Features: WebView Support for TCF CMP Gravito CMP (New) now supports usage in WebView-based mobile applications for the TCF CMP component. This enables seamless integration of the consent flow inside hybrid or native mobile apps using platforms like React Native, Flutter, Android, and iOS. UX Improvements in Defaults Tab Fixed scrolling behavior on the second layer of the CMP interface for smoother interaction. Minor refinements in layout and interaction for improved usability. Smart Link Handling for Privacy Policy Added feature to suppress CMP UI display when navigating to links matching the privacy policy URL. Improves user experience on privacy-related pages. DOM Layering Enhancements CSS adjustments ensure the CMP consistently renders as the top-most DOM element, preventing visual obstructions. Release Notes 6.0.0 (v600) (10/06/2025) New Features: Gravito CMP (New) \u2013 A New Flavor of Gravito CMP This is the initial release of Gravito CMP (New), a newly developed variant of our CMP platform. It is built using Preact, a lightweight alternative to React, offering improved performance and reduced bundle size. Support for Standard and TCF CMP Gravito CMP (New) supports both Standard CMP and TCF CMP components, allowing you to choose the best fit for your compliance needs. Standard CMP: Gravito\u2019s own non-TCF CMP, suitable for any website. TCF CMP: A TCF-certified CMP designed for GDPR compliance, suitable for any website. Lazy Loading for Better Performance Gravito CMP (New) includes lazy loading, reducing the initial load size of CMP bundles. This leads to faster page loads and a smoother user experience. Enhanced Tab-Based Layout The new tab-based layout improves usability and consent navigation. Users can now switch easily between different layers and settings, resulting in a more intuitive and efficient consent flow. Custom Tabs Now you can create custom tabs in the CMP interface, allowing you to display your own content or additional information relevant to your users.","title":"Release Notes"},{"location":"Gravito_V6_CMP/Release_Notes/#release-notes","text":"Release Notes 6.1.0 (01/07/2025) New Features: WebView Support for TCF CMP Gravito CMP (New) now supports usage in WebView-based mobile applications for the TCF CMP component. This enables seamless integration of the consent flow inside hybrid or native mobile apps using platforms like React Native, Flutter, Android, and iOS. UX Improvements in Defaults Tab Fixed scrolling behavior on the second layer of the CMP interface for smoother interaction. Minor refinements in layout and interaction for improved usability. Smart Link Handling for Privacy Policy Added feature to suppress CMP UI display when navigating to links matching the privacy policy URL. Improves user experience on privacy-related pages. DOM Layering Enhancements CSS adjustments ensure the CMP consistently renders as the top-most DOM element, preventing visual obstructions. Release Notes 6.0.0 (v600) (10/06/2025) New Features: Gravito CMP (New) \u2013 A New Flavor of Gravito CMP This is the initial release of Gravito CMP (New), a newly developed variant of our CMP platform. It is built using Preact, a lightweight alternative to React, offering improved performance and reduced bundle size. Support for Standard and TCF CMP Gravito CMP (New) supports both Standard CMP and TCF CMP components, allowing you to choose the best fit for your compliance needs. Standard CMP: Gravito\u2019s own non-TCF CMP, suitable for any website. TCF CMP: A TCF-certified CMP designed for GDPR compliance, suitable for any website. Lazy Loading for Better Performance Gravito CMP (New) includes lazy loading, reducing the initial load size of CMP bundles. This leads to faster page loads and a smoother user experience. Enhanced Tab-Based Layout The new tab-based layout improves usability and consent navigation. Users can now switch easily between different layers and settings, resulting in a more intuitive and efficient consent flow. Custom Tabs Now you can create custom tabs in the CMP interface, allowing you to display your own content or additional information relevant to your users.","title":"Release Notes"},{"location":"Gravito_V6_CMP/Setup_and_Design/","text":"Gravito CMP (New) Setup can be done using Gravito CMP (New) Configurator on Gravito\u2019s Admin Portal. Go to CMP >> Gravito CMP (New) Click on \"New Configuration\" button to create a new configuration. Click on \"Get Started\" button after adding a Config name and selecting a appropriate framework. You can now go through each of the following sections and configure the CMP as per your requirement. 1. Settings configuration Tab 2. Styles configuration Tab 3. Framework configuration Tab 4. Deployment Tab","title":"Setup and Design"},{"location":"Gravito_V6_CMP/Setup_and_Design/#1-settings-configuration-tab","text":"","title":"1. Settings configuration Tab"},{"location":"Gravito_V6_CMP/Setup_and_Design/#2-styles-configuration-tab","text":"","title":"2. Styles configuration Tab"},{"location":"Gravito_V6_CMP/Setup_and_Design/#3-framework-configuration-tab","text":"","title":"3. Framework configuration Tab"},{"location":"Gravito_V6_CMP/Setup_and_Design/#4-deployment-tab","text":"","title":"4. Deployment Tab"},{"location":"Gravito_V6_CMP/Components/custom_tabs/","text":"Custom Tabs Gravito CMP (New) allows you to create custom tabs for your CMP. This feature is useful for adding additional information or functionality to your CMP. Creating Custom Tabs To add a custom tab to your CMP, follow these steps: Check the Custom Tabs checkbox in the Components section of the configurator. A new tab will appear in the configurator named Custom Tabs . Click on the Custom Tabs tab where you can configure your custom tabs. Click on the Add Tab button to create a new tab. Enter the Tab Title and Tab URL in the provided fields. You can also adjust the sequence of the tabs by dragging and dropping them in the list. Once you have added all the required tabs, click CMP Preview to see the changes in the CMP preview. Click Save Progress to save your changes. Note : You can either host a static HTML page and provide the URL or can provide a URL of a page from your website. The content of the tab will be loaded from the provided URL.","title":"Custom Tabs"},{"location":"Gravito_V6_CMP/Components/custom_tabs/#custom-tabs","text":"Gravito CMP (New) allows you to create custom tabs for your CMP. This feature is useful for adding additional information or functionality to your CMP.","title":"Custom Tabs"},{"location":"Gravito_V6_CMP/Components/custom_tabs/#creating-custom-tabs","text":"To add a custom tab to your CMP, follow these steps: Check the Custom Tabs checkbox in the Components section of the configurator. A new tab will appear in the configurator named Custom Tabs . Click on the Custom Tabs tab where you can configure your custom tabs. Click on the Add Tab button to create a new tab. Enter the Tab Title and Tab URL in the provided fields. You can also adjust the sequence of the tabs by dragging and dropping them in the list. Once you have added all the required tabs, click CMP Preview to see the changes in the CMP preview. Click Save Progress to save your changes. Note : You can either host a static HTML page and provide the URL or can provide a URL of a page from your website. The content of the tab will be loaded from the provided URL.","title":"Creating Custom Tabs"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_gcmv2/","text":"Google Consent Mode v2 What is Google Consent Mode v2? Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) : Consent Signals: ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) functionality_storage personalization_storage security_storage The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Note: The functionality_storage , personalization_storage , and security_storage signals can only be set to granted or denied . Official Google Documentation on Consent Mode v2 Enabling Google Consent Mode v2 in Gravito CMP (New) Creating Config in Admin Portal Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP (New) Configurator from the options. On the CMP Config listing page, click the New Configuration button to create a new CMP Config. Give the config an appropriate name and choose Standard CMP as the Framework . After that, click Get Started to proceed. Now navigate to the Standard CMP tab and Consent Categories sub-tab for GCMv2-related setup. You can enable GCM by selecting the checkbox labeled Google's GCM-V2 . After enabling GCM, some additional fields will appear for configuration. Use GCM Advanced Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . All other fields are related to Google consent signal mapping. They are explained below. Note: When using GCM Basic Mode, the GTM template deployment option will not be available. Consent Mapping: You\u2019ll now see dropdowns to map categories for the following Google consent signals: - ad_storage - analytics_storage - ad_user_data - ad_personalization For each of these, select the relevant consent category from the dropdown list. You will see default mappings, but you can change them as per your requirements. Once mappings are complete, you may continue filling out the other CMP configuration steps or jump directly to the Deployment tab for publishing your config. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. Below the comment // Insert your GTM script here , you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\"); Custom Events in dataLayer Gravito SDK as well as the GTM template will automatically push custom events to the dataLayer based on user consent choices. These events can be used to trigger specific tags in Google Tag Manager. The following events are pushed by Gravito for consent updates: gravitoGCMConsents : This event is triggered when there is an update in the Gravito Consent Management (GCM) consents. It pushes the current consent states as an object, which can be used for conditional tag firing in GTM. javascript dataLayer.push({ event: \"gravitoGCMConsents\", consents: consents, // Object containing the user's consent states }); These events enable granular control over tag firing based on user consent preferences, ensuring compliance with privacy regulations and enhancing data governance within GTM. You can listen for these events inside GTM and create triggers that activate tags only when the required consent conditions are met.","title":"Google Consent Mode v2"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_gcmv2/#google-consent-mode-v2","text":"","title":"Google Consent Mode v2"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_gcmv2/#what-is-google-consent-mode-v2","text":"Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) :","title":"What is Google Consent Mode v2?"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_gcmv2/#consent-signals","text":"ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) functionality_storage personalization_storage security_storage The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Note: The functionality_storage , personalization_storage , and security_storage signals can only be set to granted or denied . Official Google Documentation on Consent Mode v2","title":"Consent Signals:"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_gcmv2/#enabling-google-consent-mode-v2-in-gravito-cmp-new","text":"","title":"Enabling Google Consent Mode v2 in Gravito CMP (New)"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_gcmv2/#creating-config-in-admin-portal","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP (New) Configurator from the options. On the CMP Config listing page, click the New Configuration button to create a new CMP Config. Give the config an appropriate name and choose Standard CMP as the Framework . After that, click Get Started to proceed. Now navigate to the Standard CMP tab and Consent Categories sub-tab for GCMv2-related setup. You can enable GCM by selecting the checkbox labeled Google's GCM-V2 . After enabling GCM, some additional fields will appear for configuration. Use GCM Advanced Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . All other fields are related to Google consent signal mapping. They are explained below. Note: When using GCM Basic Mode, the GTM template deployment option will not be available.","title":"Creating Config in Admin Portal"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_gcmv2/#consent-mapping","text":"You\u2019ll now see dropdowns to map categories for the following Google consent signals: - ad_storage - analytics_storage - ad_user_data - ad_personalization For each of these, select the relevant consent category from the dropdown list. You will see default mappings, but you can change them as per your requirements. Once mappings are complete, you may continue filling out the other CMP configuration steps or jump directly to the Deployment tab for publishing your config. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. Below the comment // Insert your GTM script here , you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\");","title":"Consent Mapping:"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_gcmv2/#custom-events-in-datalayer","text":"Gravito SDK as well as the GTM template will automatically push custom events to the dataLayer based on user consent choices. These events can be used to trigger specific tags in Google Tag Manager. The following events are pushed by Gravito for consent updates: gravitoGCMConsents : This event is triggered when there is an update in the Gravito Consent Management (GCM) consents. It pushes the current consent states as an object, which can be used for conditional tag firing in GTM. javascript dataLayer.push({ event: \"gravitoGCMConsents\", consents: consents, // Object containing the user's consent states }); These events enable granular control over tag firing based on user consent preferences, ensuring compliance with privacy regulations and enhancing data governance within GTM. You can listen for these events inside GTM and create triggers that activate tags only when the required consent conditions are met.","title":"Custom Events in dataLayer"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_uet/","text":"Microsoft Consent Mode (UET) Enabling Microsoft Consent Mode in Gravito CMP (New) Gravito CMP (New) supports two ways to enable Microsoft's Universal Consent Mode: 1. Using Configurator Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP (New) Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Give config an appropriate name and choose Standard CMP as Framework . After that, click Get Started to proceed. Now navigate to Standard CMP tab and Consent Categories sub-tab for UET related setup. You can enable UET by checking the checkbox labeled Microsoft's Universal Event Tracking (UET) . After enabling UET, an additional field will appear for configuration. Consent Mapping: You\u2019ll now see dropdowns to map category for : ad_storage Select the relevant consent category from the dropdown list. Note: This mapping is for the ad_storage signal only is common across both GCMv2 & UET. Once mapping is complete, click Save Progress at the top-right. Now you have successfully enabled Microsoft UET Consent Mode in your CMP configuration. You may continue filling out the other CMP configuration steps, or jump directly to the Deployment tab. 2. Without Configurator Enable UET Mode : Add the useUET flag under the gravito.config.cmp.standard.core section of your configuration and set its value to true . window.gravito = { config: { cmp: { standard: { core: { useUET: true, // ... other configurations } } } } }; Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the gravito.config.cmp.standard.core section of your config manually. Define adsConsentId Based on CMP Type The adsConsentId should be a single ID referring to the custom consent item that you have defined in the config. It is not an array of TCF purpose IDs in this case. Example: window.gravito = { config: { cmp: { standard: { core: { useUET: true, adsConsentId: \"{{YOUR_CONSENT_ITEM_ID}}\", // Replace with your consent item ID } } } } }; This means the consent value of the item with ID \"{{YOUR_CONSENT_ITEM_ID}}\" will be used for Microsoft UET. How Gravito CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"Microsoft Consent Mode (UET)"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_uet/#microsoft-consent-mode-uet","text":"","title":"Microsoft Consent Mode (UET)"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_uet/#enabling-microsoft-consent-mode-in-gravito-cmp-new","text":"Gravito CMP (New) supports two ways to enable Microsoft's Universal Consent Mode:","title":"Enabling Microsoft Consent Mode in Gravito CMP (New)"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_uet/#1-using-configurator","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP (New) Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Give config an appropriate name and choose Standard CMP as Framework . After that, click Get Started to proceed. Now navigate to Standard CMP tab and Consent Categories sub-tab for UET related setup. You can enable UET by checking the checkbox labeled Microsoft's Universal Event Tracking (UET) . After enabling UET, an additional field will appear for configuration.","title":"1. Using Configurator"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_uet/#consent-mapping","text":"You\u2019ll now see dropdowns to map category for : ad_storage Select the relevant consent category from the dropdown list. Note: This mapping is for the ad_storage signal only is common across both GCMv2 & UET. Once mapping is complete, click Save Progress at the top-right. Now you have successfully enabled Microsoft UET Consent Mode in your CMP configuration. You may continue filling out the other CMP configuration steps, or jump directly to the Deployment tab.","title":"Consent Mapping:"},{"location":"Gravito_V6_CMP/Components/StandardCMP/Gravito_cmp_uet/#2-without-configurator","text":"Enable UET Mode : Add the useUET flag under the gravito.config.cmp.standard.core section of your configuration and set its value to true . window.gravito = { config: { cmp: { standard: { core: { useUET: true, // ... other configurations } } } } }; Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the gravito.config.cmp.standard.core section of your config manually. Define adsConsentId Based on CMP Type The adsConsentId should be a single ID referring to the custom consent item that you have defined in the config. It is not an array of TCF purpose IDs in this case. Example: window.gravito = { config: { cmp: { standard: { core: { useUET: true, adsConsentId: \"{{YOUR_CONSENT_ITEM_ID}}\", // Replace with your consent item ID } } } } }; This means the consent value of the item with ID \"{{YOUR_CONSENT_ITEM_ID}}\" will be used for Microsoft UET. How Gravito CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"2. Without Configurator"},{"location":"Gravito_V6_CMP/Components/StandardCMP/gravito_cmp/","text":"Gravito V6 - Standard CMP Component What is Standard CMP? Standard CMP Component is a part of Gravito CMP (New), used to deploy Gravito's Intelligent CMP. It is a lightweight CMP suitable for any website. It is not TCF certified. Gravito Standard CMP is a consent management solution that helps collect consent for data collection, analytics, targeting, personalization, and whatever your business needs to fulfill legal or regulatory requirements. How to use Standard CMP Component in V6 CMP? You can use the Standard CM component in your v6 CMP while setting up your configuration. In Gravito CMP (New) Configurator's components tab, choose the Standard CMP component and then configure it as per your requirement. How to setup Standard CMP Component? Standard CMP setup can be done using Gravito CMP (New) Configurator on Gravito\u2019s Admin Portal. Once you have selected the Standard CMP component in the configurator, it will add the Standard CMP tab in the left sidebar of the configurator. Click on it to open the Gravito CMP-specific configurator area. In this section, you will find the following tabs: Consent Categories : This tab is used to configure the consent-based settings. Here, you can configure the consent item, enable/disable various integrations such as Google Consent Mode, Microsoft UET, etc., as well as adjust some advanced settings. Note : Details on how to integrate with Google Consent Mode and Microsoft UET are already covered in the Gravito CMP UET and Gravito CMP GCM documentation. Languages : This tab is used to configure the languages for the CMP. You can add multiple languages and configure the text for each language. Appearance : This tab is used to configure the appearance of the CMP. In this tab, you can override the default styles of the CMP and configure the styles (CSS classes) as per your requirement. In the provided code editor on this tab, you can add the CSS classes to override the default styles of the CMP. Note : Whatever CSS classes you add in this tab will be added as a separate stylesheet in the head of the page. So you can basically add any CSS syntax in this editor. Help Content for each field is provided in the configurator itself. You can hover over the each field to see the help content. Event & Integration Standard CMP Component, when used with Gravito CMP (New), dispatches various events in its lifecycle. All these events are dispatched under the common namespace of gravito:cmp:light . You can listen to these events on your website and take the required action. To listen to these events, use the following code: window.addEventListener('gravito:cmp:light', function (event) { let eventType = event.detail.eventType; // your code here }); To access the current consent state of the CMP, use the following code: const getGravitoConsentCookieData = (cname) => { var name = cname + \"=\"; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(\";\"); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == \" \") { c = c.substring(1); } if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); } } return \"\"; }; let consentCookieName = window.gravito.config.cmp.standard.core.cookieName; let cookieData = getGravitoConsentCookieData(consentCookieName); let currentState = cookieData && JSON.parse(cookieData); // Current state will have the following structure: // { // \"Model\": [ // { // \"id\": 1, // \"name\": \"Your Consent\", // \"isConsentable\": true, // \"consent\": true // }, // ] // } You can use the above two code snippets to listen to events and get the current consent state of the CMP. For example, if you want to perform some action whenever a user gives/modifies consent, you can use the following code: const getGravitoConsentCookieData = (cname) => { var name = cname + \"=\"; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(\";\"); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == \" \") { c = c.substring(1); } if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); } } return \"\"; }; window.addEventListener('gravito:cmp:light', function (event) { let eventType = event.detail.eventType; let consentUpdateEventsList = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", ]; if (consentUpdateEventsList.includes(eventType)) { // Get the current consent state let consentCookieName = window.gravito.config.cmp.standard.core.cookieName; let cookieData = getGravitoConsentCookieData(consentCookieName); let currentState = cookieData && JSON.parse(cookieData); // Do your action here } }); Below is the list of event types dispatched by the Standard CMP component: Event Name Description layer1:opt-out:all This event is dispatched when a user opts out of all categories in layer 1 (Declaration Tab), i.e., clicked on the Reject All button on layer 1. layer2:opt-out:all This event is dispatched when a user opts out of all categories in layer 2 (Details Tab), i.e., clicked on the Reject All button on layer 2. layer2:opt-in:selected This event is dispatched when a user opts in to selected categories in layer 2 (Details Tab), i.e., clicked on the Accept Selected button. layer1:opt-in:all This event is dispatched when a user opts in to all categories in layer 1 (Declaration Tab), i.e., clicked on the Accept All button. layer2:opt-in:all This event is dispatched when a user opts in to all categories in layer 2 (Details Tab), i.e., clicked on the Accept All button. layer1:settings This event is dispatched when a user clicks the settings button on layer 1. opt-in:previously This event is dispatched when the user has already given consent and a consent cookie is present in the browser. opt-in:previously:outdated This event is dispatched when the user has already given consent but the consent cookie is outdated. cmploaded This event is dispatched when the CMP is loaded and ready to use. ui-shown This event is dispatched when the CMP UI is shown to the user. gcm:default This event is dispatched when the GCM default event is added to the dataLayer. This is specific to GCMv2 integration and will not fire if GCMv2 is not enabled or if using a GTM Template. FAQ's How to Resurface the CMP UI to All users and Collect Consent Again? How to use your custom font in CMP?","title":"Gravito V6 - Standard CMP Component"},{"location":"Gravito_V6_CMP/Components/StandardCMP/gravito_cmp/#gravito-v6-standard-cmp-component","text":"","title":"Gravito V6 - Standard CMP Component"},{"location":"Gravito_V6_CMP/Components/StandardCMP/gravito_cmp/#what-is-standard-cmp","text":"Standard CMP Component is a part of Gravito CMP (New), used to deploy Gravito's Intelligent CMP. It is a lightweight CMP suitable for any website. It is not TCF certified. Gravito Standard CMP is a consent management solution that helps collect consent for data collection, analytics, targeting, personalization, and whatever your business needs to fulfill legal or regulatory requirements.","title":"What is Standard CMP?"},{"location":"Gravito_V6_CMP/Components/StandardCMP/gravito_cmp/#how-to-use-standard-cmp-component-in-v6-cmp","text":"You can use the Standard CM component in your v6 CMP while setting up your configuration. In Gravito CMP (New) Configurator's components tab, choose the Standard CMP component and then configure it as per your requirement.","title":"How to use Standard CMP Component in V6 CMP?"},{"location":"Gravito_V6_CMP/Components/StandardCMP/gravito_cmp/#how-to-setup-standard-cmp-component","text":"Standard CMP setup can be done using Gravito CMP (New) Configurator on Gravito\u2019s Admin Portal. Once you have selected the Standard CMP component in the configurator, it will add the Standard CMP tab in the left sidebar of the configurator. Click on it to open the Gravito CMP-specific configurator area. In this section, you will find the following tabs: Consent Categories : This tab is used to configure the consent-based settings. Here, you can configure the consent item, enable/disable various integrations such as Google Consent Mode, Microsoft UET, etc., as well as adjust some advanced settings. Note : Details on how to integrate with Google Consent Mode and Microsoft UET are already covered in the Gravito CMP UET and Gravito CMP GCM documentation. Languages : This tab is used to configure the languages for the CMP. You can add multiple languages and configure the text for each language. Appearance : This tab is used to configure the appearance of the CMP. In this tab, you can override the default styles of the CMP and configure the styles (CSS classes) as per your requirement. In the provided code editor on this tab, you can add the CSS classes to override the default styles of the CMP. Note : Whatever CSS classes you add in this tab will be added as a separate stylesheet in the head of the page. So you can basically add any CSS syntax in this editor. Help Content for each field is provided in the configurator itself. You can hover over the each field to see the help content.","title":"How to setup Standard CMP Component?"},{"location":"Gravito_V6_CMP/Components/StandardCMP/gravito_cmp/#event-integration","text":"Standard CMP Component, when used with Gravito CMP (New), dispatches various events in its lifecycle. All these events are dispatched under the common namespace of gravito:cmp:light . You can listen to these events on your website and take the required action. To listen to these events, use the following code: window.addEventListener('gravito:cmp:light', function (event) { let eventType = event.detail.eventType; // your code here }); To access the current consent state of the CMP, use the following code: const getGravitoConsentCookieData = (cname) => { var name = cname + \"=\"; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(\";\"); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == \" \") { c = c.substring(1); } if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); } } return \"\"; }; let consentCookieName = window.gravito.config.cmp.standard.core.cookieName; let cookieData = getGravitoConsentCookieData(consentCookieName); let currentState = cookieData && JSON.parse(cookieData); // Current state will have the following structure: // { // \"Model\": [ // { // \"id\": 1, // \"name\": \"Your Consent\", // \"isConsentable\": true, // \"consent\": true // }, // ] // } You can use the above two code snippets to listen to events and get the current consent state of the CMP. For example, if you want to perform some action whenever a user gives/modifies consent, you can use the following code: const getGravitoConsentCookieData = (cname) => { var name = cname + \"=\"; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(\";\"); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == \" \") { c = c.substring(1); } if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); } } return \"\"; }; window.addEventListener('gravito:cmp:light', function (event) { let eventType = event.detail.eventType; let consentUpdateEventsList = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", ]; if (consentUpdateEventsList.includes(eventType)) { // Get the current consent state let consentCookieName = window.gravito.config.cmp.standard.core.cookieName; let cookieData = getGravitoConsentCookieData(consentCookieName); let currentState = cookieData && JSON.parse(cookieData); // Do your action here } }); Below is the list of event types dispatched by the Standard CMP component: Event Name Description layer1:opt-out:all This event is dispatched when a user opts out of all categories in layer 1 (Declaration Tab), i.e., clicked on the Reject All button on layer 1. layer2:opt-out:all This event is dispatched when a user opts out of all categories in layer 2 (Details Tab), i.e., clicked on the Reject All button on layer 2. layer2:opt-in:selected This event is dispatched when a user opts in to selected categories in layer 2 (Details Tab), i.e., clicked on the Accept Selected button. layer1:opt-in:all This event is dispatched when a user opts in to all categories in layer 1 (Declaration Tab), i.e., clicked on the Accept All button. layer2:opt-in:all This event is dispatched when a user opts in to all categories in layer 2 (Details Tab), i.e., clicked on the Accept All button. layer1:settings This event is dispatched when a user clicks the settings button on layer 1. opt-in:previously This event is dispatched when the user has already given consent and a consent cookie is present in the browser. opt-in:previously:outdated This event is dispatched when the user has already given consent but the consent cookie is outdated. cmploaded This event is dispatched when the CMP is loaded and ready to use. ui-shown This event is dispatched when the CMP UI is shown to the user. gcm:default This event is dispatched when the GCM default event is added to the dataLayer. This is specific to GCMv2 integration and will not fire if GCMv2 is not enabled or if using a GTM Template.","title":"Event &amp; Integration"},{"location":"Gravito_V6_CMP/Components/StandardCMP/gravito_cmp/#faqs","text":"How to Resurface the CMP UI to All users and Collect Consent Again? How to use your custom font in CMP?","title":"FAQ's"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp/","text":"Gravito CMP (New) - TCF CMP Component What is TCF CMP? It is a TCF 2.2 compliant consent management platform component. It is used to collect consent for TCF 2.2 purposes, special features, and vendors. It is a full-fledged CMP that can be used for any website. It can be used for GDPR compliance. This will be port of Gravito TCF 2.2 CMP which is also listed as one of the Google Certified TCF CMP's ( Web and App ) How to use TCF CMP Component in Gravito CMP (New)? You can use the TCF CMP component in your Gravito CMP (New) while setting up your configuration. In Gravito CMP (New) Configurator's components tab, choose the TCF CMP component and then configure it as per your requirement. How to setup TCF CMP Component? TCF CMP setup can be done using Gravito CMP (New) Configurator on Gravito\u2019s Admin Portal. Once you have selected the TCF CMP component in the configurator, it will add the TCF CMP tab in the left sidebar of the configurator. Click on it to open the TCF CMP-specific configurator area. In this section, you will find the following tabs: TCF Settings : This tab is used to configure the consent-based settings. Here, you can configure the consentable items mentioned in the TCFv2.2 framework such as TCF vendors, purposes, special purposes, features, special features, enable/disable various integrations such as Google Consent Mode, Microsoft UET, etc., as well as adjust some advanced settings. Note : Details on how to integrate with Google Consent Mode and Microsoft UET are already covered in the Gravito TCF CMP UET and Gravito TCF CMP GCM documentation. Languages : This tab is used to configure the languages for the CMP. You can add multiple languages and configure the text for each language. Appearance : This tab is used to configure the appearance of the CMP. In this tab, you can override the default styles of the CMP and configure the styles (CSS classes) as per your requirement. In the provided code editor on this tab, you can add the CSS classes to override the default styles of the CMP. Additionally, you can also choose the type of consent input controls you want to use in the CMP. You can choose between Checkbox and Toggle . The default value is Checkbox . Note : Whatever CSS classes you add in this tab will be added as a separate stylesheet in the head of the page. So you can basically add any CSS syntax in this editor. Help content for each field is provided in the configurator itself. You can hover over each field to see the help content. Stub loading We recommend adding the TCF stub in the of your website so that it is the first thing that loads and the __tcfAPI window object is available early. Below is the stub script. <script> \"use strict\"; !(function () { var e = function () { var e, t = \"__tcfapiLocator\", a = [], n = window; for (; n; ) { try { if (n.frames[t]) { e = n; break; } } catch (e) {} if (n === window.top) break; n = n.parent; } e || (!(function e() { var a = n.document, r = !!n.frames[t]; if (!r) if (a.body) { var s = a.createElement(\"iframe\"); (s.style.cssText = \"display:none\"), (s.name = t), a.body.appendChild(s); } else setTimeout(e, 5); return !r; })(), (n.__tcfapi = function () { for ( var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++ ) n[r] = arguments[r]; if (!n.length) return a; if (\"setGdprApplies\" === n[0]) n.length > 3 && 2 === parseInt(n[1], 10) && \"boolean\" == typeof n[3] && ((e = n[3]), \"function\" == typeof n[2] && n[2](\"set\", !0)); else if (\"ping\" === n[0]) { var s = { gdprApplies: e, cmpLoaded: !1, cmpStatus: \"stub\" }; \"function\" == typeof n[2] && n[2](s); } else a.push(n); }), n.addEventListener( \"message\", function (e) { var t = \"string\" == typeof e.data, a = {}; try { a = t ? JSON.parse(e.data) : e.data; } catch (e) {} var n = a.__tcfapiCall; n && window.__tcfapi( n.command, n.version, function (a, r) { var s = { __tcfapiReturn: { returnValue: a, success: r, callId: n.callId, }, }; t && (s = JSON.stringify(s)), e && e.source && e.source.postMessage && e.source.postMessage(s, \"*\"); }, n.parameter ); }, !1 )); }; \"undefined\" != typeof module ? (module.exports = e) : e(); })(); </script> If the stub is not added manually, our CMP will inject it automatically, but this may cause timing issues. Event & Integration TCF CMP Component, when used with PRO CMP, dispatches various events in its lifecycle. All these events are dispatched under the common namespace of gravito:tcfv2:client . You can listen to these events on your website and take the required action. To listen to these events, use the following code: window.addEventListener('gravito:tcfv2:client', function (event) { let eventType = event.detail.eventType; // your code here }); TCF Component exposes a current state of consent in window scope object. You can access the current state of consent using gravito.cmp.tcf.currentState . This object will have consent values for all the purposes, special features, and vendors used by CMP. let currentState = gravito.cmp.tcf.currentState // Current state will have the following structure: // { // \"whiteListVendors\": { // \"consent\": { // \"2\": true, // \"6\": true, // \"8\": true, // \"11\": true, // \"14\": true, // \"278\": false, // \"511\": true, // \"755\": true // }, // \"legitimateInterests\": { // \"2\": true, // \"6\": true, // \"8\": true, // \"11\": true, // \"14\": true, // \"278\": true, // \"511\": true, // \"755\": true // } // }, // \"purposes\": { // \"consent\": { // \"1\": true, // \"2\": true, // \"3\": true, // \"4\": true, // \"5\": true, // \"6\": true, // \"7\": true, // \"8\": true, // \"9\": true, // \"10\": true, // \"11\": true // }, // \"legitimateInterests\": { // \"1\": false, // \"2\": true, // \"3\": false, // \"4\": false, // \"5\": false, // \"6\": false, // \"7\": true, // \"8\": true, // \"9\": true, // \"10\": true, // \"11\": true // } // }, // \"specialFeatures\": { // \"1\": true, // \"2\": true // }, // \"customPurposes\": { // \"consent\": { // \"1\": true, // \"2\": true // }, // \"legitimateInterests\": { // \"1\": true, // \"2\": false // } // }, // \"nonTCFVendors\": [ // { // \"id\": 1, // \"name\": \"Facebook\", // \"consent\": true // }, // { // \"id\": 2, // \"name\": \"Amazon\", // \"consent\": false // } // ] // } ; Note : The above object is just an example. The actual object will have the values based on the user's consent and your configuration. You can use the above two code snippets to listen to events and get the current consent state of the CMP. For example, if you want to perform some action whenever a user gives/modifies consent, you can use the following code: window.addEventListener('gravito:tcfv2:client', function (event) { let eventType = event.detail.eventType; let consentUpdateEventsList = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", ]; if (consentUpdateEventsList.includes(eventType)) { // Get the current consent state let currentState = gravito.cmp.tcf.currentState; // Do your action here } }); Below is the list of event types dispatched by the TCF CMP component: Event Name Description layer1:opt-out:all This event is dispatched when a user opts out of all categories in layer 1 (Declaration Tab), i.e., clicked on the Reject All button on layer 1. layer2:opt-out:all This event is dispatched when a user opts out of all categories in layer 2 (Details Tab), i.e., clicked on the Reject All button on layer 2. layer2:opt-in:selected This event is dispatched when a user opts in to selected categories in layer 2 (Details Tab), i.e., clicked on the Accept Selected button. layer1:opt-in:all This event is dispatched when a user opts in to all categories in layer 1 (Declaration Tab), i.e., clicked on the Accept All button. layer2:opt-in:all This event is dispatched when a user opts in to all categories in layer 2 (Details Tab), i.e., clicked on the Accept All button. layer1:settings This event is dispatched when a user clicks the settings button on layer 1. opt-in:previously This event is dispatched when the user has already given consent and a consent cookie is present in the browser. opt-in:previously:outdated This event is dispatched when the user has already given consent but the consent cookie is outdated. cmploaded This event is dispatched when the CMP is loaded and ready to use. ui-shown This event is dispatched when the CMP UI is shown to the user. gcm:default This event is dispatched when the GCM default event is added to the dataLayer. This is specific to GCMv2 integration and will not fire if GCMv2 is not enabled or if using a GTM Template. FAQ's How to Resurface the CMP UI to All users and Collect Consent Again? How to use your custom font in CMP? How to Provide Google with the Required Legitimate Interest's Even on Reject All Action?","title":"Gravito CMP (New) - TCF CMP Component"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp/#gravito-cmp-new-tcf-cmp-component","text":"","title":"Gravito CMP (New) - TCF CMP Component"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp/#what-is-tcf-cmp","text":"It is a TCF 2.2 compliant consent management platform component. It is used to collect consent for TCF 2.2 purposes, special features, and vendors. It is a full-fledged CMP that can be used for any website. It can be used for GDPR compliance. This will be port of Gravito TCF 2.2 CMP which is also listed as one of the Google Certified TCF CMP's ( Web and App )","title":"What is TCF CMP?"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp/#how-to-use-tcf-cmp-component-in-gravito-cmp-new","text":"You can use the TCF CMP component in your Gravito CMP (New) while setting up your configuration. In Gravito CMP (New) Configurator's components tab, choose the TCF CMP component and then configure it as per your requirement.","title":"How to use TCF CMP Component in Gravito CMP (New)?"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp/#how-to-setup-tcf-cmp-component","text":"TCF CMP setup can be done using Gravito CMP (New) Configurator on Gravito\u2019s Admin Portal. Once you have selected the TCF CMP component in the configurator, it will add the TCF CMP tab in the left sidebar of the configurator. Click on it to open the TCF CMP-specific configurator area. In this section, you will find the following tabs: TCF Settings : This tab is used to configure the consent-based settings. Here, you can configure the consentable items mentioned in the TCFv2.2 framework such as TCF vendors, purposes, special purposes, features, special features, enable/disable various integrations such as Google Consent Mode, Microsoft UET, etc., as well as adjust some advanced settings. Note : Details on how to integrate with Google Consent Mode and Microsoft UET are already covered in the Gravito TCF CMP UET and Gravito TCF CMP GCM documentation. Languages : This tab is used to configure the languages for the CMP. You can add multiple languages and configure the text for each language. Appearance : This tab is used to configure the appearance of the CMP. In this tab, you can override the default styles of the CMP and configure the styles (CSS classes) as per your requirement. In the provided code editor on this tab, you can add the CSS classes to override the default styles of the CMP. Additionally, you can also choose the type of consent input controls you want to use in the CMP. You can choose between Checkbox and Toggle . The default value is Checkbox . Note : Whatever CSS classes you add in this tab will be added as a separate stylesheet in the head of the page. So you can basically add any CSS syntax in this editor. Help content for each field is provided in the configurator itself. You can hover over each field to see the help content.","title":"How to setup TCF CMP Component?"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp/#stub-loading","text":"We recommend adding the TCF stub in the of your website so that it is the first thing that loads and the __tcfAPI window object is available early. Below is the stub script. <script> \"use strict\"; !(function () { var e = function () { var e, t = \"__tcfapiLocator\", a = [], n = window; for (; n; ) { try { if (n.frames[t]) { e = n; break; } } catch (e) {} if (n === window.top) break; n = n.parent; } e || (!(function e() { var a = n.document, r = !!n.frames[t]; if (!r) if (a.body) { var s = a.createElement(\"iframe\"); (s.style.cssText = \"display:none\"), (s.name = t), a.body.appendChild(s); } else setTimeout(e, 5); return !r; })(), (n.__tcfapi = function () { for ( var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++ ) n[r] = arguments[r]; if (!n.length) return a; if (\"setGdprApplies\" === n[0]) n.length > 3 && 2 === parseInt(n[1], 10) && \"boolean\" == typeof n[3] && ((e = n[3]), \"function\" == typeof n[2] && n[2](\"set\", !0)); else if (\"ping\" === n[0]) { var s = { gdprApplies: e, cmpLoaded: !1, cmpStatus: \"stub\" }; \"function\" == typeof n[2] && n[2](s); } else a.push(n); }), n.addEventListener( \"message\", function (e) { var t = \"string\" == typeof e.data, a = {}; try { a = t ? JSON.parse(e.data) : e.data; } catch (e) {} var n = a.__tcfapiCall; n && window.__tcfapi( n.command, n.version, function (a, r) { var s = { __tcfapiReturn: { returnValue: a, success: r, callId: n.callId, }, }; t && (s = JSON.stringify(s)), e && e.source && e.source.postMessage && e.source.postMessage(s, \"*\"); }, n.parameter ); }, !1 )); }; \"undefined\" != typeof module ? (module.exports = e) : e(); })(); </script> If the stub is not added manually, our CMP will inject it automatically, but this may cause timing issues.","title":"Stub loading"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp/#event-integration","text":"TCF CMP Component, when used with PRO CMP, dispatches various events in its lifecycle. All these events are dispatched under the common namespace of gravito:tcfv2:client . You can listen to these events on your website and take the required action. To listen to these events, use the following code: window.addEventListener('gravito:tcfv2:client', function (event) { let eventType = event.detail.eventType; // your code here }); TCF Component exposes a current state of consent in window scope object. You can access the current state of consent using gravito.cmp.tcf.currentState . This object will have consent values for all the purposes, special features, and vendors used by CMP. let currentState = gravito.cmp.tcf.currentState // Current state will have the following structure: // { // \"whiteListVendors\": { // \"consent\": { // \"2\": true, // \"6\": true, // \"8\": true, // \"11\": true, // \"14\": true, // \"278\": false, // \"511\": true, // \"755\": true // }, // \"legitimateInterests\": { // \"2\": true, // \"6\": true, // \"8\": true, // \"11\": true, // \"14\": true, // \"278\": true, // \"511\": true, // \"755\": true // } // }, // \"purposes\": { // \"consent\": { // \"1\": true, // \"2\": true, // \"3\": true, // \"4\": true, // \"5\": true, // \"6\": true, // \"7\": true, // \"8\": true, // \"9\": true, // \"10\": true, // \"11\": true // }, // \"legitimateInterests\": { // \"1\": false, // \"2\": true, // \"3\": false, // \"4\": false, // \"5\": false, // \"6\": false, // \"7\": true, // \"8\": true, // \"9\": true, // \"10\": true, // \"11\": true // } // }, // \"specialFeatures\": { // \"1\": true, // \"2\": true // }, // \"customPurposes\": { // \"consent\": { // \"1\": true, // \"2\": true // }, // \"legitimateInterests\": { // \"1\": true, // \"2\": false // } // }, // \"nonTCFVendors\": [ // { // \"id\": 1, // \"name\": \"Facebook\", // \"consent\": true // }, // { // \"id\": 2, // \"name\": \"Amazon\", // \"consent\": false // } // ] // } ; Note : The above object is just an example. The actual object will have the values based on the user's consent and your configuration. You can use the above two code snippets to listen to events and get the current consent state of the CMP. For example, if you want to perform some action whenever a user gives/modifies consent, you can use the following code: window.addEventListener('gravito:tcfv2:client', function (event) { let eventType = event.detail.eventType; let consentUpdateEventsList = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", ]; if (consentUpdateEventsList.includes(eventType)) { // Get the current consent state let currentState = gravito.cmp.tcf.currentState; // Do your action here } }); Below is the list of event types dispatched by the TCF CMP component: Event Name Description layer1:opt-out:all This event is dispatched when a user opts out of all categories in layer 1 (Declaration Tab), i.e., clicked on the Reject All button on layer 1. layer2:opt-out:all This event is dispatched when a user opts out of all categories in layer 2 (Details Tab), i.e., clicked on the Reject All button on layer 2. layer2:opt-in:selected This event is dispatched when a user opts in to selected categories in layer 2 (Details Tab), i.e., clicked on the Accept Selected button. layer1:opt-in:all This event is dispatched when a user opts in to all categories in layer 1 (Declaration Tab), i.e., clicked on the Accept All button. layer2:opt-in:all This event is dispatched when a user opts in to all categories in layer 2 (Details Tab), i.e., clicked on the Accept All button. layer1:settings This event is dispatched when a user clicks the settings button on layer 1. opt-in:previously This event is dispatched when the user has already given consent and a consent cookie is present in the browser. opt-in:previously:outdated This event is dispatched when the user has already given consent but the consent cookie is outdated. cmploaded This event is dispatched when the CMP is loaded and ready to use. ui-shown This event is dispatched when the CMP UI is shown to the user. gcm:default This event is dispatched when the GCM default event is added to the dataLayer. This is specific to GCMv2 integration and will not fire if GCMv2 is not enabled or if using a GTM Template.","title":"Event &amp; Integration"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp/#faqs","text":"How to Resurface the CMP UI to All users and Collect Consent Again? How to use your custom font in CMP? How to Provide Google with the Required Legitimate Interest's Even on Reject All Action?","title":"FAQ's"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_gcmv2/","text":"Google Consent Mode v2 What is Google Consent Mode v2? Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) : Consent Signals: ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Official Google Documentation on Consent Mode v2 Enabling Google Consent Mode v2 in Gravito CMP (New) - TCF Component Creating Config in Admin Portal Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP (New) Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP Config. Give config an appropriate name and choose TCF CMP as Framework . After that, click Get Started to proceed. Now navigate to TCF CMP tab and TCF Settings sub-tab for GCMv2 related setup. You can enable GCM by checking the checkbox labeled Google's GCM-V2 . After enabling GCM, some additional fields will appear for configuration. Use GCM Advance Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . All other fields are related to Google consent signal mapping. They are explained below. Note: when the using GCM Basic Mode, the GTM template deployment option will not be available. Google's Consent Signal Mapping: You\u2019ll now see default mapping for the following Google consent signals:: ad_storage analytics_storage ad_user_data ad_personalization These signals are pre-mapped to the TCF purposes based on Google's requirements and should not be changed. you may continue filling out the other CMP configuration steps, or jump directly to the Deployment\" tab for publishing your config. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. below the comment // Insert your GTM script here you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\"); Custom Events in dataLayer Gravito SDK as well as the GTM template will automatically push custom events to the dataLayer based on user consent choices. These events can be used to trigger specific tags in Google Tag Manager. Below are the primary GTM events pushed by Gravito for consent updates: gravitoGCMConsents This event is triggered when there is an update in the Gravito Consent Management (GCM) consents. It pushes the current consent states as an object, which can be used for conditional tag firing in GTM. javascript dataLayer.push({ event: \"gravitoGCMConsents\", consents: consents, // Object containing the user's consent states });. gravitoTCFConsents This event is triggered when there is an update in the Gravito Consent Management (GCM) consents. It pushes the current consent states as an object, which can be used for conditional tag firing in GTM. javascript window.dataLayer.push({ event: \"gravitoTCFConsents\", consentObj: currentState, // Object representing the current TCF consent state });","title":"Google Consent Mode v2"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#google-consent-mode-v2","text":"","title":"Google Consent Mode v2"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#what-is-google-consent-mode-v2","text":"Google Consent Mode v2 allows you to adjust how Google tags behave based on the user's consent choices. This helps ensure compliance with data protection regulations while still enabling important site functionality. Consent Mode v2 particularly impacts: Cookies Ad Personalization Analytics Tracking With Consent Mode v2 , Google introduced two new consent signals required to comply with the EU Digital Markets Act (DMA) :","title":"What is Google Consent Mode v2?"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#consent-signals","text":"ad_storage analytics_storage ad_user_data (\ud83c\udd95) ad_personalization (\ud83c\udd95) The new signals ad_user_data and ad_personalization are essential under DMA for platforms like Google Ads and should be set according to user consent. Official Google Documentation on Consent Mode v2","title":"Consent Signals:"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#enabling-google-consent-mode-v2-in-gravito-cmp-new-tcf-component","text":"","title":"Enabling Google Consent Mode v2 in Gravito CMP (New) - TCF Component"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#creating-config-in-admin-portal","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP (New) Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP Config. Give config an appropriate name and choose TCF CMP as Framework . After that, click Get Started to proceed. Now navigate to TCF CMP tab and TCF Settings sub-tab for GCMv2 related setup. You can enable GCM by checking the checkbox labeled Google's GCM-V2 . After enabling GCM, some additional fields will appear for configuration. Use GCM Advance Mode is enabled by default. You can uncheck this if you want to use the Basic Mode . All other fields are related to Google consent signal mapping. They are explained below. Note: when the using GCM Basic Mode, the GTM template deployment option will not be available.","title":"Creating Config in Admin Portal"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#googles-consent-signal-mapping","text":"You\u2019ll now see default mapping for the following Google consent signals:: ad_storage analytics_storage ad_user_data ad_personalization These signals are pre-mapped to the TCF purposes based on Google's requirements and should not be changed. you may continue filling out the other CMP configuration steps, or jump directly to the Deployment\" tab for publishing your config. Note: If you are using GCM Basic Mode , you will see additional logic in your deployment script. below the comment // Insert your GTM script here you can add your GTM script. You can get the GTM script from your GTM account. It will look like this: (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != \"dataLayer\" ? \"&l=\" + l : \"\"; j.async = true; j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl; f.parentNode.insertBefore(j, f); })(window, document, \"script\", \"dataLayer\", \"{{Your_GTM_ID}}\");","title":"Google's Consent Signal Mapping:"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_gcmv2/#custom-events-in-datalayer","text":"Gravito SDK as well as the GTM template will automatically push custom events to the dataLayer based on user consent choices. These events can be used to trigger specific tags in Google Tag Manager. Below are the primary GTM events pushed by Gravito for consent updates: gravitoGCMConsents This event is triggered when there is an update in the Gravito Consent Management (GCM) consents. It pushes the current consent states as an object, which can be used for conditional tag firing in GTM. javascript dataLayer.push({ event: \"gravitoGCMConsents\", consents: consents, // Object containing the user's consent states });. gravitoTCFConsents This event is triggered when there is an update in the Gravito Consent Management (GCM) consents. It pushes the current consent states as an object, which can be used for conditional tag firing in GTM. javascript window.dataLayer.push({ event: \"gravitoTCFConsents\", consentObj: currentState, // Object representing the current TCF consent state });","title":"Custom Events in dataLayer"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_uet/","text":"Microsoft Consent Mode (UET) Enabling Microsoft Consent Mode in Gravito CMP (New) - TCF Component TCF CMP Component supports two ways to enable Microsoft's Universal Consent Mode: 1. Using Configurator Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP (New) Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Give config an appropriate name and choose TCF CMP as Framework . After that, click Get Started to proceed. Now navigate to TCF CMP tab and TCF Settings sub-tab for UET related setup. You can enable UET by checking the checkbox labeled Microsoft's Universal Event Tracking (UET) . After enabling UET, an additional field will appear for configuration. Microsoft's Consent Signal Mapping: You\u2019ll now see default mapping for the consent signal : ad_storage The signal is pre-mapped to the TCF purposes based on Microsoft's requirements and should not be changed. Note: This mapping for the ad_storage signal is common across both GCMv2 & UET. You may continue filling out the other CMP configuration steps, or jump directly to the Deployment tab for publishing your config. 2. Without Configurator Enable UET Mode : Add the useUET flag under the window.gravito.config.cmp.tcf.core section of your configuration and set its value to true . window.gravito = { config: { cmp: { tcf: { core: { useUET: true, // ... other configurations } } } } }; Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the window.gravito.config.cmp.tcf.core section of your config manually. Define adsConsentId Based on CMP Type The adsConsentId should be an Array containing the IDs of TCF Purposes. It's value should be set to [1] Example: window.gravito = { config: { cmp: { tcf: { core: { adsConsentId: [1], // ... other configurations } } } } }; This example maps the consent value of Purpose 1 (typically used for storing and accessing information) to UET consent. How Pro TCF CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"Microsoft Consent Mode (UET)"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_uet/#microsoft-consent-mode-uet","text":"","title":"Microsoft Consent Mode (UET)"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_uet/#enabling-microsoft-consent-mode-in-gravito-cmp-new-tcf-component","text":"TCF CMP Component supports two ways to enable Microsoft's Universal Consent Mode:","title":"Enabling Microsoft Consent Mode in Gravito CMP (New) - TCF Component"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_uet/#1-using-configurator","text":"Login to the Gravito Admin Portal. Click on the CMP tab. Select the Gravito CMP (New) Configurator from the option. On the CMP Config listing page, click the New Configuration button to create a new CMP config. Give config an appropriate name and choose TCF CMP as Framework . After that, click Get Started to proceed. Now navigate to TCF CMP tab and TCF Settings sub-tab for UET related setup. You can enable UET by checking the checkbox labeled Microsoft's Universal Event Tracking (UET) . After enabling UET, an additional field will appear for configuration.","title":"1. Using Configurator"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_uet/#microsofts-consent-signal-mapping","text":"You\u2019ll now see default mapping for the consent signal : ad_storage The signal is pre-mapped to the TCF purposes based on Microsoft's requirements and should not be changed. Note: This mapping for the ad_storage signal is common across both GCMv2 & UET. You may continue filling out the other CMP configuration steps, or jump directly to the Deployment tab for publishing your config.","title":"Microsoft's Consent Signal Mapping:"},{"location":"Gravito_V6_CMP/Components/TCFCMP/tcf_cmp_uet/#2-without-configurator","text":"Enable UET Mode : Add the useUET flag under the window.gravito.config.cmp.tcf.core section of your configuration and set its value to true . window.gravito = { config: { cmp: { tcf: { core: { useUET: true, // ... other configurations } } } } }; Add adsConsentId You must also define the adsConsentId property in your configuration. This is required to map consent values for Microsoft UET. There are two cases: If Google Consent Mode is already configured : The adsConsentId property will already be available in your config. If not configured : Add the adsConsentId property under the window.gravito.config.cmp.tcf.core section of your config manually. Define adsConsentId Based on CMP Type The adsConsentId should be an Array containing the IDs of TCF Purposes. It's value should be set to [1] Example: window.gravito = { config: { cmp: { tcf: { core: { adsConsentId: [1], // ... other configurations } } } } }; This example maps the consent value of Purpose 1 (typically used for storing and accessing information) to UET consent. How Pro TCF CMP Handles UET Consent Once the above configuration is complete: Microsoft UET mode is considered enabled . Gravito CMP adds the corresponding ads consent value ( denied or granted ) to the global uetq window object. By default, the value is denied . After consent is obtained, the CMP updates the value based on the mapping defined in adsConsentId . Microsoft reads this value from the uetq object to determine whether tracking is allowed. Gravito CMP's follow the approach mentioned Here","title":"2. Without Configurator"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/","text":"Gravito WebView-based CMP Integration Guide Section 1: General Architecture \u2013 WebView-based CMP (Platform-agnostic) Overview Gravito\u2019s WebView-based CMP is a cross-platform solution designed for use in mobile apps. It allows apps to display and interact with the CMP using an embedded web browser (WebView), regardless of the native platform (React Native, Flutter, Native Android, or Native iOS). High-Level Flow CMP HTML Page Gravito provides an embeddable CMP HTML containing all configuration and JavaScript logic. This page must be hosted by the developer (on a CDN or local server). WebView Integration The CMP HTML is loaded into the mobile app\u2019s WebView component. The URL must include ?platform={platformName} query param (e.g., reactnative , flutter , android , ios ). This tells the CMP JavaScript how to handle communication for that specific platform. Communication Mechanism Communication between the CMP (JavaScript) and the native app occurs through: window.postMessage from the CMP Native event listener or handler (e.g., onMessage ) JavaScript injection ( evaluateJavascript , injectJavaScript , etc.) Based on the platform, different APIs are used to facilitate this message passing. Configuration In the webview based CMP config make sure you have set below property in config object: gravito.config.cmp.tcf.core.isWebView = true, Showing the CMP UI even if the user has already given consent If you want to show the CMP UI even if the user has already given consent, you can set the gravito.config.cmp.tcf.core.showUiWhenConsented to true in the config object. gravito.config.cmp.tcf.core.showUiWhenConsented = true, Core Message Events Event Type Direction Purpose CMP-loaded CMP \u2192 App CMP is ready and requests consent data cookieData App \u2192 CMP App sends existing consent data (if any) save CMP \u2192 App User saved consent; app must store this data config App \u2192 CMP App configures display properties of CMP UI (optional) load CMP \u2192 App CMP sends version info (informational) close CMP \u2192 App CMP UI closed (informational) App Responsibilities Host the CMP HTML provided by Gravito Load it in a WebView with the correct platform query param Listen to messages from CMP ( CMP-loaded , save ) Send stored consent data to CMP if available Store updated consent data received from CMP Optionally configure CMP UI behavior using a config message Store the tcf consents and related data in a persistent storage solution (e.g., SharedPreferences, UserDefaults, etc.) in the format mentioned in the TC Data Format . if use Google Additional Consent mode you should also store the AcString data in the same persistent storage solution against the key mentioned in the Google Additional Consent Mode . Note: All the information about the CMP that needs to be stored in the app is available in the data received in the save event. Section 2: Platform-Specific Implementation We have created platform-specific code examples. These examples demonstrate how to integrate the WebView-based CMP into your mobile applications. Links to the code examples are provided within each section. React Native Sample App You can find a sample React Native app that integrates the Gravito CMP using WebView here Required Packages npm install react-native-webview react-native-default-preference Code Example import React, {useEffect, useState} from 'react'; import {ActivityIndicator} from 'react-native'; import {WebView} from 'react-native-webview'; import DefaultPreference from 'react-native-default-preference'; const CMPWebView = ({navigation}) => { const [cmpdata, setCmpdata] = useState(undefined); const [loading, setLoading] = useState(true); let webViewRef = null; useEffect(() => { DefaultPreference.get('cmpdata').then(value => setCmpdata(value)); }, []); const goBack = () => navigation.pop(); return ( <> <WebView ref={ref => (webViewRef = ref)} source={{ uri: 'https://yourhost.com/gravito-cmp.html?platform=reactnative', }} startInLoadingState={true} onLoadStart={() => setLoading(true)} onLoad={() => { setLoading(false); const configEvent = { type: 'config', backgroundColor: 'orange', logoUrl: 'https://cdn.gravito.net/logos/gravito_logo_white_background.png', displayPreferencesCloseBtn: true, }; const configJS = `window.postMessage(${JSON.stringify(configEvent)}, \"*\");true;`; webViewRef.injectJavaScript(configJS); }} onMessage={event => { const {type} = JSON.parse(event.nativeEvent.data); switch (type) { case 'CMP-loaded': const payload = { type: 'cookieData', ...(cmpdata ? JSON.parse(cmpdata) : {}), }; const postJS = `window.postMessage(${JSON.stringify(payload)}, \"*\");true;`; webViewRef.injectJavaScript(postJS); break; case 'save': DefaultPreference.set('cmpdata', event.nativeEvent.data); goBack(); break; case 'load': console.log('CMP config/version info:', event.nativeEvent.data); break; case 'close': break; default: break; } }} /> {loading && ( <ActivityIndicator style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, justifyContent: 'center', alignItems: 'center', }} size=\"large\" /> )} </> ); }; export default CMPWebView; Consent Storage // To store DefaultPreference.set('cmpdata', jsonData); // To retrieve DefaultPreference.get('cmpdata').then(value => { ... }); Note: The cmpdata should be stored in the format mentioned in the TC Data Format Opening the CMP UI from Apps webView.injectJavaScript( 'window.gravito.cmp.openPreferences();', true, ); Flutter Sample App You can find a sample Flutter app that integrates the Gravito CMP using WebView here Required Packages dependencies: webview_flutter: ^4.0.7 webview_flutter_wkwebview: ^3.10.0 shared_preferences: ^2.0.15 Code Example import 'dart:convert'; import 'package:flutter/material.dart'; import 'package:shared_preferences/shared_preferences.dart'; import 'package:webview_flutter/webview_flutter.dart'; import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart'; class CMPWebView extends StatefulWidget { const CMPWebView({super.key}); @override State<CMPWebView> createState() => _CMPWebViewState(); } class _CMPWebViewState extends State<CMPWebView> { late final WebViewController controller; bool loading = true; @override void initState() { super.initState(); final WebKitWebViewControllerCreationParams params = WebKitWebViewControllerCreationParams( allowsInlineMediaPlayback: true, mediaTypesRequiringUserAction: const <PlaybackMediaTypes>{}, ); controller = WebKitWebViewController.fromParams(params) ..setJavaScriptMode(JavaScriptMode.unrestricted) ..addJavaScriptChannel( 'FlutterAppWebView', onMessageReceived: _onJavaScriptMessageReceived, ) ..setNavigationDelegate(NavigationDelegate( onPageFinished: (_) { setState(() => loading = false); }, )) ..loadRequest(Uri.parse( 'https://yourdomain.com/gravito-cmp.html?platform=flutter')); } Future<void> _onJavaScriptMessageReceived(JavaScriptMessage message) async { final prefs = await SharedPreferences.getInstance(); final data = jsonDecode(message.message); final type = data['type']; switch (type) { case 'CMP-loaded': final stored = prefs.getString('cookieData'); final cookieMsg = { \"type\": \"cookieData\", \"tcstring\": stored != null ? jsonDecode(stored)[\"tcstring\"] : null, \"nontcfdata\": stored != null ? jsonDecode(stored)[\"nontcfdata\"] : null, }; controller.runJavaScript( 'window.postMessage(${jsonEncode(cookieMsg)})'); break; case 'save': await prefs.setString(\"cookieData\", jsonEncode({ \"tcstring\": data[\"tcstring\"], \"nontcfdata\": data[\"nontcfdata\"], })); break; case 'close': Navigator.of(context).pop(); break; default: break; } } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: const Text('Consent Manager'), ), body: Stack( children: [ WebViewWidget(controller: controller), if (loading) const Center(child: CircularProgressIndicator()), ], ), ); } } \u26a0\ufe0f Important : You must register the JavaScript adapter with the exact name used in the CMP JavaScript. For Gravito CMP, the adapter name should be \"FlutterAppWebView\" . Consent Storage // Store await prefs.setString('cookieData', jsonEncode(cookie)); // Retrieve final stored = prefs.getString('cookieData'); Note: The cookieData should be stored in the format mentioned in the TC Data Format Opening Preferences UI from App controller.runJavaScript('window.gravito.cmp.openPreferences();'); iOS (Native) Sample App You can find a sample IOS app that integrates the Gravito CMP using WebView here Required Configuration Ensure NSAppTransportSecurity is updated in Info.plist to allow loading the CMP page if it\u2019s served from HTTP or non-standard HTTPS. <key>NSAppTransportSecurity</key> <dict> <key>NSAllowsArbitraryLoads</key> <true/> </dict> Code Example import UIKit import WebKit class ViewController: UIViewController, WKScriptMessageHandler { var webView: WKWebView! override func viewDidLoad() { super.viewDidLoad() let preferences = WKPreferences() preferences.setValue(true, forKey: \"developerExtrasEnabled\") let configuration = WKWebViewConfiguration() configuration.preferences = preferences configuration.userContentController.add(self, name: \"jsHandler\") webView = WKWebView(frame: view.bounds, configuration: configuration) webView.autoresizingMask = [.flexibleWidth, .flexibleHeight] if #available(iOS 16.4, *) { webView.isInspectable = true } view.addSubview(webView) loadTheUrl() } func loadTheUrl() { let urlString = \"https://yourhost.com/gravito-cmp.html?platform=ios\" if let url = URL(string: urlString) { let request = URLRequest(url: url) webView.load(request) } } func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) { if message.name == \"jsHandler\", let json = message.body as? [String: Any], let event = json[\"event\"] as? String { switch event { case \"start\": let tcstring = UserDefaults.standard.string(forKey: \"tcstring\") ?? \"\" let nontcfdata = UserDefaults.standard.string(forKey: \"nontcfdata\") ?? \"\" let acstring = UserDefaults.standard.string(forKey: \"acstring\") ?? \"\" let dict: [String: Any] = [ \"type\": \"cookieData\", \"tcstring\": tcstring, \"nontcfdata\": nontcfdata, \"acstring\": acstring, ] if let jsonData = try? JSONSerialization.data(withJSONObject: dict, options: []), let jsonString = String(data: jsonData, encoding: .utf8) { let js = \"window.postMessage(\\(jsonString), \"*\");true;\" webView.evaluateJavaScript(js, completionHandler: nil) } case \"save\": if let tcstring = json[\"data\"] as? String { UserDefaults.standard.set(tcstring, forKey: \"tcstring\") } if let nontcfdata = json[\"nontcfdata\"] as? String { UserDefaults.standard.set(nontcfdata, forKey: \"nontcfdata\") } if let acstring = json[\"acstring\"] as? String { UserDefaults.standard.set(acstring, forKey: \"acstring\") } default: break } } } } \u26a0\ufe0f Important : You must register the JavaScript adapter with the exact name used in the CMP JavaScript. For Gravito CMP, the adapter name should be \"jsHandler\" . Consent Storage UserDefaults.standard.set(tcstring, forKey: \"tcstring\") UserDefaults.standard.set(nontcfdata, forKey: \"nontcfdata\") UserDefaults.standard.set(acstring, forKey: \"acstring\") let tcstring = UserDefaults.standard.string(forKey: \"tcstring\") let nontcfdata = UserDefaults.standard.string(forKey: \"nontcfdata\") let acstring = UserDefaults.standard.string(forKey: \"acstring\") Note: The tcstring , nontcfdata , and acstring should be stored in the format mentioned in the TC Data Format . Opening Preferences UI from App webView.evaluateJavaScript(\"window.gravito.cmp.openPreferences();\", completionHandler: nil) Android Native (Java/Kotlin) Overview The Android implementation of Gravito CMP uses a WebView that communicates with the native app through a JavaScriptInterface . The app handles consent data storage using SharedPreferences . Sample App You can find a sample Android app that integrates the Gravito CMP using WebView here \u26a0\ufe0f Important : You must register the JavaScript adapter with the exact name used in the CMP JavaScript. For Gravito CMP, the adapter name should be \"AndroidAppWebView\" . Required Setup Minimum Android SDK: 21+ Add Internet permissions in AndroidManifest.xml : <uses-permission android:name=\"android.permission.INTERNET\"/> Required Components WebView setup in your Activity JavaScript interface class ( WebAppInterface ) Consent storage using SharedPreferences JavaScript Adapter: WebAppInterface.java package com.example.gravito_android_webview_sample; import android.content.Context; import android.content.SharedPreferences; import android.util.Log; import android.webkit.JavascriptInterface; import android.widget.Toast; import org.json.JSONException; import org.json.JSONObject; public class WebAppInterface { private final Context context; private final SharedPreferences sharedPreferences; public WebAppInterface(Context context) { this.context = context; this.sharedPreferences = context.getSharedPreferences(\"MYPREF\", Context.MODE_PRIVATE); } @JavascriptInterface public void showToast(String toast) { Toast.makeText(context, toast, Toast.LENGTH_SHORT).show(); } @JavascriptInterface public void getValueFromWebView(String value) { try { JSONObject jsonObject = new JSONObject(value); String type = jsonObject.optString(\"type\"); switch (type) { case \"save\": String tcString = jsonObject.optString(\"tcstring\", \"\"); String acString = jsonObject.optString(\"acstring\", \"\"); String nonTcfData = jsonObject.optString(\"nontcfdata\", \"\"); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putString(\"TC_STRING\", tcString); editor.putString(\"AC_STRING\", acString); editor.putString(\"NON_TCF_DATA\", nonTcfData); editor.apply(); break; case \"close\": Log.d(\"WebAppInterface\", \"Handling close event\"); break; case \"load\": Log.d(\"WebAppInterface\", \"Handling load event\"); break; default: Log.d(\"WebAppInterface\", \"Unknown event type: \" + type); break; } } catch (JSONException e) { Log.e(\"WebAppInterface\", \"JSON parse error: \" + e.getMessage()); } } @JavascriptInterface public String getValueFromStorage() { try { String tcString = sharedPreferences.getString(\"TC_STRING\", null); String acString = sharedPreferences.getString(\"AC_STRING\", null); String nonTcfData = sharedPreferences.getString(\"NON_TCF_DATA\", null); JSONObject json = new JSONObject(); json.put(\"tcstring\", tcString); json.put(\"acstring\", acString); json.put(\"nontcfdata\", nonTcfData); return json.toString(); } catch (JSONException e) { Log.e(\"WebAppInterface\", \"JSON creation error: \" + e.getMessage()); return \"{}\"; } } @JavascriptInterface public void onButtonClick() { // Optional: handle clicks from CMP if required } } MainActivity Setup package com.example.gravito_android_webview_sample; import android.os.Bundle; import android.webkit.WebSettings; import android.webkit.WebView; import androidx.appcompat.app.AppCompatActivity; public class MainActivity extends AppCompatActivity { private WebView cmpWebView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); cmpWebView = new WebView(this); setContentView(cmpWebView); WebSettings webSettings = cmpWebView.getSettings(); webSettings.setJavaScriptEnabled(true); // Register JavaScript interface with exact name used in CMP HTML cmpWebView.addJavascriptInterface(new WebAppInterface(this), \"AndroidAppWebView\"); cmpWebView.loadUrl(\"https://yourdomain.com/gravito-cmp.html?platform=android\"); } @Override protected void onDestroy() { if (cmpWebView != null) { cmpWebView.destroy(); } super.onDestroy(); } } Opening Preferences UI from Native App cmpWebView.evaluateJavascript(\"window.gravito.cmp.openPreferences();\", null); Consent Storage The following keys are used for storing consent data: Key Value Description TC_STRING TCF v2 consent string ( tcstring ) AC_STRING Google Additional Consent string ( acstring ) NON_TCF_DATA Any non-TCF custom data Make sure these values are persisted in SharedPreferences for future app launches. Note: The tcstring , nontcfdata , and acstring should be stored in the format mentioned in the TC Data Format . Summary Use WebView to load Gravito CMP with ?platform=android . Register JavaScript adapter named AndroidAppWebView (case-sensitive). Use WebAppInterface class to handle consent events ( save , load , close ). Persist consent data using SharedPreferences . Use evaluateJavascript to send commands from app to WebView (e.g., open preferences screen).","title":"Gravito WebView-based CMP Integration Guide"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#gravito-webview-based-cmp-integration-guide","text":"","title":"Gravito WebView-based CMP Integration Guide"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#section-1-general-architecture-webview-based-cmp-platform-agnostic","text":"","title":"Section 1: General Architecture \u2013 WebView-based CMP (Platform-agnostic)"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#overview","text":"Gravito\u2019s WebView-based CMP is a cross-platform solution designed for use in mobile apps. It allows apps to display and interact with the CMP using an embedded web browser (WebView), regardless of the native platform (React Native, Flutter, Native Android, or Native iOS).","title":"Overview"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#high-level-flow","text":"CMP HTML Page Gravito provides an embeddable CMP HTML containing all configuration and JavaScript logic. This page must be hosted by the developer (on a CDN or local server). WebView Integration The CMP HTML is loaded into the mobile app\u2019s WebView component. The URL must include ?platform={platformName} query param (e.g., reactnative , flutter , android , ios ). This tells the CMP JavaScript how to handle communication for that specific platform. Communication Mechanism Communication between the CMP (JavaScript) and the native app occurs through: window.postMessage from the CMP Native event listener or handler (e.g., onMessage ) JavaScript injection ( evaluateJavascript , injectJavaScript , etc.) Based on the platform, different APIs are used to facilitate this message passing.","title":"High-Level Flow"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#configuration","text":"In the webview based CMP config make sure you have set below property in config object: gravito.config.cmp.tcf.core.isWebView = true,","title":"Configuration"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#showing-the-cmp-ui-even-if-the-user-has-already-given-consent","text":"If you want to show the CMP UI even if the user has already given consent, you can set the gravito.config.cmp.tcf.core.showUiWhenConsented to true in the config object. gravito.config.cmp.tcf.core.showUiWhenConsented = true,","title":"Showing the CMP UI even if the user has already given consent"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#core-message-events","text":"Event Type Direction Purpose CMP-loaded CMP \u2192 App CMP is ready and requests consent data cookieData App \u2192 CMP App sends existing consent data (if any) save CMP \u2192 App User saved consent; app must store this data config App \u2192 CMP App configures display properties of CMP UI (optional) load CMP \u2192 App CMP sends version info (informational) close CMP \u2192 App CMP UI closed (informational)","title":"Core Message Events"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#app-responsibilities","text":"Host the CMP HTML provided by Gravito Load it in a WebView with the correct platform query param Listen to messages from CMP ( CMP-loaded , save ) Send stored consent data to CMP if available Store updated consent data received from CMP Optionally configure CMP UI behavior using a config message Store the tcf consents and related data in a persistent storage solution (e.g., SharedPreferences, UserDefaults, etc.) in the format mentioned in the TC Data Format . if use Google Additional Consent mode you should also store the AcString data in the same persistent storage solution against the key mentioned in the Google Additional Consent Mode . Note: All the information about the CMP that needs to be stored in the app is available in the data received in the save event.","title":"App Responsibilities"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#section-2-platform-specific-implementation","text":"We have created platform-specific code examples. These examples demonstrate how to integrate the WebView-based CMP into your mobile applications. Links to the code examples are provided within each section.","title":"Section 2: Platform-Specific Implementation"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#react-native","text":"","title":"React Native"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#sample-app","text":"You can find a sample React Native app that integrates the Gravito CMP using WebView here","title":"Sample App"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#required-packages","text":"npm install react-native-webview react-native-default-preference","title":"Required Packages"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#code-example","text":"import React, {useEffect, useState} from 'react'; import {ActivityIndicator} from 'react-native'; import {WebView} from 'react-native-webview'; import DefaultPreference from 'react-native-default-preference'; const CMPWebView = ({navigation}) => { const [cmpdata, setCmpdata] = useState(undefined); const [loading, setLoading] = useState(true); let webViewRef = null; useEffect(() => { DefaultPreference.get('cmpdata').then(value => setCmpdata(value)); }, []); const goBack = () => navigation.pop(); return ( <> <WebView ref={ref => (webViewRef = ref)} source={{ uri: 'https://yourhost.com/gravito-cmp.html?platform=reactnative', }} startInLoadingState={true} onLoadStart={() => setLoading(true)} onLoad={() => { setLoading(false); const configEvent = { type: 'config', backgroundColor: 'orange', logoUrl: 'https://cdn.gravito.net/logos/gravito_logo_white_background.png', displayPreferencesCloseBtn: true, }; const configJS = `window.postMessage(${JSON.stringify(configEvent)}, \"*\");true;`; webViewRef.injectJavaScript(configJS); }} onMessage={event => { const {type} = JSON.parse(event.nativeEvent.data); switch (type) { case 'CMP-loaded': const payload = { type: 'cookieData', ...(cmpdata ? JSON.parse(cmpdata) : {}), }; const postJS = `window.postMessage(${JSON.stringify(payload)}, \"*\");true;`; webViewRef.injectJavaScript(postJS); break; case 'save': DefaultPreference.set('cmpdata', event.nativeEvent.data); goBack(); break; case 'load': console.log('CMP config/version info:', event.nativeEvent.data); break; case 'close': break; default: break; } }} /> {loading && ( <ActivityIndicator style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, justifyContent: 'center', alignItems: 'center', }} size=\"large\" /> )} </> ); }; export default CMPWebView;","title":"Code Example"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#consent-storage","text":"// To store DefaultPreference.set('cmpdata', jsonData); // To retrieve DefaultPreference.get('cmpdata').then(value => { ... }); Note: The cmpdata should be stored in the format mentioned in the TC Data Format","title":"Consent Storage"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#opening-the-cmp-ui-from-apps","text":"webView.injectJavaScript( 'window.gravito.cmp.openPreferences();', true, );","title":"Opening the CMP UI from Apps"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#flutter","text":"","title":"Flutter"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#sample-app_1","text":"You can find a sample Flutter app that integrates the Gravito CMP using WebView here","title":"Sample App"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#required-packages_1","text":"dependencies: webview_flutter: ^4.0.7 webview_flutter_wkwebview: ^3.10.0 shared_preferences: ^2.0.15","title":"Required Packages"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#code-example_1","text":"import 'dart:convert'; import 'package:flutter/material.dart'; import 'package:shared_preferences/shared_preferences.dart'; import 'package:webview_flutter/webview_flutter.dart'; import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart'; class CMPWebView extends StatefulWidget { const CMPWebView({super.key}); @override State<CMPWebView> createState() => _CMPWebViewState(); } class _CMPWebViewState extends State<CMPWebView> { late final WebViewController controller; bool loading = true; @override void initState() { super.initState(); final WebKitWebViewControllerCreationParams params = WebKitWebViewControllerCreationParams( allowsInlineMediaPlayback: true, mediaTypesRequiringUserAction: const <PlaybackMediaTypes>{}, ); controller = WebKitWebViewController.fromParams(params) ..setJavaScriptMode(JavaScriptMode.unrestricted) ..addJavaScriptChannel( 'FlutterAppWebView', onMessageReceived: _onJavaScriptMessageReceived, ) ..setNavigationDelegate(NavigationDelegate( onPageFinished: (_) { setState(() => loading = false); }, )) ..loadRequest(Uri.parse( 'https://yourdomain.com/gravito-cmp.html?platform=flutter')); } Future<void> _onJavaScriptMessageReceived(JavaScriptMessage message) async { final prefs = await SharedPreferences.getInstance(); final data = jsonDecode(message.message); final type = data['type']; switch (type) { case 'CMP-loaded': final stored = prefs.getString('cookieData'); final cookieMsg = { \"type\": \"cookieData\", \"tcstring\": stored != null ? jsonDecode(stored)[\"tcstring\"] : null, \"nontcfdata\": stored != null ? jsonDecode(stored)[\"nontcfdata\"] : null, }; controller.runJavaScript( 'window.postMessage(${jsonEncode(cookieMsg)})'); break; case 'save': await prefs.setString(\"cookieData\", jsonEncode({ \"tcstring\": data[\"tcstring\"], \"nontcfdata\": data[\"nontcfdata\"], })); break; case 'close': Navigator.of(context).pop(); break; default: break; } } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: const Text('Consent Manager'), ), body: Stack( children: [ WebViewWidget(controller: controller), if (loading) const Center(child: CircularProgressIndicator()), ], ), ); } } \u26a0\ufe0f Important : You must register the JavaScript adapter with the exact name used in the CMP JavaScript. For Gravito CMP, the adapter name should be \"FlutterAppWebView\" .","title":"Code Example"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#consent-storage_1","text":"// Store await prefs.setString('cookieData', jsonEncode(cookie)); // Retrieve final stored = prefs.getString('cookieData'); Note: The cookieData should be stored in the format mentioned in the TC Data Format","title":"Consent Storage"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#opening-preferences-ui-from-app","text":"controller.runJavaScript('window.gravito.cmp.openPreferences();');","title":"Opening Preferences UI from App"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#ios-native","text":"","title":"iOS (Native)"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#sample-app_2","text":"You can find a sample IOS app that integrates the Gravito CMP using WebView here","title":"Sample App"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#required-configuration","text":"Ensure NSAppTransportSecurity is updated in Info.plist to allow loading the CMP page if it\u2019s served from HTTP or non-standard HTTPS. <key>NSAppTransportSecurity</key> <dict> <key>NSAllowsArbitraryLoads</key> <true/> </dict>","title":"Required Configuration"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#code-example_2","text":"import UIKit import WebKit class ViewController: UIViewController, WKScriptMessageHandler { var webView: WKWebView! override func viewDidLoad() { super.viewDidLoad() let preferences = WKPreferences() preferences.setValue(true, forKey: \"developerExtrasEnabled\") let configuration = WKWebViewConfiguration() configuration.preferences = preferences configuration.userContentController.add(self, name: \"jsHandler\") webView = WKWebView(frame: view.bounds, configuration: configuration) webView.autoresizingMask = [.flexibleWidth, .flexibleHeight] if #available(iOS 16.4, *) { webView.isInspectable = true } view.addSubview(webView) loadTheUrl() } func loadTheUrl() { let urlString = \"https://yourhost.com/gravito-cmp.html?platform=ios\" if let url = URL(string: urlString) { let request = URLRequest(url: url) webView.load(request) } } func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) { if message.name == \"jsHandler\", let json = message.body as? [String: Any], let event = json[\"event\"] as? String { switch event { case \"start\": let tcstring = UserDefaults.standard.string(forKey: \"tcstring\") ?? \"\" let nontcfdata = UserDefaults.standard.string(forKey: \"nontcfdata\") ?? \"\" let acstring = UserDefaults.standard.string(forKey: \"acstring\") ?? \"\" let dict: [String: Any] = [ \"type\": \"cookieData\", \"tcstring\": tcstring, \"nontcfdata\": nontcfdata, \"acstring\": acstring, ] if let jsonData = try? JSONSerialization.data(withJSONObject: dict, options: []), let jsonString = String(data: jsonData, encoding: .utf8) { let js = \"window.postMessage(\\(jsonString), \"*\");true;\" webView.evaluateJavaScript(js, completionHandler: nil) } case \"save\": if let tcstring = json[\"data\"] as? String { UserDefaults.standard.set(tcstring, forKey: \"tcstring\") } if let nontcfdata = json[\"nontcfdata\"] as? String { UserDefaults.standard.set(nontcfdata, forKey: \"nontcfdata\") } if let acstring = json[\"acstring\"] as? String { UserDefaults.standard.set(acstring, forKey: \"acstring\") } default: break } } } } \u26a0\ufe0f Important : You must register the JavaScript adapter with the exact name used in the CMP JavaScript. For Gravito CMP, the adapter name should be \"jsHandler\" .","title":"Code Example"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#consent-storage_2","text":"UserDefaults.standard.set(tcstring, forKey: \"tcstring\") UserDefaults.standard.set(nontcfdata, forKey: \"nontcfdata\") UserDefaults.standard.set(acstring, forKey: \"acstring\") let tcstring = UserDefaults.standard.string(forKey: \"tcstring\") let nontcfdata = UserDefaults.standard.string(forKey: \"nontcfdata\") let acstring = UserDefaults.standard.string(forKey: \"acstring\") Note: The tcstring , nontcfdata , and acstring should be stored in the format mentioned in the TC Data Format .","title":"Consent Storage"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#opening-preferences-ui-from-app_1","text":"webView.evaluateJavaScript(\"window.gravito.cmp.openPreferences();\", completionHandler: nil)","title":"Opening Preferences UI from App"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#android-native-javakotlin","text":"","title":"Android Native (Java/Kotlin)"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#overview_1","text":"The Android implementation of Gravito CMP uses a WebView that communicates with the native app through a JavaScriptInterface . The app handles consent data storage using SharedPreferences .","title":"Overview"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#sample-app_3","text":"You can find a sample Android app that integrates the Gravito CMP using WebView here \u26a0\ufe0f Important : You must register the JavaScript adapter with the exact name used in the CMP JavaScript. For Gravito CMP, the adapter name should be \"AndroidAppWebView\" .","title":"Sample App"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#required-setup","text":"Minimum Android SDK: 21+ Add Internet permissions in AndroidManifest.xml : <uses-permission android:name=\"android.permission.INTERNET\"/>","title":"Required Setup"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#required-components","text":"WebView setup in your Activity JavaScript interface class ( WebAppInterface ) Consent storage using SharedPreferences","title":"Required Components"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#javascript-adapter-webappinterfacejava","text":"package com.example.gravito_android_webview_sample; import android.content.Context; import android.content.SharedPreferences; import android.util.Log; import android.webkit.JavascriptInterface; import android.widget.Toast; import org.json.JSONException; import org.json.JSONObject; public class WebAppInterface { private final Context context; private final SharedPreferences sharedPreferences; public WebAppInterface(Context context) { this.context = context; this.sharedPreferences = context.getSharedPreferences(\"MYPREF\", Context.MODE_PRIVATE); } @JavascriptInterface public void showToast(String toast) { Toast.makeText(context, toast, Toast.LENGTH_SHORT).show(); } @JavascriptInterface public void getValueFromWebView(String value) { try { JSONObject jsonObject = new JSONObject(value); String type = jsonObject.optString(\"type\"); switch (type) { case \"save\": String tcString = jsonObject.optString(\"tcstring\", \"\"); String acString = jsonObject.optString(\"acstring\", \"\"); String nonTcfData = jsonObject.optString(\"nontcfdata\", \"\"); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putString(\"TC_STRING\", tcString); editor.putString(\"AC_STRING\", acString); editor.putString(\"NON_TCF_DATA\", nonTcfData); editor.apply(); break; case \"close\": Log.d(\"WebAppInterface\", \"Handling close event\"); break; case \"load\": Log.d(\"WebAppInterface\", \"Handling load event\"); break; default: Log.d(\"WebAppInterface\", \"Unknown event type: \" + type); break; } } catch (JSONException e) { Log.e(\"WebAppInterface\", \"JSON parse error: \" + e.getMessage()); } } @JavascriptInterface public String getValueFromStorage() { try { String tcString = sharedPreferences.getString(\"TC_STRING\", null); String acString = sharedPreferences.getString(\"AC_STRING\", null); String nonTcfData = sharedPreferences.getString(\"NON_TCF_DATA\", null); JSONObject json = new JSONObject(); json.put(\"tcstring\", tcString); json.put(\"acstring\", acString); json.put(\"nontcfdata\", nonTcfData); return json.toString(); } catch (JSONException e) { Log.e(\"WebAppInterface\", \"JSON creation error: \" + e.getMessage()); return \"{}\"; } } @JavascriptInterface public void onButtonClick() { // Optional: handle clicks from CMP if required } }","title":"JavaScript Adapter: WebAppInterface.java"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#mainactivity-setup","text":"package com.example.gravito_android_webview_sample; import android.os.Bundle; import android.webkit.WebSettings; import android.webkit.WebView; import androidx.appcompat.app.AppCompatActivity; public class MainActivity extends AppCompatActivity { private WebView cmpWebView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); cmpWebView = new WebView(this); setContentView(cmpWebView); WebSettings webSettings = cmpWebView.getSettings(); webSettings.setJavaScriptEnabled(true); // Register JavaScript interface with exact name used in CMP HTML cmpWebView.addJavascriptInterface(new WebAppInterface(this), \"AndroidAppWebView\"); cmpWebView.loadUrl(\"https://yourdomain.com/gravito-cmp.html?platform=android\"); } @Override protected void onDestroy() { if (cmpWebView != null) { cmpWebView.destroy(); } super.onDestroy(); } }","title":"MainActivity Setup"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#opening-preferences-ui-from-native-app","text":"cmpWebView.evaluateJavascript(\"window.gravito.cmp.openPreferences();\", null);","title":"Opening Preferences UI from Native App"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#consent-storage_3","text":"The following keys are used for storing consent data: Key Value Description TC_STRING TCF v2 consent string ( tcstring ) AC_STRING Google Additional Consent string ( acstring ) NON_TCF_DATA Any non-TCF custom data Make sure these values are persisted in SharedPreferences for future app launches. Note: The tcstring , nontcfdata , and acstring should be stored in the format mentioned in the TC Data Format .","title":"Consent Storage"},{"location":"Gravito_V6_CMP/Components/TCFCMP/webview_cmp_for_apps/#summary","text":"Use WebView to load Gravito CMP with ?platform=android . Register JavaScript adapter named AndroidAppWebView (case-sensitive). Use WebAppInterface class to handle consent events ( save , load , close ). Persist consent data using SharedPreferences . Use evaluateJavascript to send commands from app to WebView (e.g., open preferences screen).","title":"Summary"},{"location":"Gravito_V6_CMP/FAQ/Consent_based_rendering/","text":"Render Certain Elements Based on Consent Value Provided by Gravito CMP Note: This guide is for the Gravito CMP (New) 's Standard component.. Gravito CMP emits events to the DOM whenever a user takes any action on the consent banner. You can use these events to render certain elements based on the consent value provided by Gravito CMP. To listen to these events, you can use the following code snippet: window.addEventListener(\"gravito:cmp:light\", function (e) { var syncEvents = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", \"cmploaded\", ]; if (syncEvents.includes(e.detail.eventType)) { // Consent values were updated/changed // \"opt-in:previously\" event is fired when the user has already given consent and has cookies } }); When these events are triggered, you can check the consent value and update the element visibility. Here is an example of how to do that: function updateViewState() { console.log(\"updateViewState\"); let id = 2; // ID of the consent you want to check let elementID = \"YOUR_ELEMENT_ID\"; // ID of the map or element // Check the consent value for cookies let isCookieConsent = window.gravito.cmp.standard.consentHandler.getConsentValue(2); // Show or hide the element based on consent value if (!isCookieConsent) { document.getElementById(elementID).style.display = \"none\"; } else { document.getElementById(elementID).style.display = \"block\"; } } You can call this function in the event listener to update the view state whenever the consent value changes: function updateViewState() { console.log(\"updateViewState\"); let id = 2; // ID of the consent you want to check let elementID = \"YOUR_ELEMENT_ID\"; // ID of the map or element let isCookieConsent = window.gravito.cmp.standard.consentHandler.getConsentValue(2); if (!isCookieConsent) { document.getElementById(elementID).style.display = \"none\"; } else { document.getElementById(elementID).style.display = \"block\"; } } window.addEventListener(\"gravito:cmp:light\", function (e) { var syncEvents = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", \"cmploaded\", ]; if (syncEvents.includes(e.detail.eventType)) { updateViewState(); } }); In some cases, you might want to show a button or clickable item as a placeholder for hidden elements when consent is not given. On clicking the button, you can call a method to accept all consents and show the hidden elements. The CMP provides a method to accept all consents. You can call this method on button click and then call the updateViewState method to show the elements: function buttonClick() { window.gravito.cmp.standard.useractionHandler.saveAll(); updateViewState(); }","title":"Render Certain Elements Based on Consent Value Provided by Gravito CMP"},{"location":"Gravito_V6_CMP/FAQ/Consent_based_rendering/#render-certain-elements-based-on-consent-value-provided-by-gravito-cmp","text":"Note: This guide is for the Gravito CMP (New) 's Standard component.. Gravito CMP emits events to the DOM whenever a user takes any action on the consent banner. You can use these events to render certain elements based on the consent value provided by Gravito CMP. To listen to these events, you can use the following code snippet: window.addEventListener(\"gravito:cmp:light\", function (e) { var syncEvents = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", \"cmploaded\", ]; if (syncEvents.includes(e.detail.eventType)) { // Consent values were updated/changed // \"opt-in:previously\" event is fired when the user has already given consent and has cookies } }); When these events are triggered, you can check the consent value and update the element visibility. Here is an example of how to do that: function updateViewState() { console.log(\"updateViewState\"); let id = 2; // ID of the consent you want to check let elementID = \"YOUR_ELEMENT_ID\"; // ID of the map or element // Check the consent value for cookies let isCookieConsent = window.gravito.cmp.standard.consentHandler.getConsentValue(2); // Show or hide the element based on consent value if (!isCookieConsent) { document.getElementById(elementID).style.display = \"none\"; } else { document.getElementById(elementID).style.display = \"block\"; } } You can call this function in the event listener to update the view state whenever the consent value changes: function updateViewState() { console.log(\"updateViewState\"); let id = 2; // ID of the consent you want to check let elementID = \"YOUR_ELEMENT_ID\"; // ID of the map or element let isCookieConsent = window.gravito.cmp.standard.consentHandler.getConsentValue(2); if (!isCookieConsent) { document.getElementById(elementID).style.display = \"none\"; } else { document.getElementById(elementID).style.display = \"block\"; } } window.addEventListener(\"gravito:cmp:light\", function (e) { var syncEvents = [ \"layer1:opt-out:all\", \"layer2:opt-out:all\", \"layer2:opt-in:selected\", \"layer1:opt-in:all\", \"layer2:opt-in:all\", \"opt-in:previously\", \"cmploaded\", ]; if (syncEvents.includes(e.detail.eventType)) { updateViewState(); } }); In some cases, you might want to show a button or clickable item as a placeholder for hidden elements when consent is not given. On clicking the button, you can call a method to accept all consents and show the hidden elements. The CMP provides a method to accept all consents. You can call this method on button click and then call the updateViewState method to show the elements: function buttonClick() { window.gravito.cmp.standard.useractionHandler.saveAll(); updateViewState(); }","title":"Render Certain Elements Based on Consent Value Provided by Gravito CMP"},{"location":"Gravito_V6_CMP/FAQ/How_open_CMP_in_given_session/","text":"How to Open Gravito CMP (New) in a Given Session? To open Gravito CMP (New) in a given session, you can use the window.gravito.cmp.openPreferences() method. This method will open the CMP in the current session, allowing users to manage their consent preferences. You can call this method in your JavaScript code whenever you want to open the CMP. For example, you can attach it to a button click event or any other event that should trigger the CMP. By default, this method opens the details view (layer 2) of the Gravito CMP. You can also specify the layer you want to open by passing the tab index as an argument. For example, to open layer 1, use the following code: ```javascript gravito.cmp.openPreferences(0);","title":"How to Open Gravito CMP (New) in a Given Session?"},{"location":"Gravito_V6_CMP/FAQ/How_open_CMP_in_given_session/#how-to-open-gravito-cmp-new-in-a-given-session","text":"To open Gravito CMP (New) in a given session, you can use the window.gravito.cmp.openPreferences() method. This method will open the CMP in the current session, allowing users to manage their consent preferences. You can call this method in your JavaScript code whenever you want to open the CMP. For example, you can attach it to a button click event or any other event that should trigger the CMP. By default, this method opens the details view (layer 2) of the Gravito CMP. You can also specify the layer you want to open by passing the tab index as an argument. For example, to open layer 1, use the following code: ```javascript gravito.cmp.openPreferences(0);","title":"How to Open Gravito CMP (New) in a Given Session?"},{"location":"Gravito_V6_CMP/FAQ/How_to_addCustomFonts/","text":"How to Add Custom Font in Gravito CMP (New)? To add custom fonts in Gravito CMP (New), you can use the customCSS field (Code Editior) in the configurator. You can add any CSS syntax in this field, including @font-face rules to load custom fonts. Here is an example of how to add a custom font using @font-face : @font-face { font-family: 'MyCustomFont'; src: url('https://example.com/fonts/MyCustomFont.woff2') format('woff2'), url('https://example.com/fonts/MyCustomFont.woff') format('woff'); font-weight: normal; font-style: normal; } You can then use this font name to override the default font in the CSS class for the root container of Gravito CMP (New), i.e., the class gravitoCMP-tab-container . .gravitoCMP-tab-container { font-family: 'MyCustomFont', sans-serif; }","title":"How to Add Custom Font in Gravito CMP (New)?"},{"location":"Gravito_V6_CMP/FAQ/How_to_addCustomFonts/#how-to-add-custom-font-in-gravito-cmp-new","text":"To add custom fonts in Gravito CMP (New), you can use the customCSS field (Code Editior) in the configurator. You can add any CSS syntax in this field, including @font-face rules to load custom fonts. Here is an example of how to add a custom font using @font-face : @font-face { font-family: 'MyCustomFont'; src: url('https://example.com/fonts/MyCustomFont.woff2') format('woff2'), url('https://example.com/fonts/MyCustomFont.woff') format('woff'); font-weight: normal; font-style: normal; } You can then use this font name to override the default font in the CSS class for the root container of Gravito CMP (New), i.e., the class gravitoCMP-tab-container . .gravitoCMP-tab-container { font-family: 'MyCustomFont', sans-serif; }","title":"How to Add Custom Font in Gravito CMP (New)?"},{"location":"Gravito_V6_CMP/FAQ/How_to_be_google_complaint/","text":"How to Provide Google with the Required Legitimate Interests Even on Reject All Action (Only for TCF Components)? In Gravito CMP (New), there is a provision to provide Google with the required legitimate interests even on the Reject All action. This is done by configuring the necessaryLegitimatePurposes field in the window.gravito.config.cmp.tcf.core object. Google requires legitimate interests for purposes [2, 7, 9, 10] to be provided even on a Reject All action. You can modify this field in either of the following ways: Using Configurator : Open the CMP configurator in the Admin Portal. Select the config from the list and click on the Copy Configuration icon/button. This will create a new CMP config with the same settings as the original one. Now enter the name on the Basic Settings page and click the Get Started button. In the left-side menu, select the TCF CMP component. Now click on TCF Settings . In the TCF settings, you will see the necessaryLegitimatePurposes field. Change it to use purposes 2, 7, 9, 10 , then click the Save Progress button, and finally click the Publish button to publish the new config. Now, when you use this updated config on your website, it will provide Google with the required legitimate interests even on a Reject All action. Without Configurator : Update the necessaryLegitimatePurposes field at window.gravito.config.cmp.tcf.core.necessaryLegitimatePurposes in the config object. Now, when you use this updated config on your website, it will provide Google with the required legitimate interests even on a Reject All action. Note: This is only applicable for the TCF CMP component. The CMP will also additionally provide legitimate interest to Google\u2019s TCF vendor. Its ID is configured in the config at window.gravito.config.cmp.tcf.core.googleTcfId in the config object.","title":"How to Provide Google with the Required Legitimate Interests Even on Reject All Action (Only for TCF Components)?"},{"location":"Gravito_V6_CMP/FAQ/How_to_be_google_complaint/#how-to-provide-google-with-the-required-legitimate-interests-even-on-reject-all-action-only-for-tcf-components","text":"In Gravito CMP (New), there is a provision to provide Google with the required legitimate interests even on the Reject All action. This is done by configuring the necessaryLegitimatePurposes field in the window.gravito.config.cmp.tcf.core object. Google requires legitimate interests for purposes [2, 7, 9, 10] to be provided even on a Reject All action. You can modify this field in either of the following ways: Using Configurator : Open the CMP configurator in the Admin Portal. Select the config from the list and click on the Copy Configuration icon/button. This will create a new CMP config with the same settings as the original one. Now enter the name on the Basic Settings page and click the Get Started button. In the left-side menu, select the TCF CMP component. Now click on TCF Settings . In the TCF settings, you will see the necessaryLegitimatePurposes field. Change it to use purposes 2, 7, 9, 10 , then click the Save Progress button, and finally click the Publish button to publish the new config. Now, when you use this updated config on your website, it will provide Google with the required legitimate interests even on a Reject All action. Without Configurator : Update the necessaryLegitimatePurposes field at window.gravito.config.cmp.tcf.core.necessaryLegitimatePurposes in the config object. Now, when you use this updated config on your website, it will provide Google with the required legitimate interests even on a Reject All action. Note: This is only applicable for the TCF CMP component. The CMP will also additionally provide legitimate interest to Google\u2019s TCF vendor. Its ID is configured in the config at window.gravito.config.cmp.tcf.core.googleTcfId in the config object.","title":"How to Provide Google with the Required Legitimate Interests Even on Reject All Action (Only for TCF Components)?"},{"location":"Gravito_V6_CMP/FAQ/How_to_fireGTM_tags_based_on_consents/","text":"How to fire GTM tags based on consents in CMP? Note: This Feature is only available in Gravito CMP (New) - Standard CMP Component. In Gravito CMP (New) you can fire GTM tags based on the consents given by the user. This is done by configuring the gtmTags field in Gravito CMP (New) config. The gtmTags field is an array of objects, where each object represents the Trigger events and its configurations which will be used to fire the GTM tags. You can modify this field in either of the following ways: Using Configurator : Open the CMP configurator in admin Portal. Select the config from the list and click on the Copy Configuration icon/button. This will create a new CMP config with the same settings as the original one. Now enter the name on the Basic Settings page and click the Get Started button. In the left-side menu, select the Standard CMP component. Now click on Consent Categories Tab. In this tab, you will see the gtmTags sections. Click on Add GTM Tags button to add a new GTM tag configuration.It will open a modal which will have the following fields: Trigger Name : This is the event name which will be added to the data layer, and In GTM you can create a Custom Trigger using this event. Consents : In this multi-select control you can choose the cosnents item to which you want to bind this events, i.e value of this consent will decide wether to add the above events in the dataLayer object. Fire Once : Check this checkbox if you want to fire the event only once in the session. In maximum cases you will need to keep this flag checked as you want your tag to fire once to avoid duplicate loading of tags. Once you have added the GTM tag configuration by clicking Save , you can see it in the list of GTM tags. You can add multiple GTM tags by clicking on the Add GTM Tags button again. Click on the Save Progress button and then click on the Publish button to publish the new config. Now when you will use this updated config in your website, it will fire GTM tags based on the consents given by the user. Without Configurator : if you are having Gravito CMP component in context then update the gtmTags field at window.gravito.configcmp.tcf.core.gtmTags in the config object. below code is an example of how the gtmTags field should look like: window.gravito = { config: { cmp: { standard: { core: { gtmTags: [ { triggerName: 'Marketing Consent update', consents: [3], fireOnce: true }, { triggerName: 'Analytics Consent update', consents: [2], fireOnce: true } ] } } } } }; Now when you will use this updated config in your website, it will fire GTM tags based on the consents given by the user. How this works Internally? Whenever you have this field in your config , CMP will check the consent value of the consents ids you have provided in the gtmTags field. If the consent value is true then it will add the event to the dataLayer object. So for example if you have added the gtmTags field as shown above, then CMP will add the following event to the dataLayer object if the consent value of the consent id 3 is true: window.dataLayer.push({ event: 'Marketing Consent update', }); Now in GTM you can create a Custom Trigger using this event. So whenever the user gives consent to the consent id 3, this event will be added to the dataLayer object and you can use this event to fire your GTM tags. How to create a Custom Trigger in GTM? Open your GTM account and select the container where you want to create the trigger. Click on the Triggers tab in the left-side menu. Click on the New button to create a new trigger. In the trigger configuration, select Custom Event as the trigger type. In the Event Name field, enter the event name which you have provided in the gtmTags field in the config. For example, if you have provided Marketing Consent update as the event name, then enter it here. In the This trigger fires on section, select All Custom Events or Some Custom Events based on your requirement. Now click on the Save button to save the trigger. Now you can use this trigger in your GTM tags to fire them based on the consents given by the user.","title":"How to fire GTM tags based on consents in CMP?"},{"location":"Gravito_V6_CMP/FAQ/How_to_fireGTM_tags_based_on_consents/#how-to-fire-gtm-tags-based-on-consents-in-cmp","text":"Note: This Feature is only available in Gravito CMP (New) - Standard CMP Component. In Gravito CMP (New) you can fire GTM tags based on the consents given by the user. This is done by configuring the gtmTags field in Gravito CMP (New) config. The gtmTags field is an array of objects, where each object represents the Trigger events and its configurations which will be used to fire the GTM tags. You can modify this field in either of the following ways: Using Configurator : Open the CMP configurator in admin Portal. Select the config from the list and click on the Copy Configuration icon/button. This will create a new CMP config with the same settings as the original one. Now enter the name on the Basic Settings page and click the Get Started button. In the left-side menu, select the Standard CMP component. Now click on Consent Categories Tab. In this tab, you will see the gtmTags sections. Click on Add GTM Tags button to add a new GTM tag configuration.It will open a modal which will have the following fields: Trigger Name : This is the event name which will be added to the data layer, and In GTM you can create a Custom Trigger using this event. Consents : In this multi-select control you can choose the cosnents item to which you want to bind this events, i.e value of this consent will decide wether to add the above events in the dataLayer object. Fire Once : Check this checkbox if you want to fire the event only once in the session. In maximum cases you will need to keep this flag checked as you want your tag to fire once to avoid duplicate loading of tags. Once you have added the GTM tag configuration by clicking Save , you can see it in the list of GTM tags. You can add multiple GTM tags by clicking on the Add GTM Tags button again. Click on the Save Progress button and then click on the Publish button to publish the new config. Now when you will use this updated config in your website, it will fire GTM tags based on the consents given by the user. Without Configurator : if you are having Gravito CMP component in context then update the gtmTags field at window.gravito.configcmp.tcf.core.gtmTags in the config object. below code is an example of how the gtmTags field should look like: window.gravito = { config: { cmp: { standard: { core: { gtmTags: [ { triggerName: 'Marketing Consent update', consents: [3], fireOnce: true }, { triggerName: 'Analytics Consent update', consents: [2], fireOnce: true } ] } } } } }; Now when you will use this updated config in your website, it will fire GTM tags based on the consents given by the user.","title":"How to fire GTM tags based on consents in CMP?"},{"location":"Gravito_V6_CMP/FAQ/How_to_fireGTM_tags_based_on_consents/#how-this-works-internally","text":"Whenever you have this field in your config , CMP will check the consent value of the consents ids you have provided in the gtmTags field. If the consent value is true then it will add the event to the dataLayer object. So for example if you have added the gtmTags field as shown above, then CMP will add the following event to the dataLayer object if the consent value of the consent id 3 is true: window.dataLayer.push({ event: 'Marketing Consent update', }); Now in GTM you can create a Custom Trigger using this event. So whenever the user gives consent to the consent id 3, this event will be added to the dataLayer object and you can use this event to fire your GTM tags.","title":"How this works Internally?"},{"location":"Gravito_V6_CMP/FAQ/How_to_fireGTM_tags_based_on_consents/#how-to-create-a-custom-trigger-in-gtm","text":"Open your GTM account and select the container where you want to create the trigger. Click on the Triggers tab in the left-side menu. Click on the New button to create a new trigger. In the trigger configuration, select Custom Event as the trigger type. In the Event Name field, enter the event name which you have provided in the gtmTags field in the config. For example, if you have provided Marketing Consent update as the event name, then enter it here. In the This trigger fires on section, select All Custom Events or Some Custom Events based on your requirement. Now click on the Save button to save the trigger. Now you can use this trigger in your GTM tags to fire them based on the consents given by the user.","title":"How to create a Custom Trigger in GTM?"},{"location":"Gravito_V6_CMP/FAQ/How_to_resurface_CMP/","text":"How to Resurface the CMP UI to All Users and Collect Consent Again? Gravito CMP (New) configs maintain a version number for each CMP component. It is in the core section of the CMP config object. CMP will compare this version number with the consent setting in the cookie. If the version number is different, it will show the CMP UI to the user again. You can increment the version number in either of the following ways: Using Configurator : Open the CMP configurator in the admin portal. Select the config from the list and click on the copy configuration icon button. This will create a new CMP config with the same settings as the original one. Now enter the name on the basic settings page and click on the Get Started button. Now, in the left-side menu, select the CMP component you want to update. This will open the CMP-specific configuration page. Now click on TCF Settings or Consent Categories , depending on the CMP component you are updating. In this tab, at the bottom, you will see the Explore Advanced Setup button. Click on it to open the advanced settings. In the advanced settings, you will see the config version. Change it to a new number and click on the Save Progress button. Then click on the Publish button to publish the new config. Now, when you use this updated config on your website, it will show the CMP UI to the user again. Without Configurator : If you are using the TCF CMP component, update the version number at window.gravito.config.cmp.tcf.core.version in the config object. If you are using the Standard CMP component, update the version number at window.gravito.config.cmp.standard.core.version in the config object. Now, when you use this updated config on your website, it will show the CMP UI to the user again.","title":"How to Resurface the CMP UI to All Users and Collect Consent Again?"},{"location":"Gravito_V6_CMP/FAQ/How_to_resurface_CMP/#how-to-resurface-the-cmp-ui-to-all-users-and-collect-consent-again","text":"Gravito CMP (New) configs maintain a version number for each CMP component. It is in the core section of the CMP config object. CMP will compare this version number with the consent setting in the cookie. If the version number is different, it will show the CMP UI to the user again. You can increment the version number in either of the following ways: Using Configurator : Open the CMP configurator in the admin portal. Select the config from the list and click on the copy configuration icon button. This will create a new CMP config with the same settings as the original one. Now enter the name on the basic settings page and click on the Get Started button. Now, in the left-side menu, select the CMP component you want to update. This will open the CMP-specific configuration page. Now click on TCF Settings or Consent Categories , depending on the CMP component you are updating. In this tab, at the bottom, you will see the Explore Advanced Setup button. Click on it to open the advanced settings. In the advanced settings, you will see the config version. Change it to a new number and click on the Save Progress button. Then click on the Publish button to publish the new config. Now, when you use this updated config on your website, it will show the CMP UI to the user again. Without Configurator : If you are using the TCF CMP component, update the version number at window.gravito.config.cmp.tcf.core.version in the config object. If you are using the Standard CMP component, update the version number at window.gravito.config.cmp.standard.core.version in the config object. Now, when you use this updated config on your website, it will show the CMP UI to the user again.","title":"How to Resurface the CMP UI to All Users and Collect Consent Again?"},{"location":"Other_Features/Domain_Cookie_Scan/","text":"Domain Cookie Scan Gravito provides an automated way to scan your domains, where you wish to deploy Gravito's PRO CMP. You can follow the following steps to achieve this. Decide and choose domains you need to automatically scan under Accounts Once cookie scan become available, you can edit, upload more cookies, add locales and translations and publish. Lets get started. To enable the automated scan for your domain, please access Gravito's admin portal and go to \"Account\" section. Use \"Manage cookie scan\" section. Add the domain for which you wish to enable automated scan. As you might be using various technologies on your site, at times it would be impossible for a automated scan to capture all possible cookies which are dropped. We provide an easier way for you to manage the cookie listing and publish the listing which will be used by the CMP banner. Following sections outlines this functionality in detail. Access the Domain Cookie Scan feature in Gravito's admin portal If the automated cookie scan was done for your domain, you will see a accordion already added for the domain. Open the accordion and you will see a list of cookies found by the automated scan. If you want to add a new cookie to that list, please click on the \"Add New Cookie\" button, it will open a dialog, where you can add the required details. If you wish to bulk update the cookies, then there is an easy way to do it, you can download the cookie listing, by clicking on \"Download Cookie Scan\", it will download all the cookies into a CSV file, which you can update. Please note that, Gravito support multilingual cookies based on your choice of languages. The CSV has a Locale field, please add your locale like \"en\" for English, \"fi\" for Finnish, \"sv\" for Swedish. Please add the description into the relevant language. Once you are done with your updates to the cookie listing in CSV, you can then upload it using the \"Upload Cookie Scan\" button. Finally, when you are happy with your cookie listing, you can choose to Publish the cookie scan report, using the \"Publish\" button. You can repeat this process, as many times as you wish, just make sure that you republish your changes, so that those will be seen on your CMP banner.","title":"Domain Cookie Scan"},{"location":"Other_Features/Domain_Cookie_Scan/#domain-cookie-scan","text":"Gravito provides an automated way to scan your domains, where you wish to deploy Gravito's PRO CMP. You can follow the following steps to achieve this. Decide and choose domains you need to automatically scan under Accounts Once cookie scan become available, you can edit, upload more cookies, add locales and translations and publish.","title":"Domain Cookie Scan"},{"location":"Other_Features/Domain_Cookie_Scan/#lets-get-started","text":"To enable the automated scan for your domain, please access Gravito's admin portal and go to \"Account\" section. Use \"Manage cookie scan\" section. Add the domain for which you wish to enable automated scan. As you might be using various technologies on your site, at times it would be impossible for a automated scan to capture all possible cookies which are dropped. We provide an easier way for you to manage the cookie listing and publish the listing which will be used by the CMP banner. Following sections outlines this functionality in detail. Access the Domain Cookie Scan feature in Gravito's admin portal If the automated cookie scan was done for your domain, you will see a accordion already added for the domain. Open the accordion and you will see a list of cookies found by the automated scan. If you want to add a new cookie to that list, please click on the \"Add New Cookie\" button, it will open a dialog, where you can add the required details. If you wish to bulk update the cookies, then there is an easy way to do it, you can download the cookie listing, by clicking on \"Download Cookie Scan\", it will download all the cookies into a CSV file, which you can update. Please note that, Gravito support multilingual cookies based on your choice of languages. The CSV has a Locale field, please add your locale like \"en\" for English, \"fi\" for Finnish, \"sv\" for Swedish. Please add the description into the relevant language. Once you are done with your updates to the cookie listing in CSV, you can then upload it using the \"Upload Cookie Scan\" button. Finally, when you are happy with your cookie listing, you can choose to Publish the cookie scan report, using the \"Publish\" button. You can repeat this process, as many times as you wish, just make sure that you republish your changes, so that those will be seen on your CMP banner.","title":"Lets get started."},{"location":"Other_Features/GVL_Comparison/","text":"Global Vendor List Comparison Global vendor list comparison tool can be used to compare and check different versions of Global Vendor list published by IAB.","title":"GVL Comparison"},{"location":"Other_Features/GVL_Comparison/#global-vendor-list-comparison","text":"Global vendor list comparison tool can be used to compare and check different versions of Global Vendor list published by IAB.","title":"Global Vendor List Comparison"},{"location":"Other_Features/Prebid_User_Id_Module/","text":"Prebid User Id Module Gravito has a user module in prebid js, customers now can use Gravito\u2019s first party service and prebid js usermodule to use a persistent first party id in prebids bit stream. More details in the each section below. You can read more details available here","title":"Prebid User Id Module"},{"location":"Other_Features/Prebid_User_Id_Module/#prebid-user-id-module","text":"Gravito has a user module in prebid js, customers now can use Gravito\u2019s first party service and prebid js usermodule to use a persistent first party id in prebids bit stream. More details in the each section below. You can read more details available here","title":"Prebid User Id Module"},{"location":"Other_Features/Prebid_User_Module_init/","text":"Getting Started Gravito has a user module in prebid js, customers now can use Gravito\u2019s first party service and prebid js usermodule to use a persistent first party id in prebid\u2019s bit stream. To Add prebid user ID module add following code to your site. Note: If you are using a wrapper like Livewrapped to initiate Prebid Id modules, you dont need to initiate Gravito's UserId module as part of the SDK. window.gravitoCMPConfig = { settings: { sdkVersion: 2, userIdModule: true, prebidUrl: \"your prebid.js build URL\", // url from which prebid build should be loaded. default will point to gravito's build }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { // init gravito with two comma separated parameters, firstParty and prebid // this will make sure that the first party service drops a persistent id which can be utlized in prebids bit stream. window.gravito.init(\"firstParty\", \"prebid\"); }; document.body.appendChild(gravitoSDKTag);","title":"Getting Started"},{"location":"Other_Features/Prebid_User_Module_init/#getting-started","text":"Gravito has a user module in prebid js, customers now can use Gravito\u2019s first party service and prebid js usermodule to use a persistent first party id in prebid\u2019s bit stream. To Add prebid user ID module add following code to your site. Note: If you are using a wrapper like Livewrapped to initiate Prebid Id modules, you dont need to initiate Gravito's UserId module as part of the SDK. window.gravitoCMPConfig = { settings: { sdkVersion: 2, userIdModule: true, prebidUrl: \"your prebid.js build URL\", // url from which prebid build should be loaded. default will point to gravito's build }, }; var gravitoSDKTag = document.createElement(\"script\"); gravitoSDKTag.src = \"https://cdn.gravito.net/sdkv2/latest/sdk.js\"; gravitoSDKTag.onload = function () { // init gravito with two comma separated parameters, firstParty and prebid // this will make sure that the first party service drops a persistent id which can be utlized in prebids bit stream. window.gravito.init(\"firstParty\", \"prebid\"); }; document.body.appendChild(gravitoSDKTag);","title":"Getting Started"},{"location":"Try_it_out/Playbooks/","text":"Playbooks Quick guides to get started with various deployment scenarios. Deploy basic consent management banner and wire the tags on it Register/login to https://adminv2.gravito.net Navigate to CMP > Gravito CMP configurator > New Configuration Create configuration, you will find help from content menus and tooltips Upload configuration when satisfied with the result Generate deployment script from list of configurations, by clicking script icon in front of your config. Copy the script to clipboard (to deploy via GTM or similar) or download it to be uploaded to your server If you are up to deploy via GTM, follow the steps here Otherwise embed the uploaded cmp script to your website template, third party tags that you might have need to be wrapped with custom triggers that are listening to CMP events and consent being set Add link on your website from which the user can resurface the CMP, give the link id \"manageSettings\" or whatever you specified when configuring the CMP. Alternatively you can specify the link to call window.gravitoLightCMP.openPreferences() Test that CMP opens as it should and after accept/reject click the CMP won't surface again on page reload Deploy consent management banner with first party API integration Register/login to https://adminv2.gravito.net If you have not added the domain you are up to deploy CMP to when registering, add the domain by going to Account > Register domains Add domain if needed Go to Domains > First party domains > New domain Select the domain you are planning to use CMP on, repeat the steps if you have multiple domains After you have added domain(s), you will have DNS settings to be made, add those to DNS server of your domain When you are complete with DNS settings wait few minutes (minimum) for the changes to propagate Open newly added first party domain from the list (click on Edit), check to confirm that you have done the required DNS settings and click on Validate After validation the certificate is created, repeat the steps for other domains if you added multiple Navigate to CMP > Gravito CMP configurator > New Configuration On the settings page of the configurator click on the \"Use Gravito Backend\" checkbox. you can optionally pass your first-party domain URL, else our code SDK will smartly derive it from the domain on which this configuration is deployed, We recommend keeping this field blank unless you need it You will find help from content menus and tooltipsUpload configuration when satisfied with the result. Generate deployment script from list of configurations Copy the script to clipboard (to deploy via GTM or similar) or download it to be uploaded to your server If you are up to deploy via GTM, follow the steps here Otherwise embed the uploaded cmp script to your website template, third party tags that you might have need to be wrapped with custom triggers that are listening to CMP events and consent being set Add link on your website from which the user can resurface the CMP, give the link id \"manageSettings\" or whatever you specified when configuring the CMP. Alternatively you can specify the link to call window.gravitoLightCMP.openPreferences() Validate that there is request made to https://gto. when CMP loads on your website (on first page load) Test that CMP opens as it should and after accept/reject click the CMP won't surface again on page reload","title":"Playbooks"},{"location":"Try_it_out/Playbooks/#playbooks","text":"Quick guides to get started with various deployment scenarios.","title":"Playbooks"},{"location":"Try_it_out/Playbooks/#deploy-basic-consent-management-banner-and-wire-the-tags-on-it","text":"Register/login to https://adminv2.gravito.net Navigate to CMP > Gravito CMP configurator > New Configuration Create configuration, you will find help from content menus and tooltips Upload configuration when satisfied with the result Generate deployment script from list of configurations, by clicking script icon in front of your config. Copy the script to clipboard (to deploy via GTM or similar) or download it to be uploaded to your server If you are up to deploy via GTM, follow the steps here Otherwise embed the uploaded cmp script to your website template, third party tags that you might have need to be wrapped with custom triggers that are listening to CMP events and consent being set Add link on your website from which the user can resurface the CMP, give the link id \"manageSettings\" or whatever you specified when configuring the CMP. Alternatively you can specify the link to call window.gravitoLightCMP.openPreferences() Test that CMP opens as it should and after accept/reject click the CMP won't surface again on page reload","title":"Deploy basic consent management banner and wire the tags on it"},{"location":"Try_it_out/Playbooks/#deploy-consent-management-banner-with-first-party-api-integration","text":"Register/login to https://adminv2.gravito.net If you have not added the domain you are up to deploy CMP to when registering, add the domain by going to Account > Register domains Add domain if needed Go to Domains > First party domains > New domain Select the domain you are planning to use CMP on, repeat the steps if you have multiple domains After you have added domain(s), you will have DNS settings to be made, add those to DNS server of your domain When you are complete with DNS settings wait few minutes (minimum) for the changes to propagate Open newly added first party domain from the list (click on Edit), check to confirm that you have done the required DNS settings and click on Validate After validation the certificate is created, repeat the steps for other domains if you added multiple Navigate to CMP > Gravito CMP configurator > New Configuration On the settings page of the configurator click on the \"Use Gravito Backend\" checkbox. you can optionally pass your first-party domain URL, else our code SDK will smartly derive it from the domain on which this configuration is deployed, We recommend keeping this field blank unless you need it You will find help from content menus and tooltipsUpload configuration when satisfied with the result. Generate deployment script from list of configurations Copy the script to clipboard (to deploy via GTM or similar) or download it to be uploaded to your server If you are up to deploy via GTM, follow the steps here Otherwise embed the uploaded cmp script to your website template, third party tags that you might have need to be wrapped with custom triggers that are listening to CMP events and consent being set Add link on your website from which the user can resurface the CMP, give the link id \"manageSettings\" or whatever you specified when configuring the CMP. Alternatively you can specify the link to call window.gravitoLightCMP.openPreferences() Validate that there is request made to https://gto. when CMP loads on your website (on first page load) Test that CMP opens as it should and after accept/reject click the CMP won't surface again on page reload","title":"Deploy consent management banner with first party API integration"}]}